seeking a special Forth

     
Hi,

Does anyone know of a Forth implementation that:

 - is written almost entirely in forth, save for the absolutely
   smallest possible number of primitives
 - has its handful of primitives written in highly portable C:
    - can compile for 32-bit or 64-bit, little or big-endian
 - is ANS compliant
 - has a good C API, easy to add a small number of extra C
   primitives

I've been working with FICL - it has around 12k lines of C - I'd be 
curious to work with a Forth with only a few hundred (or even a few 
dozen) lines of C.

Thanks in advance

Dave

Vote Up!	0	Vote Down!
nospam (2804) 6/28/2008
comp.lang.forth  comp.lang.forth group information  7148 articles.  0 followers.  markrobertwills (871) is leader. Post Follow

 26 Replies 
 618 Views 

Similar Articles

0.005 - 24
Scrollbi Ad
 See related articles to this posting 

TeamSupport Ad - Click For More!
Aspose Ad

On Sat, 29 Jun 2008, DavidM wrote:

> Hi,
>
> Does anyone know of a Forth implementation that:
>
> - is written almost entirely in forth, save for the absolutely
>   smallest possible number of primitives
> - has its handful of primitives written in highly portable C:
>    - can compile for 32-bit or 64-bit, little or big-endian
> - is ANS compliant
> - has a good C API, easy to add a small number of extra C
>   primitives
>
> I've been working with FICL - it has around 12k lines of C - I'd be
> curious to work with a Forth with only a few hundred (or even a few
> dozen) lines of C.
>
> Thanks in advance
>
> Dave

Having implemented a couple of Forth's in C, it begs the question, just 
what is the minimal wordset with which you can bootstrap a Forth 
implementation?  Is there any literature on this?


       ---- Posted via Pronews.com - Premium Corporate Usenet News Provider ----
http://www.pronews.com offers corporate packages that have access to 100,000+ newsgroups
Vote Up!	0	Vote Down!
Spam159 (460) 6/28/2008
On Jun 28, 5:23 am, DavidM <nos...@nowhere.com> wrote:
> Does anyone know of a Forth implementation that:
>
>  - is written almost entirely in forth, save for the absolutely
>    smallest possible number of primitives

Minimal ANS Forth and eForth have a small number of primitives.
But there is a tradeoff with performance that drops off rather
steeply when the number of primitives drops below the minimal
practical number.

It is a little like asking what is the minimal instruction set.
It is an academic question not a practical one.  In reality no
one uses the absolute minimum.  eForth is more mature and more
complete than MAF and has a few more primitives.  About 80% of
code can easily consist of nothing but about 30 primitives and
when you drop below that code size will go up considerably and
performance will drop considerably.

>  - has its handful of primitives written in highly portable C:

There is a version of eForth with primitives in C.  You can
combine those primitives with any other version of eForth you
choose.

>     - can compile for 32-bit or 64-bit, little or big-endian

eForth has 16/32/64 bit versions with little more than a
declaration, and handles endian issues.

>  - is ANS compliant

Both MAF and eForth are standard.

>  - has a good C API, easy to add a small number of extra C
>    primitives

The C version of eForth should meet those needs and can be
mixed with later versions of the high level code easily.

> I've been working with FICL - it has around 12k lines of C - I'd be
> curious to work with a Forth with only a few hundred (or even a few
> dozen) lines of C.

eForth typically has only a couple of hundred lines of assembler for
the primitives.  I haven't counted the lines of C code for primitives.

Most people assemble the kernel and then compile the rest from high
level Forth.  Some people convert the whole thing to assembler and
some convert the kernel to C.  Some people metacompile the whole
thing from Forth.

The eForth 1.x series was DTC or IDTC while the 2.x through 5.x and
beyond may be STC or STC with native code inlining.  A peephole
optimizer
can be added easily to most any version.  There are also several
porting
manuals for eForth and porting is pretty easy.

> Thanks in advance
>
> Dave

Best Wishes
Vote Up!	0	Vote Down!
fox21 (1833) 6/28/2008
<spam@controlq.com> wrote in message 
news:alpine.BSF.1.10.0806281807440.45930@saddam.controlq.com...
>
> Having implemented a couple of Forth's in C, it begs the question, just 
> what is the minimal wordset with which you can bootstrap a Forth 
> implementation?  Is there any literature on this?
>

I don't know how relevant this might be to modern implementations, but about 
thirty years ago the answer to that question was IIRC sixteen.  We had been 
looking at Forth for a 6809 based test system and our software guru (not me) 
found a paper somewhere that identified the minimum wordset from which the 
whole language could be built.  It took him only a week to get a limited 
version of FORTH up and running.  MVP Forth was the model on which the 
implementation was expanded.  It was only another couple of weeks until the 
whole language was implemented.  Frequently used words were later recoded in 
assembly language.

Bob 


Vote Up!	0	Vote Down!
rsmiller (46) 6/29/2008
what about www.xs4all.nl/~thebeez/4tH/foldtree.html
Vote Up!	0	Vote Down!
lepto.python (46) 6/29/2008
On 28 jun, 14:23, DavidM <nos...@nowhere.com> wrote:
> I've been working with FICL - it has around 12k lines of C - I'd be
> curious to work with a Forth with only a few hundred (or even a few
> dozen) lines of C.
Well, 4tH is about 5.5K lines of code, but it was written as a
library, so take what you need. Furthermore, it was designed to be
highly portable and easily interface with C. Whether 16, 32 or 64 bit
- 4tH won't care.

It comes with a 100 page development guide, so changing it shouldn't
be a problem. There is even a mechanism to take your personal
enhancements from one version to the next.

http://www.xs4all.nl/~thebeez/4tH

Hans Bezemer
Vote Up!	0	Vote Down!
hansoft (442) 6/29/2008
On Sat, 28 Jun 2008, Robert Miller wrote:

> I don't know how relevant this might be to modern implementations, but about
> thirty years ago the answer to that question was IIRC sixteen.  We had been
> looking at Forth for a 6809 based test system and our software guru (not me)
> found a paper somewhere that identified the minimum wordset from which the
> whole language could be built.  It took him only a week to get a limited
> version of FORTH up and running.  MVP Forth was the model on which the
> implementation was expanded.  It was only another couple of weeks until the
> whole language was implemented.  Frequently used words were later recoded in
> assembly language.
>
> Bob

Any links to that paper?  The question is not how many, but which ones?


       ---- Posted via Pronews.com - Premium Corporate Usenet News Provider ----
http://www.pronews.com offers corporate packages that have access to 100,000+ newsgroups
Vote Up!	0	Vote Down!
Spam159 (460) 6/29/2008
foxchip <f...@ultratechnology.com> wrote:
> DavidM <nos...@nowhere.com> wrote:
> > Does anyone know of a Forth implementation that:
> > =A0- is written almost entirely in forth, save for the absolutely
> > =A0 =A0smallest possible number of primitives

> It is a little like asking what is the minimal instruction set.
> It is an academic question not a practical one. =A0In reality no

The absolute minimum number of instructions for a stack-based language
is two (http://www.eecs.usma.edu/webs/people/okasaki/pubs.html#jfp03).
Unfortunately, with that small of an instruction set there's no room
for numbers (although you can implement numbers as 'Church numerals').

Sorry, just heard the word "academic". Now _this_ is academic.
Definitely not practical.

I'm just finishing off a little interpreter (written in Python, sorry)
for such a language. Somewhat interestingly, it's more fun to program
in than Unlambda. (I'm afraid that establishes a very, VERY low level
of "fun to program".)

-Wm
Vote Up!	0	Vote Down!
wtanksleyjr (49) 7/1/2008
Op 29 Jun 2008 00:23:55 +1200 schreef DavidM:

> Hi,
> 
> Does anyone know of a Forth implementation that:
> 
>  - is written almost entirely in forth, save for the absolutely
>    smallest possible number of primitives
>  - has its handful of primitives written in highly portable C:
>     - can compile for 32-bit or 64-bit, little or big-endian
>  - is ANS compliant
>  - has a good C API, easy to add a small number of extra C
>    primitives
> 
> I've been working with FICL - it has around 12k lines of C - I'd be 
> curious to work with a Forth with only a few hundred (or even a few 
> dozen) lines of C.
> 

Lennart Benschop implemented a virtual 32 bit processor with 32 5 bit
opcodes, see:
http://www.xs4all.nl/~lennartb/forth.html

I've implemented a variant of it with 6 bit opcodes and short 5 bit
opcodes. This is a 32 bit virtual processor that runs on 16 bit DOS.

See also various Forth processors in Philip Koopman's essay:
http://www.ece.cmu.edu/%7Ekoopman/stack_computers/index.html
-- 
Coos

Vote Up!	0	Vote Down!
chforth (1145) 7/1/2008
On Sat, 28 Jun 2008 16:03:59 -0700, foxchip wrote:

> There is a version of eForth with primitives in C.  You can combine
> those primitives with any other version of eForth you choose.

The eForth developer's site makes no mention of a C version. Google 
searches are coming up blank. Do you know where I can find this C verison?

Cheers
Dave
Vote Up!	0	Vote Down!
nospam (2804) 7/1/2008
In article <48662d5b$1@news.orcon.net.nz>, DavidM  <nospam@nowhere.com> wrote:
>Hi,
>
>Does anyone know of a Forth implementation that:
>
> - is written almost entirely in forth, save for the absolutely
>   smallest possible number of primitives
> - has its handful of primitives written in highly portable C:
>    - can compile for 32-bit or 64-bit, little or big-endian
> - is ANS compliant
> - has a good C API, easy to add a small number of extra C
>   primitives
>
>I've been working with FICL - it has around 12k lines of C - I'd be
>curious to work with a Forth with only a few hundred (or even a few
>dozen) lines of C.

I would ask for a practical minimum of primitives.
E.g. you probably need a primitive for subtraction.
You could have addition building onto subtraction,
but in practice you are making your Forth more complicated that way.
I have ported ciforth a few times now . An extra primitive here
and there where -- in assembler -- ADD is replaced by XOR or
whatever doesn't cost effort.

The effort in porting is in how to link and make an executable,
and you demand that C solves that for you. In fact you are going
the gforth way.
gforth however has not great simplicity, but aims at being a
system with a good practical usability, and portability.

I guess that your best bet is starting out with FICL and simplify
it in your direction. If someone had done that, he would have
stepped forward by now. In my experience transforming a Forth
system using a regression test like the Hayes suite and a
source control system is not too difficult.


>
>Thanks in advance
>
>Dave
>

Groetjes Albert

--
-- 
Albert van der Horst, UTRECHT,THE NETHERLANDS
Economic growth -- like all pyramid schemes -- ultimately falters.
albert@spe&ar&c.xs4all.nl &=n http://home.hccnet.nl/a.w.m.van.der.horst

Vote Up!	0	Vote Down!
albert37 (3001) 7/1/2008
The Beez' wrote:
> On 28 jun, 14:23, DavidM <nos...@nowhere.com> wrote:
>> I've been working with FICL - it has around 12k lines of C - I'd be
>> curious to work with a Forth with only a few hundred (or even a few
>> dozen) lines of C.
> Well, 4tH is about 5.5K lines of code, but it was written as a
> library, so take what you need. Furthermore, it was designed to be
> highly portable and easily interface with C. Whether 16, 32 or 64 bit
> - 4tH won't care.
> 
> It comes with a 100 page development guide, so changing it shouldn't
> be a problem. There is even a mechanism to take your personal
> enhancements from one version to the next.
_____
Hans,

Is there anyone you know who has compiled 4tH on an OpenBSD (3.9 and up) 
system?  I just pulled down the generic Unix code and will try to do 
"make" in the source directory.
-- 
Regards / JCH
Vote Up!	0	Vote Down!
jch4120 (45) 7/2/2008
jch wrote:
> The Beez' wrote:
>> On 28 jun, 14:23, DavidM <nos...@nowhere.com> wrote:
>>> I've been working with FICL - it has around 12k lines of C - I'd be
>>> curious to work with a Forth with only a few hundred (or even a few
>>> dozen) lines of C.
>> Well, 4tH is about 5.5K lines of code, but it was written as a
>> library, so take what you need. Furthermore, it was designed to be
>> highly portable and easily interface with C. Whether 16, 32 or 64 bit
>> - 4tH won't care.
>>
>> It comes with a 100 page development guide, so changing it shouldn't
>> be a problem. There is even a mechanism to take your personal
>> enhancements from one version to the next.
> _____
> Hans,
> 
> Is there anyone you know who has compiled 4tH on an OpenBSD (3.9 and up) 
> system?  I just pulled down the generic Unix code and will try to do 
> "make" in the source directory.
_____
Yes, the generic Unix Makefile's contents are suitable for an OBSD 
system.  Compiles with only a few warnings.  Runs the 4th executable 
just fine.  I just don't know yet how to work with it.  Need to read the 
manual first.
-- 
Regards / JCH
Vote Up!	0	Vote Down!
jch4120 (45) 7/2/2008
DavidM wrote:

> On Sat, 28 Jun 2008 16:03:59 -0700, foxchip wrote:
>
> > There is a version of eForth with primitives in C.  You can combine
> > those primitives with any other version of eForth you choose.
>
> The eForth developer's site makes no mention of a C version. Google
> searches are coming up blank. Do you know where I can find this C verison?

Well, not quite that, but a few years ago I came across an eforth
implemented in an early version of Perl, 4.0 I think, at the Perl
archive CPAN. That should be straightforward to rework into C. But I
couldn't find it last time I looked for it (also some time back).

Related: I once heard of a highly cut down version of Forth Inc.'s
polyforth called picoforth, with things like DROP and DUP implemented
using @ and ! and temporary variables. Maybe someone can track that
down. P.M.Lawrence.
Vote Up!	0	Vote Down!
pml540114 (97) 7/2/2008
On Sat, 28 Jun 2008 18:09:58 -0400, spam@controlq.com wrote:

>On Sat, 29 Jun 2008, DavidM wrote:
>
>> Hi,
>>
>> Does anyone know of a Forth implementation that:
>>
>> - is written almost entirely in forth, save for the absolutely
>>   smallest possible number of primitives
>> - has its handful of primitives written in highly portable C:
>>    - can compile for 32-bit or 64-bit, little or big-endian
>> - is ANS compliant
>> - has a good C API, easy to add a small number of extra C
>>   primitives
>>
>> I've been working with FICL - it has around 12k lines of C - I'd be
>> curious to work with a Forth with only a few hundred (or even a few
>> dozen) lines of C.
>>
>> Thanks in advance
>>
>> Dave
>
>Having implemented a couple of Forth's in C, it begs the question, just 
>what is the minimal wordset with which you can bootstrap a Forth 
>implementation?  Is there any literature on this?

Most versions of VFX Forth (Windows, Linux, DOS) use about 30 coded
definitions. The DOS versions use more because of hard-coded interrupt
calls. This matches quite well with comments from others.

However, David's first requirement requires a Forth compiler of
some form. If there are only 30 well-defined primitives, I suggest
that their portability is of dubious virtue. Most of the portable
Forths I've seen have become unmaintainable because of the vast
number of conditional compilation switches in the C layer.

The intermediate Forth compiler to glue the Forth source to
the primitives is essentially a Forth cross compiler, however
implemented. That implementation has a big impact on many
qualities of the resulting Forth.

If one can isolate the primitives, and document them, then
producing a primitives files for each implementation should be
a minor exercise. The specification is the major exercise.

Stephen

-- 
Stephen Pelc, stephenXXX@mpeforth.com
MicroProcessor Engineering Ltd - More Real, Less Time
133 Hill Lane, Southampton SO15 5AF, England
tel: +44 (0)23 8063 1441, fax: +44 (0)23 8033 9691
web: http://www.mpeforth.com - free VFX Forth downloads
Vote Up!	0	Vote Down!
stephenXXX (1303) 7/2/2008
On 2 jul, 03:55, jch <j...@nowhere.net> wrote:
> Is there anyone you know who has compiled 4tH on an OpenBSD (3.9 and up)
> system? =A0I just pulled down the generic Unix code and will try to do
> "make" in the source directory.
I don't get an update on each and every release, but yes, 4tH is known
to work on BSD (amoungst others). Most *nix systems do just fine.

Hans Bezemer
Vote Up!	0	Vote Down!
hansoft (442) 7/2/2008
pml540...@gmail.com wrote:

> DavidM wrote:
>
> > On Sat, 28 Jun 2008 16:03:59 -0700, foxchip wrote:
> >
> > > There is a version of eForth with primitives in C.  You can combine
> > > those primitives with any other version of eForth you choose.
> >
> > The eForth developer's site makes no mention of a C version. Google
> > searches are coming up blank. Do you know where I can find this C verison?
>
> Well, not quite that, but a few years ago I came across an eforth
> implemented in an early version of Perl, 4.0 I think, at the Perl
> archive CPAN. That should be straightforward to rework into C. But I
> couldn't find it last time I looked for it (also some time back).

Aha! This may be it or something like it, though the one I came across
had more comments and acknowledged that it was based on eforth:
http://search.cpan.org/~petergal/PGForth1.3/Language/PGForth.pm -
P.M.Lawrence.
Vote Up!	0	Vote Down!
pml540114 (97) 7/2/2008
On Jul 1, 1:04 pm, DavidM <nos...@nowhere.com> wrote:
> The eForth developer's site makes no mention of a C version. Google
> searches are coming up blank. Do you know where I can find this C verison?

There is a minimum for what has to be written in Forth, and a minimum
for
has to be written in something other than Forth. Those minimum are
zero.
Bill prefers to use a Forth metacompiler and Forth assembler for
primitives.

Goggle "c eforth" for primitives in assembler or binary for linking in
a
C build, threaded Forth converted to C, and C library hooks for
further
expansion with more C functions.

Best Wishes
Vote Up!	0	Vote Down!
fox21 (1833) 7/2/2008
On 28 juin, 14:23, DavidM <nos...@nowhere.com> wrote:
> Hi,
>
> Does anyone know of a Forth implementation that:
>
> =A0- is written almost entirely in forth, save for the absolutely
> =A0 =A0smallest possible number of primitives
> =A0- has its handful of primitives written in highly portable C:
> =A0 =A0 - can compile for 32-bit or 64-bit, little or big-endian
> =A0- is ANS compliant
> =A0- has a good C API, easy to add a small number of extra C
> =A0 =A0primitives
>
> I've been working with FICL - it has around 12k lines of C - I'd be
> curious to work with a Forth with only a few hundred (or even a few
> dozen) lines of C.
>

It's kindof a Forth dialect but 4IM (http://astrobe.byethost31.com) is
<1KLOC for its core VM (written in C). It has about 50 C primitives.
The whole C source is about 5KLOC. I think it will slim down in the
future. It has (IMHO :) a good C API; I've already written a wrapper
for a GUI lib, sockets, serial comm both for Linux ans Windows, plus
other ones for proprietary libraries. And I'm currently writting a
wrapper for the Irrlicht 3D engine.

 Amicalement,
  Astrobe

Vote Up!	0	Vote Down!
fdubois76 (38) 7/2/2008
On Jun 28, 5:23=A0am, DavidM <nos...@nowhere.com> wrote:
>
> =A0- is written almost entirely in forth, save for the absolutely
> =A0 =A0smallest possible number of primitives
> =A0- has its handful of primitives written in highly portable C:
> =A0 =A0 - can compile for 32-bit or 64-bit, little or big-endian
> =A0- is ANS compliant
> =A0- has a good C API, easy to add a small number of extra C
> =A0 =A0primitives
>
There's Fminus on Sourceforge. It's a Forth to C (or asm) cross
compiler that generates a VM that executes bytecodes. CODE words
consist of C text. The resulting VM is one file containing a bytecode
ROM and a switch statement of CODE primitives. If you're trying to put
a minimal-footprint Forth on an embedded target, it may be useful.

Brad
Vote Up!	0	Vote Down!
nospaambrad1 (568) 7/2/2008
<spam@controlq.com> wrote in message
news:alpine.BSF.1.10.0806281807440.45930@saddam.controlq.com...
> On Sat, 29 Jun 2008, DavidM wrote:
> > Does anyone know of a Forth implementation that:
> >
> > - is written almost entirely in forth, save for the absolutely
> >   smallest possible number of primitives
> > - has its handful of primitives written in highly portable C:
> >    - can compile for 32-bit or 64-bit, little or big-endian
> > - is ANS compliant
> > - has a good C API, easy to add a small number of extra C
> >   primitives
> >
> > I've been working with FICL - it has around 12k lines of C - I'd be
> > curious to work with a Forth with only a few hundred (or even a few
> > dozen) lines of C.
> >
>
> Having implemented a couple of Forth's in C, it begs the question, just
> what is the minimal wordset with which you can bootstrap a Forth
> implementation?

Sorry for the delay, gone for a few...  Anyway, I've been collecting info on
that.  I'll post the relevant info below my sig.  The counts should be taken
as "being 95-99% close" not as "100% exact".  (IIRC, I posted some of this
previously)  First, the FORTH primitives info I have is listed.  (I'm
missing info on C. Moore's machine FORTH and I haven't counted the complete
ANS wordset...).  Second, there are some other languages, API's, etc., to
provide a rough comparison.  Third, I've listed the primitives used by a few
smaller FORTHs, LISPs, BF, etc.

> Is there any literature on this?

No, not that I'm aware of.  The info I've provided below is the most
complete I've ever seen.  I became interested in the smallest set of
functionality needed to implement C, but I found much more on FORTH
"primitives" at first.

HTH,

Rod Pemberton
PS.  I have not kept track of the FORTH's below.  But, if you need me to try
to relocate it, just say so.

---
FORTH Primitives Comparison (use a fixed width font)
---
3     primitives - Frank Sargent's "3 Instruction Forth"
9     primitives - Mark Hayes theoretical minimal Forth bootstrap
9,11  primitives - Mikael Patel's Minimal Forth Machine (9 minimum, 11 full)
13    primitives - theoretical minimum for a complete FORTH (Brad Rodriguez)
16,29 primitives - C. Moore's word set for the F21 CPU (16 minimum, 29 full)
20    primitives - Philip Koopman's "dynamic instruction frequencies"
23    primitives - Mark Hayes MRForth
25    primitives - C. Moore's instruction set for MuP21 CPU
36    primitives - Dr. C.H. Ting's eForth, a highly portable forth
46    primitives - GNU's GFORTH for 8086
58-255 functions - FORTH-83 Standard (255 defined, 132 required, 58 nucleus)
60-63 primitives - considered the essence of FORTH by C. Moore (unknown)
72    primitives - Brad Rodriguez's 6809 CamelForth
74-236 functions - FORTH-79 Standard (236 defined, 147 required, 74 nucleus)
94-229 functions - fig-FORTH Std. (229 defined, 117 required, 94 level zero)
133-?  functions - ANS-FORTH Standard (? defined, 133 required, 133 core)
200    functions - FORTH 1970, the original Forth by C. Moore
240    functions - MVP-FORTH (FORTH-79)
~1000  functions - F83 FORTH
~2500  functions - F-PC FORTH

FIXME   27 ?     - C. Moore's MachineForth

For comparison:
---
8       commands - BrainFuck (small,Turing complete language)
8     primitives - Stutter LISP
8     primitives - LISP generic
11     functions - OS functions Ritchie & Thompson PDP-7 and/or PDP-11 Unix
14    primitives - LISP McCarthy based
18     functions - OS functions required by P.J. Plauger's Standard C
Library
19     functions - OS functions required by Redhat's newlib C library
28       opcodes - LLVA - Low Level Virtual instruction set Architecture
51-56  functions - CP/M 1.3 (36-41 BDOS, 15 BIOS)
56     functions - CP/M 2.2 (39 BDOS, 17 BIOS)
40      syscalls - Linux v0.01 (67 total, 13 unused, 14 minimal, 40
complete)
71       opcodes - LLVM - Low Level Virtual Machine instructions
92+    functions - MP/M 2.1 (92 BDOS, ? BIOS)
102    functions - CP/M 3.0 (69 BDOS, 33 BIOS)
~120   functions - OpenWATCOM v1.3, calls - DOS, BIOS, DPMI for PM DOS apps.
150     syscalls - GNU HURD kernel
170    functions - DJGPP v2.03, calls - DOS, BIOS, DPMI for PM DOS apps.
206    bytecodes - Java Virtual Machine bytecodes
290     syscalls - Linux Kernel 2.6.17 (POSIX.1)

eForth primitives (9 optional)
----
doLIT doLIST BYE EXECUTE EXIT next ?branch branch ! @ C! C@ RP@ RP! R> R@ >R
SP@ SP! DROP DUP SWAP  OVER 0< AND OR XOR UM+ TX!
?RX !IO $CODE $COLON $USER D$ $NEXT COLD IO?

9 MRForth bootstrap theoretical
----
@ ! + AND XOR (URSHIFT) (LITERAL) (ABORT) EXECUTE

9 Minimal Forth (3 optional)
----
>r r> 1+ 0= nand @ dup! execute exit
drop dup swap

23 MRForth primitives
----
C@ C! @ ! DROP DUP SWAP OVER $>$R R$>$ + AND OR XOR (URSHIFT) 0$<$ 0=
(LITERAL) EXIT (ABORT) (EMIT) (KEY)

20 Koopman high execution, Dynamic Freq.
----
CALL EXIT EXECUTE VARIABLE USER LIT CONSTANT 0BRANCH BRANCH I @ C@ R> >R
SWAP DUP ROT + = AND

46 Gforth
----
:DOCOL :DOCON :DODEFER :DOVAR :DODOES ;S BYE EXECUTE BRANCH ?BRANCH LIT @ !
C@ C! SP@ SP! R> R@ >R RP@ RP! + - OR XOR AND 2/ (EMIT) EMIT? (KEY) (KEY?)
DUP 2DUP DROP 2DROP SWAP OVER ROT -ROT UM* UM/MOD LSHIFT RSHIFT 0= =

36 eForth
-------
BYE ?RX TX! !IO doLIT doLIST EXIT EXECUTE next ?branch branch ! @ C! C@ RP@
RP! R> R@ >R SP@ SP! DROP DUP SWAP OVER 0< AND OR XOR UM+ $NEXT D$ $USER
$COLON $CODE

BrainFuck
-------
> < + - . , [ ]

Stutter LISP
----
car cdr cons if set equal lambda quote

generic LISP
----
atom car cdr cond cons eq lambda quote

LISP, McCarthy based
----
and atom car cdr cond cons eq eval lambda nil quote or set t

Vote Up!	0	Vote Down!
do_not_have1182 (187) 7/2/2008
Wow, what a goldmine - thanks heaps for that! :)

Dave

On Wed, 02 Jul 2008 17:10:25 -0400, Rod Pemberton wrote:

> <spam@controlq.com> wrote in message
> news:alpine.BSF.1.10.0806281807440.45930@saddam.controlq.com...
>> On Sat, 29 Jun 2008, DavidM wrote:
>> > Does anyone know of a Forth implementation that:
>> >
>> > - is written almost entirely in forth, save for the absolutely
>> >   smallest possible number of primitives
>> > - has its handful of primitives written in highly portable C:
>> >    - can compile for 32-bit or 64-bit, little or big-endian
>> > - is ANS compliant
>> > - has a good C API, easy to add a small number of extra C
>> >   primitives
>> >
>> > I've been working with FICL - it has around 12k lines of C - I'd be
>> > curious to work with a Forth with only a few hundred (or even a few
>> > dozen) lines of C.
>> >
>> >
>> Having implemented a couple of Forth's in C, it begs the question, just
>> what is the minimal wordset with which you can bootstrap a Forth
>> implementation?
> 
> Sorry for the delay, gone for a few...  Anyway, I've been collecting
> info on that.  I'll post the relevant info below my sig.  The counts
> should be taken as "being 95-99% close" not as "100% exact".  (IIRC, I
> posted some of this previously)  First, the FORTH primitives info I have
> is listed.  (I'm missing info on C. Moore's machine FORTH and I haven't
> counted the complete ANS wordset...).  Second, there are some other
> languages, API's, etc., to provide a rough comparison.  Third, I've
> listed the primitives used by a few smaller FORTHs, LISPs, BF, etc.
> 
>> Is there any literature on this?
> 
> No, not that I'm aware of.  The info I've provided below is the most
> complete I've ever seen.  I became interested in the smallest set of
> functionality needed to implement C, but I found much more on FORTH
> "primitives" at first.
> 
> HTH,
> 
> Rod Pemberton
> PS.  I have not kept track of the FORTH's below.  But, if you need me to
> try to relocate it, just say so.
> 
> ---
> FORTH Primitives Comparison (use a fixed width font) ---
> 3     primitives - Frank Sargent's "3 Instruction Forth" 9    
> primitives - Mark Hayes theoretical minimal Forth bootstrap 9,11 
> primitives - Mikael Patel's Minimal Forth Machine (9 minimum, 11 full)
> 13    primitives - theoretical minimum for a complete FORTH (Brad
> Rodriguez) 16,29 primitives - C. Moore's word set for the F21 CPU (16
> minimum, 29 full) 20    primitives - Philip Koopman's "dynamic
> instruction frequencies" 23    primitives - Mark Hayes MRForth 25   
> primitives - C. Moore's instruction set for MuP21 CPU 36    primitives -
> Dr. C.H. Ting's eForth, a highly portable forth 46    primitives - GNU's
> GFORTH for 8086 58-255 functions - FORTH-83 Standard (255 defined, 132
> required, 58 nucleus) 60-63 primitives - considered the essence of FORTH
> by C. Moore (unknown) 72    primitives - Brad Rodriguez's 6809
> CamelForth 74-236 functions - FORTH-79 Standard (236 defined, 147
> required, 74 nucleus) 94-229 functions - fig-FORTH Std. (229 defined,
> 117 required, 94 level zero) 133-?  functions - ANS-FORTH Standard (?
> defined, 133 required, 133 core) 200    functions - FORTH 1970, the
> original Forth by C. Moore 240    functions - MVP-FORTH (FORTH-79) ~1000
>  functions - F83 FORTH
> ~2500  functions - F-PC FORTH
> 
> FIXME   27 ?     - C. Moore's MachineForth
> 
> For comparison:
> ---
> 8       commands - BrainFuck (small,Turing complete language) 8    
> primitives - Stutter LISP
> 8     primitives - LISP generic
> 11     functions - OS functions Ritchie & Thompson PDP-7 and/or PDP-11
> Unix 14    primitives - LISP McCarthy based 18     functions - OS
> functions required by P.J. Plauger's Standard C Library
> 19     functions - OS functions required by Redhat's newlib C library 28
>       opcodes - LLVA - Low Level Virtual instruction set Architecture
> 51-56  functions - CP/M 1.3 (36-41 BDOS, 15 BIOS) 56     functions -
> CP/M 2.2 (39 BDOS, 17 BIOS) 40      syscalls - Linux v0.01 (67 total, 13
> unused, 14 minimal, 40 complete)
> 71       opcodes - LLVM - Low Level Virtual Machine instructions 92+   
> functions - MP/M 2.1 (92 BDOS, ? BIOS) 102    functions - CP/M 3.0 (69
> BDOS, 33 BIOS) ~120   functions - OpenWATCOM v1.3, calls - DOS, BIOS,
> DPMI for PM DOS apps. 150     syscalls - GNU HURD kernel
> 170    functions - DJGPP v2.03, calls - DOS, BIOS, DPMI for PM DOS apps.
> 206    bytecodes - Java Virtual Machine bytecodes 290     syscalls -
> Linux Kernel 2.6.17 (POSIX.1)
> 
> eForth primitives (9 optional)
> ----
> doLIT doLIST BYE EXECUTE EXIT next ?branch branch ! @ C! C@ RP@ RP! R>
> R@ >R SP@ SP! DROP DUP SWAP  OVER 0< AND OR XOR UM+ TX! ?RX !IO $CODE
> $COLON $USER D$ $NEXT COLD IO?
> 
> 9 MRForth bootstrap theoretical
> ----
> @ ! + AND XOR (URSHIFT) (LITERAL) (ABORT) EXECUTE
> 
> 9 Minimal Forth (3 optional)
> ----
>>r r> 1+ 0= nand @ dup! execute exit
> drop dup swap
> 
> 23 MRForth primitives
> ----
> C@ C! @ ! DROP DUP SWAP OVER $>$R R$>$ + AND OR XOR (URSHIFT) 0$<$ 0=
> (LITERAL) EXIT (ABORT) (EMIT) (KEY)
> 
> 20 Koopman high execution, Dynamic Freq. ----
> CALL EXIT EXECUTE VARIABLE USER LIT CONSTANT 0BRANCH BRANCH I @ C@ R> >R
> SWAP DUP ROT + = AND
> 
> 46 Gforth
> ----
> :DOCOL :DOCON :DODEFER :DOVAR :DODOES ;S BYE EXECUTE BRANCH ?BRANCH LIT
> @ ! C@ C! SP@ SP! R> R@ >R RP@ RP! + - OR XOR AND 2/ (EMIT) EMIT? (KEY)
> (KEY?) DUP 2DUP DROP 2DROP SWAP OVER ROT -ROT UM* UM/MOD LSHIFT RSHIFT
> 0= =
> 
> 36 eForth
> -------
> BYE ?RX TX! !IO doLIT doLIST EXIT EXECUTE next ?branch branch ! @ C! C@
> RP@ RP! R> R@ >R SP@ SP! DROP DUP SWAP OVER 0< AND OR XOR UM+ $NEXT D$
> $USER $COLON $CODE
> 
> BrainFuck
> -------
>> < + - . , [ ]
> 
> Stutter LISP
> ----
> car cdr cons if set equal lambda quote
> 
> generic LISP
> ----
> atom car cdr cond cons eq lambda quote
> 
> LISP, McCarthy based
> ----
> and atom car cdr cond cons eq eval lambda nil quote or set t

Vote Up!	0	Vote Down!
nospam (2804) 7/2/2008
Rod Pemberton wrote:
....
> Sorry for the delay, gone for a few...  Anyway, I've been collecting info on
> that.  I'll post the relevant info below my sig.  The counts should be taken
> as "being 95-99% close" not as "100% exact".  (IIRC, I posted some of this
> previously)  First, the FORTH primitives info I have is listed.  (I'm
> missing info on C. Moore's machine FORTH and I haven't counted the complete
> ANS wordset...).  Second, there are some other languages, API's, etc., to
> provide a rough comparison.  Third, I've listed the primitives used by a few
> smaller FORTHs, LISPs, BF, etc.
....
> ---
> FORTH Primitives Comparison (use a fixed width font)
> ---
> 3     primitives - Frank Sargent's "3 Instruction Forth"
> 9     primitives - Mark Hayes theoretical minimal Forth bootstrap
> 9,11  primitives - Mikael Patel's Minimal Forth Machine (9 minimum, 11 full)
> 13    primitives - theoretical minimum for a complete FORTH (Brad Rodriguez)
> 16,29 primitives - C. Moore's word set for the F21 CPU (16 minimum, 29 full)
> 20    primitives - Philip Koopman's "dynamic instruction frequencies"
> 23    primitives - Mark Hayes MRForth
> 25    primitives - C. Moore's instruction set for MuP21 CPU
> 36    primitives - Dr. C.H. Ting's eForth, a highly portable forth
> 46    primitives - GNU's GFORTH for 8086
> 58-255 functions - FORTH-83 Standard (255 defined, 132 required, 58 nucleus)
> 60-63 primitives - considered the essence of FORTH by C. Moore (unknown)
> 72    primitives - Brad Rodriguez's 6809 CamelForth
> 74-236 functions - FORTH-79 Standard (236 defined, 147 required, 74 nucleus)
> 94-229 functions - fig-FORTH Std. (229 defined, 117 required, 94 level zero)
> 133-?  functions - ANS-FORTH Standard (? defined, 133 required, 133 core)
> 200    functions - FORTH 1970, the original Forth by C. Moore
> 240    functions - MVP-FORTH (FORTH-79)
> ~1000  functions - F83 FORTH
> ~2500  functions - F-PC FORTH
> 
> FIXME   27 ?     - C. Moore's MachineForth

Bear in mind that the fact that a word is designated as "nucleus" or 
"core" in the various standards has nothing to do with whether it's a 
"primitive" in the sense of a word that's defined in assembler, C, or 
another language and necessary to implement enough of the Forth VM to 
function.

Like MPE, FORTH, Inc. writes its systems entirely in Forth and Forth 
assembler, using a cross-compiler to bootstrap a new platform.  There 
are relatively few assembler "primitives" in our system, but we base the 
decision as to which should be coded in assembler only partly on 
necessity, and mostly on performance issues.  And even that is 
influenced by the fact that we're compiling to machine code with an 
optimizer.

We confine these words (plus other platform-specific issues such as 
configuration, startup, etc.) to specific files, so the chore of porting 
to a new platform just requires recoding those files and the rest of the 
files that make up the system are unchanged.

Cheers,
Elizabeth

-- 
==================================================
Elizabeth D. Rather   (US & Canada)   800-55-FORTH
FORTH Inc.                         +1 310.999.6784
5959 West Century Blvd. Suite 700
Los Angeles, CA 90045
http://www.forth.com

"Forth-based products and Services for real-time
applications since 1973."
==================================================
Vote Up!	0	Vote Down!
erather (2081) 7/2/2008
"Elizabeth D Rather" <erather@forth.com> wrote in message
news:a5ednTzymc1bnPHVnZ2dnUVZ_qrinZ2d@supernews.com...
> Rod Pemberton wrote:
> ...
> > Sorry for the delay, gone for a few...  Anyway, I've been collecting
info on
> > that.  I'll post the relevant info below my sig.  The counts should be
taken
> > as "being 95-99% close" not as "100% exact".  (IIRC, I posted some of
this
> > previously)  First, the FORTH primitives info I have is listed.  (I'm
> > missing info on C. Moore's machine FORTH and I haven't counted the
complete
> > ANS wordset...).  Second, there are some other languages, API's, etc.,
to
> > provide a rough comparison.  Third, I've listed the primitives used by a
few
> > smaller FORTHs, LISPs, BF, etc.
> ...
> > ---
> > FORTH Primitives Comparison (use a fixed width font)
> > ---
> > 3     primitives - Frank Sargent's "3 Instruction Forth"
> > 9     primitives - Mark Hayes theoretical minimal Forth bootstrap
> > 9,11  primitives - Mikael Patel's Minimal Forth Machine (9 minimum, 11
full)
> > 13    primitives - theoretical minimum for a complete FORTH (Brad
Rodriguez)
> > 16,29 primitives - C. Moore's word set for the F21 CPU (16 minimum, 29
full)
> > 20    primitives - Philip Koopman's "dynamic instruction frequencies"
> > 23    primitives - Mark Hayes MRForth
> > 25    primitives - C. Moore's instruction set for MuP21 CPU
> > 36    primitives - Dr. C.H. Ting's eForth, a highly portable forth
> > 46    primitives - GNU's GFORTH for 8086
> > 58-255 functions - FORTH-83 Standard (255 defined, 132 required, 58
nucleus)
> > 60-63 primitives - considered the essence of FORTH by C. Moore (unknown)
> > 72    primitives - Brad Rodriguez's 6809 CamelForth
> > 74-236 functions - FORTH-79 Standard (236 defined, 147 required, 74
nucleus)
> > 94-229 functions - fig-FORTH Std. (229 defined, 117 required, 94 level
zero)
> > 133-?  functions - ANS-FORTH Standard (? defined, 133 required, 133
core)
> > 200    functions - FORTH 1970, the original Forth by C. Moore
> > 240    functions - MVP-FORTH (FORTH-79)
> > ~1000  functions - F83 FORTH
> > ~2500  functions - F-PC FORTH
> >
> > FIXME   27 ?     - C. Moore's MachineForth
>
> Bear in mind that the fact that a word is designated as "nucleus" or
> "core" in the various standards has nothing to do with whether it's a
> "primitive" in the sense of a word that's defined in assembler, C, or
> another language and necessary to implement enough of the Forth VM to
> function.
>

Yes, thanks for the reminder.  But, I believe the ones with "core" and
"nucleus" do say "functions" instead of "primitives"...  While that's
probably not FORTH proper terminology, I didn't proclaim them to be
"primitives".


Rod Pemberton

Vote Up!	0	Vote Down!
do_not_have1182 (187) 7/3/2008
Rod Pemberton wrote:
> 3     primitives - Frank Sargent's "3 Instruction Forth"

That is a Forth only in the most abstract sense possible.

But I do have one to add to your list that I've mentioned before in the 
past.  The 1992 Obfuscated C Code Contest offered "buzzard.2" which 
bootstraps a small near-Forth language from 16 primitives (13 visible, 3 
internal) implemented in  about 700 characters of C code.  This 
implements a virtual machine which then bootstraps into the near-Forth 
from source that, except for the first few lines, is Forth.  It's 
interesting to see how some of the lowest-level primitives are built-up.

Removing the obfuscation also removes the joy and fun of the contest, 
but leaves a small virtual machine that can be loaded on embedded 
systems very easily and provide a good Forth-like environment for 
interactively bringing hardware up.  I wouldn't use it for anything 
serious because like most of these reduced-primitive Forths, it's pretty 
slow.  But it gets the job done.

You can find the code here:

     http://www.ioccc.org/years.html#1992

Vote Up!	0	Vote Down!
nntp4274 (973) 7/3/2008
On Jul 2, 2:10 pm, "Rod Pemberton" <do_not_h...@nohavenot.cmm> wrote:
> (I'm missing info on C. Moore's machine FORTH

A complete history with details of the evolution of machine Forth
dialects through Sh-Boom, P20, P21, P8, P32, I21, f21, and c18 can
be found at or linked from
http://www.ultratechnology.com
latest on c18 at http://www.IntellaSys.net

Sh-Boom had eight-bit opcodes and P20 on used five-bit opcodes.  P20
had skip opcodes which were placed by 10-bit paged branches in P21
which had 25 opcodes. F21 changed 2/ to change bit-19 and added
more branching modes, addressing opcodes and coprocessors expanding
the instruction set to 28 including !p+.  C18 added the B register
opcodes, added 2/ to the +* opcode, and added ;: coroutine.

Different opcode names were used in different software.  Chuck's
original P21 machineForth used more one character names than are
in common use today.  I always found writing down and grouping
the opcodes to be a useful exercise.
~ means not present in an instruction set.

orig p21 F21 C18 c18-colorforth

\ stack
.. nop nop . .
t dup dup dup dup
t! drop drop drop drop
s over over over over

\ math-logic
nd and and and and
or or xor xor or \ all exclusive
- com com not -
2/ 2/ 2/ 2/ 2/ \ top two bits don't change on P21
2* 2* 2* 2* 2*
+ + + + +
* +* +* +* +* \ C18 includes 2/

\ addressing
a a a@ a@ a
a! a! a! a! a!
! ! !a !a !
!+ !+ !a+ !a+ !+
@ @ @a @a @
@+ @+ @a+ @a+ @+

n lit # @p+ @p+
~ ~ !p+ !p+ !p+

~ ~ @r+ ~ ~
~ ~ !r+ ~ ~

~ ~ ~ b! b!
~ ~ ~ @b @b
~ ~ ~ !b !b

\ return-stack
r @r r> pop pop
!r !r >r push push

\ branch
T0 T0 if if if  \ until while
C0 CO -if -if -if \ -until -while
: call call call call
jump jump jump jump jump \ else
; ; ; ; ;
~ ~ ~ ;: ;:
~ ~ ~ next next
~ ~ ~ unext unext

I still sometimes use the original machineForth dialect
for brevity, or a version where most Forth words are
one character.

Older Forth hardware design is covered in Koopman's online
book on Stack Machines.

Best Wishes
Vote Up!	0	Vote Down!
fox21 (1833) 7/4/2008
hi

Very comprehensive. MID4th is upto 70 primitives, but if files is
removed then this reduces somewhat. I do intend to reduce this number
of the comming weeks, as the aim is to make it portable to custom
hardware as easily as possible. I will place boot options to control
which sections of the dictionary are compiled in.

I think @1+ 1-! AND + XOR as register to register one and two argument
functions to be defined in C is about the simplest virtual machine.
Even though - is kind of more primitive than +, + can be used to do
LSHIFT. a+a=a<<1 but a-a=0

U/MOD and U* can be made faster as an example by direct coding, but
both can be built from U*/ (as I call it) which can be found described
on http://indi.hpsdr.com/system32.html and I am sure there are other
refactorings possible.

I hope to get MID4th down to 64 primitives with a full feature set.
It uses the fact that 2 buffers exsist in high memory to indicate
primitives, but this does prevent execution of xts from these buffers.
It does make 16 bit truncation of the dictionary for storage much
easier though when a 64K address space is used.


cheers
Vote Up!	0	Vote Down!
jackokring (1001) 7/9/2008
Reply:

Enter Your Response
 Post Reply  Insert Signature
TeamSupport Ad - Click For More!
Pearson Education - Click For More

 Similar Artilces: 

forth in forth
I came across this in the archives: >The widely shared belief (among both Forthies >and outsiders) that every "real" Forth programmer hacks together >his own compiler/interpreter/programming environment also makes >the Forth community look frivolous or at best naive. Most people >who program for a living know that there are more useful ways to >spend their time than building their own programming environment -- >the key to productivity is leveraging off other peoples' work. HERESY in the Forth community! Imagine... NOT coming up with your own CASE statement or local variable implemetation? Use OTHER PEOPLES TOOLS? Yuccch! One thing you can count on in the Forth community... try to establish a standard ANYTHING, and all that will happen is others will come up with their own implementation, defeating the purpose of standardization. Why is this? I mean, I'm usually quite happy to program in other languages without building my own interpreter or compiler. For instance with Ruby, the only time I even considered it's implementation was when I was learning how it's class structure was organised, and that was only because some of my references talked about the internals. Now with Forth, it seems like every step along the way makes me think about writing my own implementation! A couple of months back I designed (in outline) a prototype based OOPS for forth, and before I could finish it I was planning how to write a ...

Forth is to program , Forth is NOT to study ..
Forth is to program , not to learn , nor study . Study is for students , Students dont eat well . They seek help and subsidy , and credencials .. all , far from productive programming . There is NO arguement , NO arguement in Forth , cause it is always done LEAST WORK , FASTEST runtime . In 40 years , Humans have built up school systems , universities, industries and factories Since it is a "system" , its uncompetitive . Competition and profits are impossible from any system . Accountants can see the "books" indicate this is the last of those 40 years of educational systems . For the lack of profits . Productivity/Profits comes ONLY from individuals , working alone ( competition) . They create their own "tools" . They NEVER write manuals cause every tool is the simplest it can be , Needs no explanation . Forth Dictionary is not for teaching Forth , its for organizing WORDS . Its for taking work and details away from the programmer . Forth is to program , not to learn , nor study . Study is for students , Students dont eat well . They seek help and subsidy , and credencials .. This is not programming. There is NO arguement in Forth , cause it is always done LEAST WORK , FASTEST , no BLOAT . -------- In 40 years , Humans have built up school systems , universities, industries and factories Since it is a "system" , its uncom...

applications in forth or forth libraries
is there a archive of applications built in forth? something like cpan for perl? etc.? On Dec 2, 3:46=A0pm, gavino <gavcom...@gmail.com> wrote: > is there a archive of applications built in forth? > > something like cpan for perl? etc.? Well, you'll find some things. Take a look at forthfreak.net to get the pointers. The main problem is that even "ANS compatible" Forths are not compatible at all if you add the mindset of the programmer to the standard. There are some classes of problems that are better solved by non-ANS extensions than with ANS. And almost every problem of some complexity involves such problems. So programmers that are used to one specific Forth system learn a domain specific way how to deal with such problems and sometimes they are (me too, indeed) surprised that a specific feature "is not ANS"... Perl has not that problem. You've one dominating implementation. Regards, -Helmar gavino wrote: > is there a archive of applications built in forth? > > something like cpan for perl? etc.? I think the vast majority of them are proprietary in nature, and hence not published. Cheers, Elizabeth -- ================================================== Elizabeth D. Rather (US & Canada) 800-55-FORTH FORTH Inc. +1 310.999.6784 5959 West Century Blvd. Suite 700 Los Angeles, CA 90045 http://www.forth.com "Forth-based products and Services for real-time applications since 1973.&...

no forth pc? no forth replacement for mysqL? a la www.prevayler.org? no forth appserver?
how about a forth clone of iceWM in 1% the code? On Wednesday, February 12, 2014 8:36:49 PM UTC-6, the_gavino_himself wrote: > how about a forth clone of iceWM in 1% the code? Right now, what I'm interested in is niche RPGMaker-type games on Android. I've done some of this work already in Java, including creating a map editor (on Android) and a playable demo, using First Seed Material (http://www.tekepon.net/fsm/index.php) assets I gave up on my last alternatives to Java when I found Terminal IDE, which allowed me to move code all the way from Java source to installable .apks on the device itself. But now there is a Forth system on Android! https://play.google.com/store/apps/details?id=gnu.gforth&hl=en I don't know if it'll have on-device turnkey facilities soon or ever, or how deployment will otherwise work. I've some familiarity with Java API, the Android way of XML-specified interfaces and the like (fortunately, games mostly ignore that part of Android), but JNI and friends is still a mystery to me. But you can get the satisfaction of being able to touch an icon and have your Forth app start up.... by the roundabout method of having an auxiliary app that 1) slides Forth source into starta.fs on the SD card and then 2) launches gforth. It's satisfying anyway. So in the manner of someone laying down track with the expectation that there will be a tunnel through the mountain by the time the mountain is reache...

Forth
Anyone know of a version of Forth for RISC OS? I used to use Forthmacs by Hanno Schwalm a few years ago, but I've been out of the Acorn scene since 2000, recently returned with an Iyonix. Hanno's site seems to be down and no reply from his old e-mail address. Anton -- Hi, By the process of poking various fingers onto keys Anton generated this: > Anyone know of a version of Forth for RISC OS? > > I used to use Forthmacs by Hanno Schwalm a few years ago, but I've been out > of the Acorn scene since 2000, recently returned with an Iyonix. Hanno's > site see...

FORTH
Has anyone got an implementation working on a TREO 600? Ian implementation of what On Fri, 23 Apr 2004 18:44:49 +0000 (UTC), "Ian Jones" <bellevueparkw@btinternet.com> wrote: |Has anyone got an implementation working on a TREO 600? | |Ian | Alien at Large wrote: > On Fri, 23 Apr 2004 18:44:49 +0000 (UTC), "Ian Jones" > <bellevueparkw@btinternet.com> wrote: > > |Has anyone got an implementation working on a TREO 600? > | > |Ian > > implementation of what What he said in the subject line. (Hint: it&#...

3 books on eBay: Starting FORTH; Thinking FORTH; FORTH Programmer's Handbook
Forth Programmer's Handbook by Conklin and Rather Search for eBay Item # 4129534182 Excellent (like new) condition, second EDITION (August 1998), sixth PRINTING (August 2000). Thinking Forth by Leo Brodie (1984) Search for eBay Item # 4129545378 Excellent (like new) condition, this is the 1994 reprint from Fig Leaf Press (Forth Interest Group, Inc). Starting Forth by Leo Brodie (1987) Search for eBay Item # 4129553634 Second edition, in very good condition. Shows slight wear, but very clean. The softcover binding is in excellent shape. ...

Id love to surf web with 4megs ram forth pc using forth and forth chips
when will this happen? cant wait!! On 9/27/2013 11:52 AM, the_gavino_himself wrote: > when will this happen? > > cant wait!! > I'll happen when someone comes up with several $M in funding. Cheers, Elizabeth -- ================================================== Elizabeth D. Rather (US & Canada) 800-55-FORTH FORTH Inc. +1 310.999.6784 5959 West Century Blvd. Suite 700 Los Angeles, CA 90045 http://www.forth.com "Forth-based products and Services for real-time applications since 1973." ================================================== Elizabeth D Rather wrote: > On 9/27/2013 11:52 AM, the_gavino_himself wrote: >> when will this happen? >> >> cant wait!! >> > > I'll happen when someone comes up with several $M in funding. With 4 megs of RAM? I wouldn't do that even if I had large funding. This is not enough memory to display a single cat image, so it's not worth considering. -- Bernd Paysan "If you want it done right, you have to do it yourself" http://bernd-paysan.de/ On Tuesday, October 1, 2013 11:01:15 PM UTC+1, Bernd Paysan wrote: > With 4 megs of RAM? I wouldn't do that even if I had large funding. Thi= s=20 > is not enough memory to display a single cat image, so it's not worth=20 > considering. This is true. Cat images are big. Especially images of lions - because they= ar...

Seeking 'Victor-FORTH' source-code screens from the disks that go with T. Huang's "And So FORTH" revised edition book
I recently discovered Timothy Huang's book "And So FORTH", Revised Edition = 1983. From the description in Appendix D, there are a couple disks that go= with the book and contain much educational material (learning examples) of= source-code screens written in 'Victor-FORTH' (for the Victor 9000 machine= ), along with other programs. I realize that over 30 years has passed, but= from a 'learning and educational perspective', most of that material is as= valid today as it was back then. As an 'eager learner', I'd be grateful t= o have acces...

3 books on eBay: Starting FORTH; Thinking FORTH; FORTH Programmer's Handbook #2
Forth Programmer's Handbook by Conklin and Rather Search for eBay Item # 4129534182 Excellent (like new) condition, second EDITION (August 1998), sixth PRINTING (August 2000). Thinking Forth by Leo Brodie (1984) Search for eBay Item # 4129545378 Excellent (like new) condition, this is the 1994 reprint from Fig Leaf Press (Forth Interest Group, Inc). Starting Forth by Leo Brodie (1987) Search for eBay Item # 4129553634 Second edition, in very good condition. Shows slight wear, but very clean. The softcover binding is in excellent shape. ...

Forth Application and Technique OR Forth Handbook
hello I buy 1 week ago on amazon U.S. "Forth applications and technical" I would like to know if this book is worth knowing - I do not familiarized with programming language ? and if it is sufficient to have familiarized high in this language ? is that the book "Forth programming" handbook is necessary ? i have not a good level of english and i use a translator thanks On Wednesday, April 10, 2013 7:37:15 AM UTC-7, michael wrote: > hello > > > > I buy 1 week ago on amazon U.S. "Forth applications and technical" > > > > I would like to know if this book is worth knowing > > > > - I do not familiarized with programming language ? > > > > and if it is sufficient to have familiarized high in this language ? > > > > is that the book "Forth programming" handbook is necessary ? > > > > i have not a good level of english and i use a translator > > > > thanks Best book to learn from beginner. Starting Forth Free Online Version http://www.forth.com/starting-forth/ Also get an old paper book copy Jason In comp.lang.forth, michael wrote: > i have not a good level of english and i use a translator If you need some French materials - maybe try Turboforth for DOS? http://forth.free.fr/apprentissage/turbo-forth/page00.htm -- The consensus was, as usual in this co...

JavaScript to Forth translator (shift-forth)
Hi All, I am working on experimental tool to translate JavaScript (subset) into Forth. https://github.com/drom/shift-forth It takes JavaScript program in Single Static Assignment (SSA) form, implements very simple stack scheduling algorithm, using PICK for deep stack access. And runs peephole optimizer on top. I am working to add basic control structures to to it: Call, if, while Any suggestions are welcome. --Alexey ...

Writing ANS Forth in ANS Forth
Hi I'm currently attempting to write an ANS-compliant ITC Forth system for the ARM as a personal learning project. I've implemented my system primitives as code words and am now starting to look at the implementation of the high-level words. I've noticed that a number of systems use non-ANS definitions or user variables such as LATEST in their implementation of high-level words. I'm currently trying to decide how this fits in with a strictly ANS-compliant system. Here are my thoughts so far regarding two possible approaches... 1) Implement non-ANS words and use them in high-level ANS word definitions. Pros - Makes implementation of some words easier(?). Cons - Non-ANS words visible to the user. System always has bespoke extensions whether you want it to or not. High-level definitions not portable. 2) Only implement high-level ANS words in terms of other ANS words. Pros - 'Cleaner' implementation(?). System has no bespoke extensions. Using SEE on high-level words only shows ANS source, so the user only sees standard documented words. Cons - Some words that would have previously been high-level would have to be implemented as code words where no suitable ANS primitives exist. So, should a strictly ANS-compliant Forth only ever be implemented in ANS Forth? (and is that even possible/practical?) I guess that without the visibility provided by WORDS and SEE this really becomes a non-issue with the user being unaware that there are a number of und...

Any Forths out there...
Are there any Forths in the wild that support use of >R and R> with interspersed locals? For instance (pointless example, I know); : x { a b } a >r b r> ; From what I get from the standard, this isn't allowed (although I find the reference to "Immediate words" mystifying); 13.3.3.2 Syntax restrictions Immediate words in a program may use (LOCAL) to implement syntaxes for local declarations with the following restrictions: .... d) After a definition=92s locals have been declared, a program may place data on the return stack. However, if this is done, locals shall not be accessed until those values have been removed from the return stack; Plus, e, g and h seem to explicitly forbid certain actions; e) Words that return execution tokens, such as =92 (tick), [=92], or FIND, shall not be used with local names; g) Locals may be accessed or updated within control structures, including do-loops; h) Local names shall not be referenced by POSTPONE and [COMPILE]. Why are these not "an environmental dependency"? On Sep 6, 7:38=A0am, Alex McDonald <b...@rivadpm.com> wrote: > d) After a definition=92s locals have been declared, a program may place > data on the return stack. However, > if this is done, locals shall not be accessed until those values have > been removed from the return > stack; > g) Locals may be accessed or updated within control structures, > including do-loops; It seems to me if you're going to m...

Tethered Forths (was: The meaning of xt in Forth-94)
On 7/2/2015 3:10 AM, Raimond Dragomir wrote: >> BTW, I would love to see a forth system targeted to ARM chips >> (and/or the MSP430) that keeps the dictionary on the host other >> than the executable portions. But maybe this is not really >> important. Mecrisp seems to support reasonably small targets, just >> not the really small ones. -- >> >> Rick > > This is my plan. I have the 'host' part quite ready now. The only > 'application' that I'm interested in writing with it is > cross-compilers. (although host' can be some bigger embedded systems > like BBB or rPi). > > My dictionary space is separated completely because I want it to be > stored anywhere (internal flash, external spi flash, sd card, or even > serial link (another machine - typically 'host')). The code is > tokenized and it's really compact. It seems that the dictionary is > 2.5 times bigger than the real code! > > My intended target architectures will be: > > - very small: targets with no REPL. No need of dictionary at all What is REPL? > - small: dictionary over the serial link. REPL needs some host > special console or terminal program of course. > > - medium: dictionary on target, target has REPL but only the > interpreter (no compiler). Here there are two cases: - dictionary > merged with code - in interna...

Seeking Vintage Forth
Hello, I am looking for Apple Forth 1.6 (Cap'n Software, circa 1978) and documentation. More importantly I am also looking for Programma Apple Forth 1.2 documentation. But I assume that any Programma 6502 Forth documentation will do. BTW, was there an alternative to "WORDS" with older FORTHs? Thanks for your help. On 27/05/11 15:49, datajerk wrote: > BTW, was there an alternative to "WORDS" with older FORTHs? vlist On 27 mei, 17:32, Jan Coombs <jan_2011...@murray-microft.co.uk> wrote: > On 27/05/11 15:49, datajerk wrote: > > > BTW, was there an alternative to "WORDS" with older FORTHs? > > vlist VLIST in FigForth that used all uppercase ;-) groetjes Coos On May 27, 10:49=A0am, datajerk <dataj...@gmail.com> wrote: > Hello, > > I am looking for Apple Forth 1.6 (Cap'n Software, circa 1978) and > documentation. =A0More importantly I am also looking for Programma Apple > Forth 1.2 documentation. =A0But I assume that any Programma 6502 Forth > documentation will do. > > BTW, was there an alternative to "WORDS" with older FORTHs? > > Thanks for your help. You might want to check in with folks over at comp.sys.apple2 HTH, Tarkin On May 27, 4:49=A0pm, datajerk <dataj...@gmail.com> wrote: > Hello, > > I am looking for Apple Forth 1.6 (Cap'n Software, circa 1978) and > documentation. =A0More importantly I am also looking for Programma Ap...

With Forth
With Forth I can pretend that I am sometimes connected to reality while attempting to write a computer program. Jason ...

Forth is written in Forth and it boots ur PC
Forth is written in Forth Forth must boot Forth ... My stuff is called ForthRite , if no U.C. i'll have to read it as forthrite , certainly a new English verb meaning proper and unarguebale .... !! Same thing , my stuff is proper and unargueable .... Forthrite shell is the first 400 bytes in an ARM 128KB NOR-Flash boot ROM . It I/O's to RS232c serial port , but also on same wires is a 4 by 4 keypad to send breaks to RS232c .. It can create permanent code in its tiny dictionary located in SRAM . If the normal boot process is successful , there s no need to understand any of this , because Forthrite always allows one to program at the highest level . You can learn to use Forthrite by experimenting with [ Expand_Explain ] key . This key works at all levels without any input . If you hit this key , it will use MRU to disassemble that last frag/level . If you hit [ Expand Not ] key it will delete what it normally adds to MRU . You can assemble OpCodes , in Forthrite at any level . You are not forced to assemble code from an assembler . My 1st project is an ARM9 to create a replacement for the IBM PC . I will be able to enter text w/o using a key board and at 300 WPM . I want a voice input pocket PC , ARM7 , it doesnt bog down with IBM voice recognition , because it takes ur keystrokes to "improve" werty wrote: > Forth is written in Forth > > Forth must boot Forth ... > >...

How would you do this in Forth?
Hi all, I'm wondering how you guys would solve the following problem in Forth. You're given a string (just a count and chars in memory, or a pointer to chars plus a count, or a null-terminated string, doesn't matter) and you wish to tokenize it in much the same way that /bin/sh does, splitting it on whitespace boundaries but respecting escaping and quoting. As output, you want to produce a list of strings (again, represented in any way which is most convenient.) It should support the following: - Simple whitespace-separated tokens, with varying amounts of whitespace: foo bar foo bar - Escaping the space to form one token, eg the following parses as two tokens not three: foo\ bar baz - Quoting text to form tokens: "hello world" "how are you" 'hello world' 'how are you' - Escaping the quotes inside a quoted token: "hello\"world" Slava On Nov 24, 3:43 pm, Slava Pestov <sl...@jedit.org> wrote: > Hi all, > > I'm wondering how you guys would solve the following problem in Forth. > You're given a string (just a count and chars in memory, or a pointer > to chars plus a count, or a null-terminated string, doesn't matter) > and you wish to tokenize it in much the same way that /bin/sh does, > splitting it on whitespace boundaries but respecting escaping and > quoting. As output, you want to produce a list of strings (again, > represented in any way which is mo...

Re: Differences between ANS Forth and Forth-79
-------------------------------1162045838 Content-Type: text/plain; charset="US-ASCII" Content-Transfer-Encoding: 7bit In a message dated 10/26/2006 5:50:22 P.M. US Mountain Standard Time, eratherXXX@forth.com writes: The biggest problem you'll encounter is that the difference between Forth as described in either edition of Starting Forth and any contemporary Forth you might want to use is vast. For example, SF assumes that your program source is in 1024-byte "blocks" that must be edited with a special Forth editor. There may be a few systems that st...

Is Forth up to it?
Might be of interest to Forthers with a vision / mission: http://hardware.slashdot.org/article.pl?sid=09/08/11/1242217 -- duke On Aug 11, 6:26=A0am, Duke Normandin <dukeofp...@ml1.net> wrote: > Might be of interest to Forthers with a vision / mission: > > http://hardware.slashdot.org/article.pl?sid=3D09/08/11/1242217 > -- > duke I'm sure somebody will argue that it needs a full-blown OS with swap- space :-) -Mux Mux schrieb: > On Aug 11, 6:26 am, Duke Normandin <dukeofp...@ml1.net> wrote: >> Might be of interest to Forthers with a vision / mission: >> >> http://hardware.slashdot.org/article.pl?sid=09/08/11/1242217 >> -- >> duke > > I'm sure somebody will argue that it needs a full-blown OS with swap- > space :-) > > -Mux I argue that it needs a full-blown OS with swap-space. On Aug 12, 9:44 am, Mux <Yvo.Z...@gmail.com> wrote: > On Aug 11, 6:26 am, Duke Normandin <dukeofp...@ml1.net> wrote: > > > Might be of interest to Forthers with a vision / mission: > > >http://hardware.slashdot.org/article.pl?sid=09/08/11/1242217 > > -- > > duke > > I'm sure somebody will argue that it needs a full-blown OS with swap- > space :-) > > -Mux so a forther would say full blown os is overkill, that forth can solve the problem directly, without all the crust.... awesome! forth I see has its own multitasking abilities....gosh forth seems pow...

About FORTH
Bonjour ? tous. Je recherche les sources d'un forth pour ORIC. Existe-t-il un metacompilateur pour ORIC ? Merci d'avance. Seilebost. PS : Je recommence ? tester l'ULA en vhdl. In article <ad4152cf.0306280212.fae8ce@posting.google.com>, olivier JEAN wrote: > Je recherche les sources d'un forth pour ORIC. > Existe-t-il un metacompilateur pour ORIC ? What's a "metacompiler" ? -- Andr? Majorel <URL:http://www.teaser.fr/~amajorel/> No actual neurons were harmed in the making of this Usenet post. Andre Majorel &...

Forth as Assembly Language (Was Re: FORTH levels)
Guy Macon wrote: > > John Doty wrote: > > >It's pretty clear from the contents of the development kits > >that the dominant language for small widgets must be C. > > Your viewpoint is skewed. Those development kits are for > *medium*- sized low volume widgets. When the quantities > become high (some of my designs have reached quantities of > 100,000 per hour) the usual choices (PIC, 8051, ARM...) cost > too much. At those volumes you are more likely to see > microcontrollers made by by GeneralPlus/SunPlus, Elan/EMC, > WinBond, Sonix, etc, and nearly 100% of the software is > written in highly optimized assembly language with > Forth making some inroads. This is an entire world that is > invisible to you unless you are a designer of talking barbie > dolls, computer mice, or musical greeting cards. > > References: > http://www.embedded.com/story/OEG20010221S0034 > http://www.aes.org/sections/la/archive/2000/2000_docs/soundfortoys200004.doc > > -- > misc.business.product-dev: a Usenet newsgroup > about the Business of Product Development. > -- Guy Macon <http://www.guymacon.com/> > Forth can be used as an assembler. What is keeping Forth from replacing a conventional assembler? Can't a Forth development system do whatever optimization is needed for machine code faster and better than ancient assembly language? By the way John Doty is involved in the des...

Which FORTH?
I haven't used FORTH on an embedded project since circa 1985. I'm wondering if FORTH, Inc.'s SwiftForth is the current BMW/Mercedes of FORTH development environments for embedded apps? As a matter of fact, FORTH, Inc. appears to be the only FORTH dev env provider that's financially viable??? ---John On Thu, 15 Sep 2011 15:03:58 -0700 (PDT), jski <john.chludzinski@gmail.com> wrote: >I haven't used FORTH on an embedded project since circa 1985. > >I'm wondering if FORTH, Inc.'s SwiftForth is the current BMW/Mercedes >of FORTH development environments for embedded apps? As a matter of >fact, FORTH, Inc. appears to be the only FORTH dev env provider that's >financially viable??? In terms of target performance performance and features, the top of the range comes from MPE. http://www.mpeforth.com/xc7.htm But then, we supply Forth systems. Stephen -- Stephen Pelc, stephenXXX@mpeforth.com MicroProcessor Engineering Ltd - More Real, Less Time 133 Hill Lane, Southampton SO15 5AF, England tel: +44 (0)23 8063 1441, fax: +44 (0)23 8033 9691 web: http://www.mpeforth.com - free VFX Forth downloads On 9/15/11 12:03 PM, jski wrote: > I haven't used FORTH on an embedded project since circa 1985. > > I'm wondering if FORTH, Inc.'s SwiftForth is the current BMW/Mercedes > of FORTH development environments for embedded apps? As a matter of > fact, FORTH, Inc. appears to be the only FORTH dev env pro...
