Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 1
NF10.asm



      1				     ; shrinkED	CODE ADDRESS INTERPRETTER
      2
      3				     JMPS    MACRO LBL
      4					       jmp  SHORT LBL
      5					     ENDM
      6
      7				     SKIPA   MACRO
      8					     DB	   03DH
      9					     ENDM
     10
     11				     SKIPB   MACRO
     12					     DB	   03CH
     13					     ENDM
     14
     15				     SKIPr   MACRO reg
     16					     mov   reg,0
     17					     org   $-2
     18					     ENDM
     19
     20				     X	     MACRO
     21				       xchg Rsp,DSP
     22					     ENDM
     23
     24				     TO_R    MACRO  REG
     25				       PUSH   REG
     26					     ENDM
     27
     28				     R_TO    MACRO  REG
     29				       POP    REG
     30					     ENDM
     31
     32				     TO_D    MACRO  REG
     33				       X
     34				       PUSH   REG
     35				       X
     36					     ENDM
     37
     38				     D_TO    MACRO  REG
     39				       X
     40				       POP    REG
     41				       X
     42					     ENDM
     43
     44				     rchg    macro   reg
     45				       xchg  ax,reg
     46					     endm
     47
     48				     CLR    macro   reg
     49				       XOR  reg,reg
     50					     endm
     51
     52				     ALIGN_  MACRO
     53					     IF	($-START) AND 1
     54					     NOP
     55					     ENDIF
     56					     ENDM
     57
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 2
NF10.asm



     58				     P_	 MACRO NAM
     59				       ALIGN_
     60				       NOP
     61				     NAM:
     62				       ORG $-1
     63				       ENDM
     64
     65				     L_	 MACRO NAM
     66				       ALIGN_
     67				     NAM:
     68				       ENDM
     69
     70				     ; REGISTER	usage
     71	      =SI		     ip	 = si  ; SI INSTRUCTION	POINTER
     72	      =AX		     dsp = ax  ; AX DATA STACK POINTER
     73	      =SP		     rsp = sp  ; SP RETURN STACK POINTER
     74	      =CX		     top = cx  ; CX DATA STACK TOP REGISTER
     75	      =CL		     topL= cL  ; CX DATA STACK TOP REGISTER
     76	      =DI		     w	 = di  ; DI WORK REGISTER
     77
     78	      =DX		     ar	 = Dx  ; DX ARITHMETIC ( ADDRESS ) register
     79						      ;	BP  BX	- NOT USED
     80
     81				     ; MINIMAL SET INTERPRETTER	COMMANDS
     82				     ; CONTROL	    COMMANDS  (IF (JUMP	(; (IF-
     83				       ;(IO (-IF (NEXT 0; ?SKIP	?EXEC PUSH;
     84				     ; RETURN STACK COMMANDS  POP PUSH				     ; RDROP
     85				     ; DATA STACK   COMMANDS  DUP J				     ; A! A@ DROP DROP;
     86				     ; DATA TRANSF  COMMANDS  @R+ !R+ XA XR		     ; C@R+ C!R+
     87				     ; MATH	    COMMANDS  +2/ +* -/	NAND
     88
     89	0000			     MyCseg  segment para  use16
     90
     91					     assume cs:	MyCseg,	 ds: MyCseg, ss: MyCseg, es: MyCseg
     92
     93					     org 100h
     94
     95	      =-0100		     @TIB    = -256		     ; -256    TBUF = 256
     96	      =-0200		     @TBUF   = @TIB -256	     ; -512    TIB  = 256  +
     97	      =-0240		     @R_TOP  = @TBUF-64		     ; -512  RSTACK = 768  +
     98	      =-0520		     @S_TOP  = @R_TOP -	((2048 + @R_TOP)/2)
     99	      =-1800		     @VOCTOP = @TBUF * 12	     ; -6144 = 4 BUFFERS * 1024	+ TOTAL
    100
    101	0100			     Start   Label byte
    102
    103				     P_	_ABORT
1   104				       ALIGN_
2   105					     IF	($-START) AND 1
2   106					     NOP
2   107					     ENDIF
1   108	0100  90		       NOP
1   109	0101			     _ABORT:
1   110				       ORG $-1
    111	0100  BC FDC0		       MOV   RSP,@R_TOP
    112	0103  B8 FAE0		       MOV   DSP,@S_TOP
    113	0106  E8 002E		       CALL  @TR0A
    114	0109  E8 008C		       CALL  @RETURN
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 3
NF10.asm



    115
    116				     L_	_INITA
1   117				       ALIGN_
2   118					     IF	($-START) AND 1
2   119					     NOP
2   120					     ENDIF
1   121	010C			     _INITA:
    122	010C  07*(0000)			 DW 7 DUP(0)
    123				     ;@TASKPTR = $-2
    124
    125				      P_ _TARY
1   126				       ALIGN_
2   127					     IF	($-START) AND 1
2   128					     NOP
2   129					     ENDIF
1   130	011A  90		       NOP
1   131	011B			     _TARY:
1   132				       ORG $-1
    133	011A  D1 E1			     SHL     TOP,1
    134				      P_ _5ARY
1   135				       ALIGN_
2   136					     IF	($-START) AND 1
2   137					     NOP
2   138					     ENDIF
1   139	011C  90		       NOP
1   140	011D			     _5ARY:
1   141				       ORG $-1
    142	011C  03 F1			     ADD     IP,TOP
    143				      P_ _LARY
1   144				       ALIGN_
2   145					     IF	($-START) AND 1
2   146					     NOP
2   147					     ENDIF
1   148	011E  90		       NOP
1   149	011F			     _LARY:
1   150				       ORG $-1
    151	011E  D1 E1			     SHL     TOP,1
    152				      P_ _WARY
1   153				       ALIGN_
2   154					     IF	($-START) AND 1
2   155					     NOP
2   156					     ENDIF
1   157	0120  90		       NOP
1   158	0121			     _WARY:
1   159				       ORG $-1
    160	0120  D1 E1			     SHL     TOP,1
    161				      P_ _BARY
1   162				       ALIGN_
2   163					     IF	($-START) AND 1
2   164					     NOP
2   165					     ENDIF
1   166	0122  90		       NOP
1   167	0123			     _BARY:
1   168				       ORG $-1
    169	0122  03 CE			     ADD     TOP,IP
    170					     JMPS    @RETURN
1   171	0124  EB 72			       jmp  SHORT @RETURN
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 4
NF10.asm



    172
    173				      P_ _4PX
1   174				       ALIGN_
2   175					     IF	($-START) AND 1
2   176					     NOP
2   177					     ENDIF
1   178	0126  90		       NOP
1   179	0127			     _4PX:
1   180				       ORG $-1
    181	0126  41			     INC     TOP
    182	0127  41			     INC     TOP
    183				      P_ _2PX
1   184				       ALIGN_
2   185					     IF	($-START) AND 1
2   186					     NOP
2   187					     ENDIF
1   188	0128  90		       NOP
1   189	0129			     _2PX:
1   190				       ORG $-1
    191	0128			     @2PX:
    192	0128  41			     INC     TOP
    193	0129  41			     INC     TOP
    194					     JMPS    @RETURN
1   195	012A  EB 6C			       jmp  SHORT @RETURN
    196
    197				      P_ _1PX
1   198				       ALIGN_
2   199					     IF	($-START) AND 1
2   200					     NOP
2   201					     ENDIF
1   202	012C  90		       NOP
1   203	012D			     _1PX:
1   204				       ORG $-1
    205					     JMPS    @2PX+1
1   206	012C  EB FB			       jmp  SHORT @2PX+1
    207
    208				      P_ _RDROPX
1   209				       ALIGN_
2   210					     IF	($-START) AND 1
2   211					     NOP
2   212					     ENDIF
1   213	012E  90		       NOP
1   214	012F			     _RDROPX:
1   215				       ORG $-1
    216	012E  5F				     POP	     W
    217					     JMPS    @RETURN
1   218	012F  EB 67			       jmp  SHORT @RETURN
    219	0131  73 02		     @DBG_A: JNC	     @MAIN1
    220	0133  C3		     @DEBUG: RET
    221
    222				      P_ _BRK
1   223				       ALIGN_
2   224					     IF	($-START) AND 1
2   225					     NOP
2   226					     ENDIF
1   227	0134  90		       NOP
1   228	0135			     _BRK:
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 5
NF10.asm



1   229				       ORG $-1
    230	0134  CC				     INT	     3
    231	0135			     @MAIN1: JMPS    @TOMAIN
1   232	0135  EB 62			       jmp  SHORT @TOMAIN
    233	0137  F9		     @TR0A:  STC
    234				     P_	_TR0
1   235				       ALIGN_
2   236					     IF	($-START) AND 1
2   237					     NOP
2   238					     ENDIF
1   239	0138  90		       NOP
1   240	0139			     _TR0:
1   241				       ORG $-1
    242						     SKIPR   W
1   243	0138  BF 0000			     mov   W,0
1   244					     org   $-2
    245	0139  8B 3C				     MOV	     W,[IP]
    246	013B			     @TR_SET:
    247	013B  89 3E 0234r			     MOV	     WORD PTR @MAIN,W
    248						     JMPS    @DBG_A
1   249	013F  EB F0			       jmp  SHORT @DBG_A
    250	0141  F9		     @TR1A:  STC
    251				     P_	_TR1
1   252				       ALIGN_
2   253					     IF	($-START) AND 1
2   254					     NOP
2   255					     ENDIF
1   256	0142  90		       NOP
1   257	0143			     _TR1:
1   258				       ORG $-1
    259						     SKIPR   W
1   260	0142  BF 0000			     mov   W,0
1   261					     org   $-2
    262	0143  EB				     DB		     0EBH
    263	0144  21				     DB		     @TO_DBG-@MAIN2
    264						     JMPS    @TR_SET
1   265	0145  EB F4			       jmp  SHORT @TR_SET
    266
    267				     ; IO	    COMMANDS  (IO  vvvvvvvvvv
    268
    269				     L_	_BK
1   270				       ALIGN_
2   271					     IF	($-START) AND 1
2   272	0147  90			     NOP
2   273					     ENDIF
1   274	0148			     _BK:
    275	0148  0167r		       DW    _IO
    276				       CLR   AX
1   277	014A  33 C0		       XOR  AX,AX
    278	014C  CD 16		       INT   16H
    279	014E  0A C0		       OR    AL,AL
    280	0150  74 10		       JZ    @BK?
    281	0152  B4 00		       MOV   AH,0
    282				       JMPS  @BK?
1   283	0154  EB 0C			       jmp  SHORT @BK?
    284
    285				     L_	_BK?
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 6
NF10.asm



1   286				       ALIGN_
2   287					     IF	($-START) AND 1
2   288					     NOP
2   289					     ENDIF
1   290	0156			     _BK?:
    291	0156  0167r		       DW    _IO
    292	0158  B4 01		       MOV   AH,1
    293	015A  CD 16		       INT   16H
    294	015C  B8 0000		       MOV   AX,0
    295	015F  74 01		       JZ    @BK?
    296	0161  48		       DEC   AX
    297	0162			     @BK?:
    298	0162  50		       PUSH  AX
    299				       JMPS  _IORET
1   300	0163  EB 28			       jmp  SHORT _IORET
    301
    302				     P_	_IO			     ; NOT IF => IO OPERATION
1   303				       ALIGN_
2   304					     IF	($-START) AND 1
2   305	0165  90			     NOP
2   306					     ENDIF
1   307	0166  90		       NOP
1   308	0167			     _IO:
1   309				       ORG $-1
    310	0166  1E 06 57 53 52 55	       PUSH  DS	ES DI BX AR BP	; PRESERVE REGISTERS
    311	016C  8B EC		       MOV   BP,SP	     ; MAKE FRAME (PRESERVE SP)
    312				       X				     ; SWITCH TO DATA STACK
1   313	016E  94		       xchg Rsp,DSP
    314	016F  51		       PUSH  TOP
    315				     P_	_ASM
1   316				       ALIGN_
2   317					     IF	($-START) AND 1
2   318					     NOP
2   319					     ENDIF
1   320	0170  90		       NOP
1   321	0171			     _ASM:
1   322				       ORG $-1
    323	0170  FF E6		       JMP   IP		     ; JUMP TO ADDRESS IN IP
    324
    325				     L_	_INT
1   326				       ALIGN_
2   327					     IF	($-START) AND 1
2   328					     NOP
2   329					     ENDIF
1   330	0172			     _INT:
    331	0172  0167r		       DW _IO
    332	0174  58		       POP   AX
    333	0175  A2 017Dr		       MOV   BYTE PTR @INTNUM,AL
    334	0178  58 5B 59 5A	       POP   AX	BX CX DX
    335	017C  CD 21		       INT 21H
    336	      =MYCSEG:017D	     @INTNUM = $-1
    337	017E  52 51 53 50	       PUSH  DX	CX BX AX
    338	0182  9C		       PUSHF
    339				       JMPS  _IORET
1   340	0183  EB 08			       jmp  SHORT _IORET
    341
    342				     L_	_BE
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 7
NF10.asm



1   343				       ALIGN_
2   344					     IF	($-START) AND 1
2   345	0185  90			     NOP
2   346					     ENDIF
1   347	0186			     _BE:
    348	0186  0167r		       DW    _IO
    349	0188  58		       POP   AX
    350	0189  B4 0E		       MOV   AH,0EH
    351	018B  CD 10		       INT   10H
    352	018D			     _IORET:
    353				       RCHG  BP			     ; RESTORE DSP --- AX !!!
1   354	018D  95		       xchg  ax,BP
    355				       X				     ; SWITCH TO RETURN	STACK
1   356	018E  94		       xchg Rsp,DSP
    357	018F  5D 5A 5B 5F 07 1F	       POP   BP	AR BX DI ES DS	; RESTORE REGISTERS
    358
    359				     ; IO	    COMMANDS  (IO  ^^^^^^^
    360
    361				     ; CONTROL	    COMMANDS  (IF (JUMP	(RETURN	(IF-
    362
    363	0195			     @DROPX:
    364				       D_TO  TOP
1   365				       X
2   366	0195  94		       xchg Rsp,DSP
1   367	0196  59		       POP    TOP
1   368				       X
2   369	0197  94		       xchg Rsp,DSP
    370
    371				     P_	_RET
1   372				       ALIGN_
2   373					     IF	($-START) AND 1
2   374					     NOP
2   375					     ENDIF
1   376	0198  90		       NOP
1   377	0199			     _RET:
1   378				       ORG $-1
    379	0198			     @RETURN:
    380				       r_to  IP			     ; POP IP FROM RETURN TOP ELEMENT
1   381	0198  5E		       POP    IP
    382	0199			     @TOMAIN:
    383	0199  E9 0098		       JMP   @MAIN	     ; LOAD IP FROM RETURN STACK
    384				     P_	_DROPX
1   385				       ALIGN_
2   386					     IF	($-START) AND 1
2   387					     NOP
2   388					     ENDIF
1   389	019C  90		       NOP
1   390	019D			     _DROPX:
1   391				       ORG $-1
    392				       JMPS @DROPX
1   393	019C  EB F7			       jmp  SHORT @DROPX
    394
    395				      P_ _PUSHX
1   396				       ALIGN_
2   397					     IF	($-START) AND 1
2   398					     NOP
2   399					     ENDIF
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 8
NF10.asm



1   400	019E  90		       NOP
1   401	019F			     _PUSHX:
1   402				       ORG $-1
    403	019E  51				     PUSH    TOP
    404						     JMPS    @DROPX
1   405	019F  EB F4			       jmp  SHORT @DROPX
    406
    407				     P_	_AST
1   408				       ALIGN_
2   409					     IF	($-START) AND 1
2   410	01A1  90			     NOP
2   411					     ENDIF
1   412	01A2  90		       NOP
1   413	01A3			     _AST:
1   414				       ORG $-1
    415	01A2  8B D1			 MOV AR,TOP
    416					 JMPS  @DROP
1   417	01A4  EB 23			       jmp  SHORT @DROP
    418
    419				     P_	_DSPST
1   420				       ALIGN_
2   421					     IF	($-START) AND 1
2   422					     NOP
2   423					     ENDIF
1   424	01A6  90		       NOP
1   425	01A7			     _DSPST:
1   426				       ORG $-1
    427	01A6  8B C1			 MOV DSP,TOP
    428					 JMPS  @DROP
1   429	01A8  EB 1F			       jmp  SHORT @DROP
    430
    431				     P_	_RSPST
1   432				       ALIGN_
2   433					     IF	($-START) AND 1
2   434					     NOP
2   435					     ENDIF
1   436	01AA  90		       NOP
1   437	01AB			     _RSPST:
1   438				       ORG $-1
    439	01AA  8B E1			 MOV RSP,TOP
    440					 JMPS  @DROP
1   441	01AC  EB 1B			       jmp  SHORT @DROP
    442
    443				     P_	_?EXIT			     ; 0;
1   444				       ALIGN_
2   445					     IF	($-START) AND 1
2   446					     NOP
2   447					     ENDIF
1   448	01AE  90		       NOP
1   449	01AF			     _?EXIT:
1   450				       ORG $-1
    451	01AE  E3 E5		       JCXZ  @DROPX
    452				       JMPS  @DROP
1   453	01B0  EB 17			       jmp  SHORT @DROP
    454
    455				     P_	_EXEC
1   456				       ALIGN_
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 9
NF10.asm



2   457					     IF	($-START) AND 1
2   458					     NOP
2   459					     ENDIF
1   460	01B2  90		       NOP
1   461	01B3			     _EXEC:
1   462				       ORG $-1
    463	01B2  8B F9			     MOV	     W,TOP
    464					     D_TO    TOP
1   465				       X
2   466	01B4  94		       xchg Rsp,DSP
1   467	01B5  59		       POP    TOP
1   468				       X
2   469	01B6  94		       xchg Rsp,DSP
    470	01B7  E9 007F			 JMP @MAIN3
    471
    472				     P_	_IF	; (IF
1   473				       ALIGN_
2   474					     IF	($-START) AND 1
2   475					     NOP
2   476					     ENDIF
1   477	01BA  90		       NOP
1   478	01BB			     _IF:
1   479				       ORG $-1
    480	01BA  E3 15		       JCXZ  @JUMPDR
    481	01BC			     @SKIPDR:
    482	01BC  46		       INC   IP
    483	01BD  46		       INC   IP
    484				       JMPS  @DROP
1   485	01BE  EB 09			       jmp  SHORT @DROP
    486
    487				     P_	_?EXEC			     ; EXEC NEXT WORD ON 0= ELSE SKIP
1   488				       ALIGN_
2   489					     IF	($-START) AND 1
2   490					     NOP
2   491					     ENDIF
1   492	01C0  90		       NOP
1   493	01C1			     _?EXEC:
1   494				       ORG $-1
    495	01C0  E3 07		       JCXZ  @DROP
    496				       JMPS  @SKIP
1   497	01C2  EB 1E			       jmp  SHORT @SKIP
    498
    499				     P_	_?SKIP			     ; EXEC NEXT WORD ON 0<> ELSE .SKIP
1   500				       ALIGN_
2   501					     IF	($-START) AND 1
2   502					     NOP
2   503					     ENDIF
1   504	01C4  90		       NOP
1   505	01C5			     _?SKIP:
1   506				       ORG $-1
    507	01C4  E3 F6		       JCXZ  @SKIPDR
    508				       JMPS  @MAIN
1   509	01C6  EB 6C			       jmp  SHORT @MAIN
    510
    511				     P_	_PUSH			     ; PUSH
1   512				       ALIGN_
2   513					     IF	($-START) AND 1
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 10
NF10.asm



2   514					     NOP
2   515					     ENDIF
1   516	01C8  90		       NOP
1   517	01C9			     _PUSH:
1   518				       ORG $-1
    519				       TO_R  TOP
1   520	01C8  51		       PUSH   TOP
    521	01C9			     @DROP:
    522				       D_TO  TOP
1   523				       X
2   524	01C9  94		       xchg Rsp,DSP
1   525	01CA  59		       POP    TOP
1   526				       X
2   527	01CB  94		       xchg Rsp,DSP
    528				       JMPS  @MAIN
1   529	01CC  EB 66			       jmp  SHORT @MAIN
    530
    531				     P_	_DROP
1   532				       ALIGN_
2   533					     IF	($-START) AND 1
2   534					     NOP
2   535					     ENDIF
1   536	01CE  90		       NOP
1   537	01CF			     _DROP:
1   538				       ORG $-1
    539				      JMPS @DROP			     ; DUPLICATE TOP
1   540	01CE  EB F9			       jmp  SHORT @DROP
    541
    542				     P_	_FOR
1   543				       ALIGN_
2   544					     IF	($-START) AND 1
2   545					     NOP
2   546					     ENDIF
1   547	01D0  90		       NOP
1   548	01D1			     _FOR:
1   549				       ORG $-1
    550	01D0  51		       PUSH  TOP
    551	01D1			     @JUMPDR:
    552	01D1  8B 34		       MOV   IP,[IP]	     ; JUST BRANCH
    553				       JMPS  @DROP
1   554	01D3  EB F4			       jmp  SHORT @DROP
    555
    556				     P_	_NEXT
1   557				       ALIGN_
2   558					     IF	($-START) AND 1
2   559	01D5  90			     NOP
2   560					     ENDIF
1   561	01D6  90		       NOP
1   562	01D7			     _NEXT:
1   563				       ORG $-1
    564	01D6  5F		       POP   W
    565	01D7  4F		       DEC   W
    566	01D8  57		       PUSH  W
    567				       SKIPR W
1   568	01D9  BF 0000			     mov   W,0
1   569					     org   $-2
    570
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 11
NF10.asm



    571				     P_	_MIF			     ; (-IF
1   572				       ALIGN_
2   573					     IF	($-START) AND 1
2   574					     NOP
2   575					     ENDIF
1   576	01DA  90		       NOP
1   577	01DB			     _MIF:
1   578				       ORG $-1
    579	01DA			     @MIF:
    580	01DA  41		       INC   TOP		     ; INCREMENT TOP
    581	01DB			     @IFM:
    582	01DB  49		       DEC   TOP		     ; DECREMENT TOP
    583	01DC  78 04		       JS    @SKIP	     ; ON NEGATIVE - SKIP BRANCH
    584
    585				     P_	_JUMP				     ; (JUMP
1   586				       ALIGN_
2   587					     IF	($-START) AND 1
2   588					     NOP
2   589					     ENDIF
1   590	01DE  90		       NOP
1   591	01DF			     _JUMP:
1   592				       ORG $-1
    593	01DE			     @JUMP:
    594	01DE  8B 34		       MOV   IP,[IP]	     ; JUST BRANCH
    595				       JMPS  @MAIN
1   596	01E0  EB 52			       jmp  SHORT @MAIN
    597
    598				     P_	_SKIP
1   599				       ALIGN_
2   600					     IF	($-START) AND 1
2   601					     NOP
2   602					     ENDIF
1   603	01E2  90		       NOP
1   604	01E3			     _SKIP:
1   605				       ORG $-1
    606	01E2			     @SKIP:
    607	01E2  46		       INC   ip
    608	01E3  46		       INC   ip
    609				       JMPS  @MAIN
1   610	01E4  EB 4E			       jmp  SHORT @MAIN
    611
    612				     P_	_IFM
1   613				       ALIGN_
2   614					     IF	($-START) AND 1
2   615					     NOP
2   616					     ENDIF
1   617	01E6  90		       NOP
1   618	01E7			     _IFM:
1   619				       ORG $-1
    620				      JMPS @IFM			     ; (IF-
1   621	01E6  EB F3			       jmp  SHORT @IFM
    622
    623				     ; DATA TRANSFER  COMMANDS	@R+ !R+	XCHG XA
    624
    625	01E8			     @GETLEN:
    626						     TO_D    TOP
1   627				       X
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 12
NF10.asm



2   628	01E8  94		       xchg Rsp,DSP
1   629	01E9  51		       PUSH   TOP
1   630				       X
2   631	01EA  94		       xchg Rsp,DSP
    632					     CLR     TOP
1   633	01EB  33 C9		       XOR  TOP,TOP
    634	01ED  8A 0D			     MOV     TOPL,[W]
    635	01EF  C3				     RET
    636
    637				      P_ _SLSKIP			 ; ("SKIP
1   638				       ALIGN_
2   639					     IF	($-START) AND 1
2   640					     NOP
2   641					     ENDIF
1   642	01F0  90		       NOP
1   643	01F1			     _SLSKIP:
1   644				       ORG $-1
    645	01F0  5F			     POP     W
    646	01F1  E8 FFF4				     CALL    @GETLEN
    647	01F4  80 C9 01			     OR	     TOPL,1	   ; MAKE CNT ODD
    648	01F7  03 CF			     ADD     TOP,W
    649	01F9  87 CF			     XCHG    TOP,W
    650					     JMPS    @RINC1
1   651	01FB  EB 1C			       jmp  SHORT @RINC1
    652
    653				     P_	_RSTBP			     ; C!R+
1   654				       ALIGN_
2   655					     IF	($-START) AND 1
2   656	01FD  90			     NOP
2   657					     ENDIF
1   658	01FE  90		       NOP
1   659	01FF			     _RSTBP:
1   660				       ORG $-1
    661	01FE  5F		       POP   W		     ; USE RETURN TOP AS DATA ADDRESS
    662	01FF  88 0D		       MOV   [W],TOPL		     ; STORE DATA TOP
    663				       JMPS  @WINCW		     ; FETCH NEXT DATA TO TOP
1   664	0201  EB 05			       jmp  SHORT @WINCW
    665
    666				     ; P_ _RST			     ; !I
    667				     ;	 R_TO	     W			     ; USE RETURN TOP AS DATA ADDRESS
    668				     ;	 MOV   [W],TOP		     ; STORE DATA TOP
    669				     ;	 JMPS	     @PUSHW
    670
    671				     P_	_RSTP			     ; !R+
1   672				       ALIGN_
2   673					     IF	($-START) AND 1
2   674	0203  90			     NOP
2   675					     ENDIF
1   676	0204  90		       NOP
1   677	0205			     _RSTP:
1   678				       ORG $-1
    679				       R_TO  W			     ; USE RETURN TOP AS DATA ADDRESS
1   680	0204  5F		       POP    W
    681	0205  89 0D		       MOV   [W],TOP	     ; STORE DATA TOP
    682	0207  47		       inc   W			     ; INCREMENT ADDRESS
    683	0208			     @WINCW:
    684	0208  47		       inc   W			     ; INCREMENT ADDRESS
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 13
NF10.asm



    685	0209			     @PUSHW:
    686	0209  57		       PUSH  W
    687				       JMPS  @DROP	     ; FETCH NEXT DATA TO TOP
1   688	020A  EB BD			       jmp  SHORT @DROP
    689
    690				     P_	_RLDBP			     ; C@R+
1   691				       ALIGN_
2   692					     IF	($-START) AND 1
2   693					     NOP
2   694					     ENDIF
1   695	020C  90		       NOP
1   696	020D			     _RLDBP:
1   697				       ORG $-1
    698				       R_TO  W			     ; USE RETURN TOP AS DATA ADDRESS
1   699	020C  5F		       POP    W
    700	020D  E8 FFD8			     CALL    @GETLEN
    701				       JMPS  @RINC1	     ; INCREMENT ADDRESS & SAVE	RETURN TOP
1   702	0210  EB 07			       jmp  SHORT @RINC1
    703
    704				     ; P_ _RLD			     ; @I
    705				     ;	 R_TO	     W			     ; USE RETURN TOP AS DATA ADDRESS
    706				     ;	 TO_D	     TOP
    707				     ;	 MOV   TOP,[W]		     ; USE RETURN TOP AS DATA ADDRESS
    708				     ;	 JMPS  @RPUSH		     ; SAVE RETURN TOP
    709
    710				     P_	_RLDP			     ; @R+
1   711				       ALIGN_
2   712					     IF	($-START) AND 1
2   713					     NOP
2   714					     ENDIF
1   715	0212  90		       NOP
1   716	0213			     _RLDP:
1   717				       ORG $-1
    718				       R_TO  W			     ; USE RETURN TOP AS DATA ADDRESS
1   719	0212  5F		       POP    W
    720				       TO_D  TOP
1   721				       X
2   722	0213  94		       xchg Rsp,DSP
1   723	0214  51		       PUSH   TOP
1   724				       X
2   725	0215  94		       xchg Rsp,DSP
    726	0216  8B 0D		       MOV   TOP,[W]	     ; USE RETURN TOP AS DATA ADDRESS
    727	0218			     @RINC2:
    728	0218  47		       inc   W			     ; INCREMENT ADDRESS
    729	0219			     @RINC1:
    730	0219  47		       inc   W			     ; INCREMENT ADDRESS
    731				       JMPS  @RPUSH	     ; SAVE RETURN TOP
1   732	021A  EB 17			       jmp  SHORT @RPUSH
    733
    734				     P_	_J			     ; J - DATA	FROM SECOND ELEMENT OF RETURN STACK
1   735				       ALIGN_
2   736					     IF	($-START) AND 1
2   737					     NOP
2   738					     ENDIF
1   739	021C  90		       NOP
1   740	021D			     _J:
1   741				       ORG $-1
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 14
NF10.asm



    742				       TO_D  TOP
1   743				       X
2   744	021C  94		       xchg Rsp,DSP
1   745	021D  51		       PUSH   TOP
1   746				       X
2   747	021E  94		       xchg Rsp,DSP
    748				       R_TO  W			     ; POP W FROM RETURN
1   749	021F  5F		       POP    W
    750				       R_TO  TOP
1   751	0220  59		       POP    TOP
    752				       TO_R  TOP
1   753	0221  51		       PUSH   TOP
    754				       JMPS  @RPUSH		     ; INCREMENT ADDRESS
1   755	0222  EB 0F			       jmp  SHORT @RPUSH
    756
    757				     P_	_XR			     ; XCHG
1   758				       ALIGN_
2   759					     IF	($-START) AND 1
2   760					     NOP
2   761					     ENDIF
1   762	0224  90		       NOP
1   763	0225			     _XR:
1   764				       ORG $-1
    765	0224			     @XCHG:
    766				       R_TO  W			     ; EXCHANGE	TOP ELEMENTS
1   767	0224  5F		       POP    W
    768	0225  87 CF		       XCHG  TOP,W	     ; => DATA STACK AND RETURN	STACK
    769				       JMPS  @RPUSH
1   770	0227  EB 0A			       jmp  SHORT @RPUSH
    771
    772				     P_	_XA			     ; XA
1   773				       ALIGN_
2   774					     IF	($-START) AND 1
2   775	0229  90			     NOP
2   776					     ENDIF
1   777	022A  90		       NOP
1   778	022B			     _XA:
1   779				       ORG $-1
    780				       R_TO  W			     ; EXCHANGE	RETURN TOP ELEMENT
1   781	022A  5F		       POP    W
    782	022B  87 D7		       XCHG  ar,W	     ; WITH ADDED REGISTER
    783				       JMPS  @RPUSH
1   784	022D  EB 04			       jmp  SHORT @RPUSH
    785
    786
    787				     ; MAIN  LOOP -----------------------------
    788
    789				     P_	_EX
1   790				       ALIGN_
2   791					     IF	($-START) AND 1
2   792	022F  90			     NOP
2   793					     ENDIF
1   794	0230  90		       NOP
1   795	0231			     _EX:
1   796				       ORG $-1
    797				       R_TO  W
1   798	0230  5F		       POP    W
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 15
NF10.asm



    799	0231			     @NEST:
    800	0231  87 F7		       XCHG  IP,W	     ; PUSH NEW	IP
    801	0233			     @RPUSH:
    802				       to_r  W			     ; PUSH W
1   803	0233  57		       PUSH   W
    804
    805				     P_	_NOP
1   806				       ALIGN_
2   807					     IF	($-START) AND 1
2   808					     NOP
2   809					     ENDIF
1   810	0234  90		       NOP
1   811	0235			     _NOP:
1   812				       ORG $-1
    813	0234			     @MAIN:
    814	0234  8B 3C		       MOV   w,[IP]
    815	0236			     @MAIN2:
    816	0236  8D 74 02		       LEA   IP,[IP+2]
    817	0239			     @MAIN3:
    818	0239  F7 C7 0001	       TEST  W,1
    819	023D  74 F2		       JZ    @NEST
    820	023F  4F		       DEC   W
    821	0240  FF E7		       JMP   W		     ; BRANCH TO PRIMITIVE
    822
    823				     ;	STACK COMMANDS	 PUSH DUP  ----------------------------
    824
    825				     P_	_POP
1   826				       ALIGN_
2   827					     IF	($-START) AND 1
2   828					     NOP
2   829					     ENDIF
1   830	0242  90		       NOP
1   831	0243			     _POP:
1   832				       ORG $-1
    833				      JMPS @POP		     ; POP
1   834	0242  EB 0D			       jmp  SHORT @POP
    835
    836				     P_	_OVER
1   837				       ALIGN_
2   838					     IF	($-START) AND 1
2   839					     NOP
2   840					     ENDIF
1   841	0244  90		       NOP
1   842	0245			     _OVER:
1   843				       ORG $-1
    844					     X
1   845	0244  94		       xchg Rsp,DSP
    846					     R_TO    W
1   847	0245  5F		       POP    W
    848					     TO_R    W
1   849	0246  57		       PUSH   W
    850					     X
1   851	0247  94		       xchg Rsp,DSP
    852					     TO_R    W
1   853	0248  57		       PUSH   W
    854					     SKIPB
1   855	0249  3C			     DB	   03CH
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 16
NF10.asm



    856
    857				     P_	_RSPLD
1   858				       ALIGN_
2   859					     IF	($-START) AND 1
2   860					     NOP
2   861					     ENDIF
1   862	024A  90		       NOP
1   863	024B			     _RSPLD:
1   864				       ORG $-1
    865					     TO_R    RSP
1   866	024A  54		       PUSH   RSP
    867					     SKIPB
1   868	024B  3C			     DB	   03CH
    869
    870				     P_	_DSPLD
1   871				       ALIGN_
2   872					     IF	($-START) AND 1
2   873					     NOP
2   874					     ENDIF
1   875	024C  90		       NOP
1   876	024D			     _DSPLD:
1   877				       ORG $-1
    878					     TO_R    DSP
1   879	024C  50		       PUSH   DSP
    880					     SKIPB
1   881	024D  3C			     DB	   03CH
    882
    883				     P_	_ALD
1   884				       ALIGN_
2   885					     IF	($-START) AND 1
2   886					     NOP
2   887					     ENDIF
1   888	024E  90		       NOP
1   889	024F			     _ALD:
1   890				       ORG $-1
    891					     TO_R    AR
1   892	024E  52		       PUSH   AR
    893					     SKIPB
1   894	024F  3C			     DB	   03CH
    895
    896				     P_	_DUP				     ; DUPLICATE TOP
1   897				       ALIGN_
2   898					     IF	($-START) AND 1
2   899					     NOP
2   900					     ENDIF
1   901	0250  90		       NOP
1   902	0251			     _DUP:
1   903				       ORG $-1
    904					     TO_R    TOP
1   905	0250  51		       PUSH   TOP
    906	0251			     @POP:
    907					     TO_D    TOP
1   908				       X
2   909	0251  94		       xchg Rsp,DSP
1   910	0252  51		       PUSH   TOP
1   911				       X
2   912	0253  94		       xchg Rsp,DSP
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 17
NF10.asm



    913					     R_TO    TOP
1   914	0254  59		       POP    TOP
    915					 JMPS  @MAIN
1   916	0255  EB DD			       jmp  SHORT @MAIN
    917	0257			     @TO_DBG:
    918	0257  E9 FED9			     JMP	     @DEBUG
    919				     P_	_RDROP
1   920				       ALIGN_
2   921					     IF	($-START) AND 1
2   922					     NOP
2   923					     ENDIF
1   924	025A  90		       NOP
1   925	025B			     _RDROP:
1   926				       ORG $-1
    927	025A  5F			     POP	     W
    928					 JMPS  @MAIN
1   929	025B  EB D7			       jmp  SHORT @MAIN
    930	025D			     @NOT_CTO:
    931	025D  F5			     CMC
    932	025E			     @C_TO_R:
    933	025E  1B C9			 SBB	 TOP,TOP
    934					 JMPS	     @MAIN
1   935	0260  EB D2			       jmp  SHORT @MAIN
    936
    937				     P_	_ZEQ			 ;  - LOGICAL INVERT
1   938				       ALIGN_
2   939					     IF	($-START) AND 1
2   940					     NOP
2   941					     ENDIF
1   942	0262  90		       NOP
1   943	0263			     _ZEQ:
1   944				       ORG $-1
    945	0262  F7 D9			     NEG     TOP
    946					 JMPS	     @NOT_CTO
1   947	0264  EB F7			       jmp  SHORT @NOT_CTO
    948
    949				     P_	_ULESS			 ;  UNSIGNED COMPARE
1   950				       ALIGN_
2   951					     IF	($-START) AND 1
2   952					     NOP
2   953					     ENDIF
1   954	0266  90		       NOP
1   955	0267			     _ULESS:
1   956				       ORG $-1
    957					     D_TO W
1   958				       X
2   959	0266  94		       xchg Rsp,DSP
1   960	0267  5F		       POP    W
1   961				       X
2   962	0268  94		       xchg Rsp,DSP
    963	0269  2B F9			     SUB     W,TOP
    964					 SKIPR	     W
1   965	026B  BF 0000			     mov   W,0
1   966					     org   $-2
    967
    968				      P_ _0LESS
1   969				       ALIGN_
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 18
NF10.asm



2   970					     IF	($-START) AND 1
2   971					     NOP
2   972					     ENDIF
1   973	026C  90		       NOP
1   974	026D			     _0LESS:
1   975				       ORG $-1
    976	026C  D1 E1			 SHL	     TOP,1
    977					 JMPS	     @C_TO_R
1   978	026E  EB EE			       jmp  SHORT @C_TO_R
    979
    980				     P_	_DIG_C
1   981				       ALIGN_
2   982					     IF	($-START) AND 1
2   983					     NOP
2   984					     ENDIF
1   985	0270  90		       NOP
1   986	0271			     _DIG_C:
1   987				       ORG $-1
    988					     RCHG    TOP
1   989	0270  91		       xchg  ax,TOP
    990	0271  3C 0A			     CMP       AL,10
    991	0273  72 02			     JB	       @@2
    992	0275  04 07			     ADD   AL,7
    993	0277  04 30		     @@2:ADD   AL,'0'
    994					     RCHG    TOP
1   995	0279  91		       xchg  ax,TOP
    996					 JMPS  @MAIN
1   997	027A  EB B8			       jmp  SHORT @MAIN
    998
    999				     ; MATH, LOGIC AND SHIFT COMMANDS	+2/ +* -/ NAND
   1000
   1001				     P_	_NAND		     ; NAND - LOGICAL PRIMITIVE
1  1002				       ALIGN_
2  1003					     IF	($-START) AND 1
2  1004					     NOP
2  1005					     ENDIF
1  1006	027C  90		       NOP
1  1007	027D			     _NAND:
1  1008				       ORG $-1
   1009					     D_TO W
1  1010				       X
2  1011	027C  94		       xchg Rsp,DSP
1  1012	027D  5F		       POP    W
1  1013				       X
2  1014	027E  94		       xchg Rsp,DSP
   1015	027F  23 CF			     AND   TOP,W     ; AND
   1016	0281			     @NOT:
   1017	0281  41			     INC     TOP		       ; NOT  2	 1 & 2 => NAND
   1018				     P_	_NEG,@NEG
1  1019				       ALIGN_
2  1020					     IF	($-START) AND 1
2  1021					     NOP
2  1022					     ENDIF
1  1023	0282  90		       NOP
1  1024	0283			     _NEG:
1  1025				       ORG $-1
   1026	0282			     @NEG:
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 19
NF10.asm



   1027	0282  F7 D9			     NEG     TOP		       ; NOT  2	 1 & 2 => NAND
   1028					     JMPS  @MAIN
1  1029	0284  EB AE			       jmp  SHORT @MAIN
   1030				     P_	_NOT
1  1031				       ALIGN_
2  1032					     IF	($-START) AND 1
2  1033					     NOP
2  1034					     ENDIF
1  1035	0286  90		       NOP
1  1036	0287			     _NOT:
1  1037				       ORG $-1
   1038				      JMPS @NOT
1  1039	0286  EB F9			       jmp  SHORT @NOT
   1040
   1041				     P_	_MDIV			     ; -/ DIVIDE PRIMITIVE
1  1042				       ALIGN_
2  1043					     IF	($-START) AND 1
2  1044					     NOP
2  1045					     ENDIF
1  1046	0288  90		       NOP
1  1047	0289			     _MDIV:
1  1048				       ORG $-1
   1049				       X				     ; SWITCH DSP WITH RSP
1  1050	0288  94		       xchg Rsp,DSP
   1051				       R_TO  W			     ; BELOW TOP REGISTER OF DATA STACK
1  1052	0289  5F		       POP    W
   1053	028A  D1 E7		       SHL   W,1		     ; SHIFT LEFT NEXT TO CARRY
   1054	028C  D1 D1		       RCL   TOP,1	     ; ROTATE LEFT WITH	CARRY
   1055	028E  3B CA		       CMP   TOP,ar	     ; COMPARE TOP WITH	AR
   1056	0290  72 03		       JB      @MDIV	     ; IF NOT BELOW THEN SUBTRACT
   1057	0292  2B CA		       SUB   TOP,ar	     ; SUBTRACT	SAR FROM TOP
   1058	0294  47		       INC   W			     ; SUCSESSFULL SUBTRACT
   1059	0295			     @MDIV:
   1060				       TO_R  W			     ; NEXT BACK TO DATA STACK
1  1061	0295  57		       PUSH   W
   1062	0296			     @MDIV2:
   1063				       X				     ; SWITCH DSP WITH RSP
1  1064	0296  94		       xchg Rsp,DSP
   1065				       JMPS  @MAIN
1  1066	0297  EB 9B			       jmp  SHORT @MAIN
   1067
   1068				     P_	_PMUL					     ; +* MULTIPLY PRIMITIVE
1  1069				       ALIGN_
2  1070					     IF	($-START) AND 1
2  1071	0299  90			     NOP
2  1072					     ENDIF
1  1073	029A  90		       NOP
1  1074	029B			     _PMUL:
1  1075				       ORG $-1
   1076				       X
1  1077	029A  94		       xchg Rsp,DSP
   1078				       R_TO  W			       ; FETCH SECOND DATA ELEMENT - NEXT
1  1079	029B  5F		       POP    W
   1080	029C  F7 C7 0001	       TEST  W,1		     ; TEST LEAST SIGNIFICANT BIT
   1081	02A0  74 02		       JE    @2MUL	     ; IF CLEAR	- NOT ADD
   1082	02A2  03 CA		       ADD   TOP,ar	     ; ADDING SAR TO TOP
   1083	02A4			     @2MUL:
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 20
NF10.asm



   1084	02A4  D1 D9		       RCR   TOP,1	     ; JUST SHIFT RIGHT	TOP WITH CARRY
   1085	02A6  D1 DF		       RCR   W,1		     ; SHIFT RIGHT NEXT	WITH CARRY
   1086				       JMPS  @MDIV
1  1087	02A8  EB EB			       jmp  SHORT @MDIV
   1088
   1089				     P_	_P2DIV			     ; +2/ SUM AND SHIFT PRIMITIVE
1  1090				       ALIGN_
2  1091					     IF	($-START) AND 1
2  1092					     NOP
2  1093					     ENDIF
1  1094	02AA  90		       NOP
1  1095	02AB			     _P2DIV:
1  1096				       ORG $-1
   1097				       X				     ; SWITCH DSP WITH RSP
1  1098	02AA  94		       xchg Rsp,DSP
   1099				       R_TO  W			     ; BELOW TOP REGISTER OF DATA STACK
1  1100	02AB  5F		       POP    W
   1101	02AC  03 F9		       ADD   W,TOP	     ; NEXT := NEXT + TOP;
   1102	02AE  8B CF		       MOV     TOP,W	     ; PREPARE FOR SHIFT
   1103	02B0  D1 D9		       RCR   TOP,1	     ; SHIFT RIGHT TOP WITH CARRY
   1104				       JMPS  @MDIV
1  1105	02B2  EB E1			       jmp  SHORT @MDIV
   1106
   1107				     P_	_XOR			     ; XOR - LOGICAL PRIMITIVE
1  1108				       ALIGN_
2  1109					     IF	($-START) AND 1
2  1110					     NOP
2  1111					     ENDIF
1  1112	02B4  90		       NOP
1  1113	02B5			     _XOR:
1  1114				       ORG $-1
   1115					     X				     ; SWITCH DSP WITH RSP
1  1116	02B4  94		       xchg Rsp,DSP
   1117					     R_TO    W		     ; BELOW TOP REGISTER OF DATA STACK
1  1118	02B5  5F		       POP    W
   1119	02B6  33 CF			     XOR     TOP,W
   1120					     JMPS    @MDIV2
1  1121	02B8  EB DC			       jmp  SHORT @MDIV2
   1122
   1123				     L_	EndMem
1  1124				       ALIGN_
2  1125					     IF	($-START) AND 1
2  1126					     NOP
2  1127					     ENDIF
1  1128	02BA			     EndMem:
   1129
   1130	02BA			     MyCseg  ends
   1131					     end  Start
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 21
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/22/19"
??FILENAME		Text   "NF10	"
??TIME			Text   "11:42:07"
??VERSION		Number 0314
@2MUL			Near   MYCSEG:02A4		   1081	 #1083
@2PX			Near   MYCSEG:0128		   #191	 206
@@2			Near   MYCSEG:0277		   991	#993
@BK?			Near   MYCSEG:0162		   280	283  295  #297
@CPU			Text   0101H
@CURSEG			Text   MYCSEG			   #89
@C_TO_R			Near   MYCSEG:025E		   #932	 978
@DBG_A			Near   MYCSEG:0131		   #219	 249
@DEBUG			Near   MYCSEG:0133		   #220	 918
@DROP			Near   MYCSEG:01C9		   417	429  441  453  485  495	 #521  540  554	 688
@DROPX			Near   MYCSEG:0195		   #363	 393  405  451
@FILENAME		Text   NF10
@GETLEN			Near   MYCSEG:01E8		   #625	 646  700
@IFM			Near   MYCSEG:01DB		   #581	 621
@INTNUM			Number MYCSEG:017D		   333	#336
@JUMP			Near   MYCSEG:01DE		   #593
@JUMPDR			Near   MYCSEG:01D1		   480	#551
@MAIN			Near   MYCSEG:0234		   247	383  509  529  596  610	 #813  916  929	 935  997  1029	 1066
@MAIN1			Near   MYCSEG:0135		   219	#231
@MAIN2			Near   MYCSEG:0236		   263	#815
@MAIN3			Near   MYCSEG:0239		   470	#817
@MDIV			Near   MYCSEG:0295		   1056	 #1059	1087  1105
@MDIV2			Near   MYCSEG:0296		   #1062  1121
@MIF			Near   MYCSEG:01DA		   #579
@NEG			Near   MYCSEG:0282		   #1026
@NEST			Near   MYCSEG:0231		   #799	 819
@NOT			Near   MYCSEG:0281		   #1016  1039
@NOT_CTO		Near   MYCSEG:025D		   #930	 947
@POP			Near   MYCSEG:0251		   834	#906
@PUSHW			Near   MYCSEG:0209		   #685
@RETURN			Near   MYCSEG:0198		   114	171  195  218  #379
@RINC1			Near   MYCSEG:0219		   651	702  #729
@RINC2			Near   MYCSEG:0218		   #727
@RPUSH			Near   MYCSEG:0233		   732	755  770  784  #801
@R_TOP			Number -0240			   #97	98  98	111
@SKIP			Near   MYCSEG:01E2		   497	583  #606
@SKIPDR			Near   MYCSEG:01BC		   #481	 507
@S_TOP			Number -0520			   #98	112
@TBUF			Number -0200			   #96	97  99
@TIB			Number -0100			   #95	96
@TOMAIN			Near   MYCSEG:0199		   232	#382
@TO_DBG			Near   MYCSEG:0257		   263	#917
@TR0A			Near   MYCSEG:0137		   113	#233
@TR1A			Near   MYCSEG:0141		   #250
@TR_SET			Near   MYCSEG:013B		   #246	 265
@VOCTOP			Number -1800			   #99
@WINCW			Near   MYCSEG:0208		   664	#683
@WORDSIZE		Text   2			   #89
@XCHG			Near   MYCSEG:0224		   #765
AR			Number DX			   #78	310  357  415  782  892	 1055  1057  1082
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 22
Symbol Table



DSP			Number AX			   #72	112  313  356  366  369	 427  466  469	524  527  628  631  722	  +
							   725	744  747  845  851  879	 909  912  959	962  1011  1014	 1050	  +
							   1064	 1077  1098  1116
ENDMEM			Near   MYCSEG:02BA		   #1128
IP			Number SI			   #71	142  169  245  323  381	 482  483  552	552  594  594  607  608	  +
							   800	814  816  816
RSP			Number SP			   #73	111  313  356  366  369	 439  466  469	524  527  628  631  722	  +
							   725	744  747  845  851  866	 909  912  959	962  1011  1014	 1050	  +
							   1064	 1077  1098  1116
START			Byte   MYCSEG:0100		   #101	 105  118  127	136  145  154  163  175	 185  199  210	224  236  +
							   253	271  287  304  317  327	 344  373  386	397  409  421  433  445	  +
							   457	474  489  501  513  533	 544  558  573	587  600  614  639  655	  +
							   673	692  712  736  759  774	 791  807  827	838  859  872  885  898	  +
							   921	939  951  970  982  1003  1020	1032  1043  1070  1091	1109  1125+
							   1131
TOP			Number CX			   #74	133  142  151  160  169	 181  182  192	193  314  367  403  415	  +
							   427	439  463  467  520  525	 550  580  582	629  633  633  648  649	  +
							   681	723  726  745  751  753	 768  905  910	914  933  933  945  963	  +
							   976	989  995  1015	1017  1027  1054  1055	1057  1082  1084  1101	  +
							   1102	 1103  1119
TOPL			Number CL			   #75	634  647  662
W			Number DI			   #76	216  243  245  247  260	 463  564  565	566  568  634  645  648	  +
							   649	661  662  680  681  682	 684  686  699	719  726  728  730  749	  +
							   767	768  781  782  798  800	 803  814  818	820  821  847  849  853	  +
							   927	960  963  965  1012  1015  1052	 1053  1058  1061  1079	 1080	  +
							   1085	 1100  1101  1102  1118	 1119
_0LESS			Near   MYCSEG:026D		   #974
_1PX			Near   MYCSEG:012D		   #203
_2PX			Near   MYCSEG:0129		   #189
_4PX			Near   MYCSEG:0127		   #179
_5ARY			Near   MYCSEG:011D		   #140
_?EXEC			Near   MYCSEG:01C1		   #493
_?EXIT			Near   MYCSEG:01AF		   #449
_?SKIP			Near   MYCSEG:01C5		   #505
_ABORT			Near   MYCSEG:0101		   #109
_ALD			Near   MYCSEG:024F		   #889
_ASM			Near   MYCSEG:0171		   #321
_AST			Near   MYCSEG:01A3		   #413
_BARY			Near   MYCSEG:0123		   #167
_BE			Near   MYCSEG:0186		   #347
_BK			Near   MYCSEG:0148		   #274
_BK?			Near   MYCSEG:0156		   #290
_BRK			Near   MYCSEG:0135		   #228
_DIG_C			Near   MYCSEG:0271		   #986
_DROP			Near   MYCSEG:01CF		   #537
_DROPX			Near   MYCSEG:019D		   #390
_DSPLD			Near   MYCSEG:024D		   #876
_DSPST			Near   MYCSEG:01A7		   #425
_DUP			Near   MYCSEG:0251		   #902
_EX			Near   MYCSEG:0231		   #795
_EXEC			Near   MYCSEG:01B3		   #461
_FOR			Near   MYCSEG:01D1		   #548
_IF			Near   MYCSEG:01BB		   #478
_IFM			Near   MYCSEG:01E7		   #618
_INITA			Near   MYCSEG:010C		   #121
_INT			Near   MYCSEG:0172		   #330
_IO			Near   MYCSEG:0167		   275	291  #308  331	348
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 23
Symbol Table



_IORET			Near   MYCSEG:018D		   300	340  #352
_J			Near   MYCSEG:021D		   #740
_JUMP			Near   MYCSEG:01DF		   #591
_LARY			Near   MYCSEG:011F		   #149
_MDIV			Near   MYCSEG:0289		   #1047
_MIF			Near   MYCSEG:01DB		   #577
_NAND			Near   MYCSEG:027D		   #1007
_NEG			Near   MYCSEG:0283		   #1024
_NEXT			Near   MYCSEG:01D7		   #562
_NOP			Near   MYCSEG:0235		   #811
_NOT			Near   MYCSEG:0287		   #1036
_OVER			Near   MYCSEG:0245		   #842
_P2DIV			Near   MYCSEG:02AB		   #1095
_PMUL			Near   MYCSEG:029B		   #1074
_POP			Near   MYCSEG:0243		   #831
_PUSH			Near   MYCSEG:01C9		   #517
_PUSHX			Near   MYCSEG:019F		   #401
_RDROP			Near   MYCSEG:025B		   #925
_RDROPX			Near   MYCSEG:012F		   #214
_RET			Near   MYCSEG:0199		   #377
_RLDBP			Near   MYCSEG:020D		   #696
_RLDP			Near   MYCSEG:0213		   #716
_RSPLD			Near   MYCSEG:024B		   #863
_RSPST			Near   MYCSEG:01AB		   #437
_RSTBP			Near   MYCSEG:01FF		   #659
_RSTP			Near   MYCSEG:0205		   #677
_SKIP			Near   MYCSEG:01E3		   #604
_SLSKIP			Near   MYCSEG:01F1		   #643
_TARY			Near   MYCSEG:011B		   #131
_TR0			Near   MYCSEG:0139		   #240
_TR1			Near   MYCSEG:0143		   #257
_ULESS			Near   MYCSEG:0267		   #955
_WARY			Near   MYCSEG:0121		   #158
_XA			Near   MYCSEG:022B		   #778
_XOR			Near   MYCSEG:02B5		   #1113
_XR			Near   MYCSEG:0225		   #763
_ZEQ			Near   MYCSEG:0263		   #943

Macro Name						   Cref	(defined at #)

ALIGN_							   #52	104  117  126  135  144	 153  162  174	184  198  209  223  235	  +
							   252	270  286  303  316  326	 343  372  385	396  408  420  432  444	  +
							   456	473  488  500  512  532	 543  557  572	586  599  613  638  654	  +
							   672	691  711  735  758  773	 790  806  826	837  858  871  884  897	  +
							   920	938  950  969  981  1002  1019	1031  1042  1069  1090	1108  1124
CLR							   #48	276  632
D_TO							   #38	364  464  522  957  1009
JMPS							   #3  170  194	 205  217  231	248  264  282  299  339	 392  404  416	  +
							   428	440  452  484  496  508	 528  539  553	595  609  620  650  663	  +
							   687	701  731  754  769  783	 833  915  928	934  946  977  996  1028  +
							   1038	 1065  1086  1104  1120
L_							   #65	116  269  285  325  342	 1123
P_							   #58	103  125  134  143  152	 161  173  183	197  208  222  234  251	  +
							   302	315  371  384  395  407	 419  431  443	455  472  487  499  511	  +
							   531	542  556  571  585  598	 612  637  653	671  690  710  734  757	  +
							   772	789  805  825  836  857	 870  883  896	919  937  949  968  980	  +
							   1001	 1018  1030  1041  1068	 1089  1107
Turbo Assembler	 Version 3.2	    12/22/19 11:42:07	    Page 24
Symbol Table



RCHG							   #44	353  988  994
R_TO							   #28	380  679  698  718  748	 750  766  780	797  846  913  1051  1078 +
							   1099	 1117
SKIPA							   #7
SKIPB							   #11	854  867  880  893
SKIPR							   #15	242  259  567  964
TO_D							   #32	626  720  742  907
TO_R							   #24	519  752  802  848  852	 865  878  891	904  1060
X							   #20	312  355  365  368  465	 468  523  526	627  630  721  724  743	  +
							   746	844  850  908  911  958	 961  1010  1013  1049	1063  1076  1097  +
							   1115

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

MYCSEG			16  02BA Para	none		   #89	91  91	91  91
