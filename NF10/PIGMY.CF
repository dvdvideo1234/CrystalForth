def word (delim=" ")
def abort (s)
def code (name, s)
def dpush (*items)
def dpop(n=1)
def rpush (*items)
def rpop(n=1)
def interpret(s)
def assemble (s)
def doCol()
def isNumber(s)
def lit(s)
def slit(s)
def dotList(lst,ending="")
CODE .    print(dpop(),end=' ')  END-CODE
CODE CR   print()                END-CODE
CODE "    dpush(str(word('"')))  END-CODE
CODE +    a,b = dpop(2); dpush(a+b)  END-CODE
CODE 1+     a = dpop();  dpush(a+1)  END-CODE
CODE -    a,b = dpop(2); dpush(a-b)  END-CODE
CODE *    a,b = dpop(2); dpush(a*b)  END-CODE
CODE /    a,b = dpop(2); dpush(a/b)  END-CODE
CODE DROP  dpop()                      END-CODE
CODE DUP   dpush(tos())                END-CODE
CODE SWAP  a,b = dpop(2); dpush(b,a)   END-CODE
CODE OVER  a,b = dpop(2); dpush(a,b,a) END-CODE
CODE .S    dotList(_stack)             END-CODE
CODE .RS   dotList(_rstack)            END-CODE
CODE R@    dpush(_rstack[-1])          END-CODE
CODE PUSH  rpush(dpop())               END-CODE
CODE POP   dpush(rpop())               END-CODE
CODE 2DUP   a,b=dpop(2); dpush(a,b); dpush(a,b)  END-CODE
CODE 2DROP  dpop(2)                              END-CODE
CODE .H   print("%x" % dpop(),end=' ')  END-CODE
CODE EMIT        print(chr(x), end='')  END-CODE
CODE COMPILER global _context    _context = _compiler   END-CODE
CODE FORTH global _context _context = _forth    END-CODE
CODE WORDS for w in _context.keys(): print ("%s " % w, end='') END-CODE
CODE COUNT  dpush(len (tos()))              END-CODE
CODE TYPE  s,n = dpop(2); print(s[:n],end=' ') END-CODE
CODE BL     dpush(' ')                     END-CODE
CODE WORD   w = word (dpop()); dpush(w)    END-CODE
CODE :      doCol()                        END-CODE
CODE BLOCK  n=dpop(); dpush(getblock(n))   END-CODE
CODE LOAD   x=dpop(); load(x)              END-CODE
CODE BYE    raise ByeException             END-CODE
CODE OPEN openblocks (dpop()) END-CODE
CODE VARIABLE w = word() variables[w] = 0 code (w, " dpush('%s')" % w) END-CODE
CODE ABORT  abort (dpop()) END-CODE
CODE QUIT global _rstack END-CODE
CODE @ dpush(variables[dpop()]) END-CODE
CODE ! val,varname = dpop(2) variables[varname] = val END-CODE
: ?   @ .  ;
CODE AND a,b=dpop(2) dpush(not( not(a and b))) END-CODE
CODE OR a,b=dpop(2) dpush(not( not(a or b))) END-CODE
CODE NOT    a=dpop();    dpush(not a)    END-CODE
CODE XOR a,b = dpop(2) dpush (not (not or (b and not a) ))) END-CODE
CODE ."   dpush(str(word('"'))); COUNT(); TYPE()  END-CODE
CODE "     slit(word('"'))   END-CODE
CODE ."    slit(word('"')); assemble ("COUNT(); TYPE()")  END-CODE
CODE (     word(')')         END-CODE
CODE ;;     assemble ("return()")   END-CODE
CODE EXIT   assemble ("return()")   END-CODE
CODE IF global _tab assemble ("if dpop():") _tab += 1 END-CODE
CODE ELSE  global _tab  _tab -= 1  assemble ("else:")  _tab += 1 END-CODE
CODE THEN  global _tab  _tab -= 1 END-CODE
CODE BEGIN  global _tab  assemble ("rpush (0)")  assemble ("while not rpop():") _tab += 1 END-CODE
CODE UNTIL  global _tab  assemble ("rpush(dpop())")  _tab -= 1 END-CODE
CODE AGAIN  global _tab  assemble ("rpush(0)")  _tab -= 1 END-CODE
CODE WHILE  global _tab  assemble ("if not dpop():")  assemble ("  rpush(-1)")  assemble ("else:")  assemble ("  rpush(0)")  _tab += 1 END-CODE
CODE REPEAT  global _tab  _tab -= 1 END-CODE
CODE FOR  global _tab  assemble ("for I in range (dpop()-1,-1,-1):")  _tab += 1 END-CODE
CODE I  assemble ("dpush(I)") END-CODE
CODE NEXT  global _tab  _tab -= 1 END-CODE
: THRU OVER - 1+ FOR DUP I + LOAD NEXT  DROP  ;
CODE =   a,b = dpop(2); dpush(a == b)  END-CODE
CODE >   a,b = dpop(2); dpush(a > b)   END-CODE
CODE <   a,b = dpop(2); dpush(a < b)   END-CODE
CODE <=  a,b = dpop(2); dpush(a <= b)  END-CODE
: 0= ( n - f)  0 = ;
