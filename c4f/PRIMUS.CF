\ REDEFINITIONS AND FORWARD DEFINITIONS ---------------

'  (JUMP   =:  (DEF
\ =! |LASTH

\ EMIT TO_METHOD CHANGED

   -1 CONST TRUE
0  QUAN  CNTC

: 2!- TWICE
: !- 2- PUSH CALL POP; THEN
: !I J 
: ! PUSH POP!; 
: ON  TRUE SKIP
: OFF 0 
: SWAP! SWAP ! ;  

: @I J @ ;
: @ISTR J STR ;
: DROP| EX
: .; DROP;
: NIP| EX NIP ;   
: C, |H  
: C!+ PUSH C!R+ POP;
: RANGE>S 1+
: OVER- OVER
: - NEG
: + +2/ DROP; ,<
 
: @+ PUSH @R+ POP; 
: @2 @+ @ ;
: 0<>; 0; 
: EXIT RDROP;
: ZBLK 0      ,<  0 VALUE  BLK  
: `EL? EX BLK 0<>; 
: `\ |LTIB DUP 0; 1- 
: L/ (@&; ,< -64 ,
: EMT! (LIT BE (SET2 (VAR
: EMIT  BE  AT CNTC ++ ;
: |C. EX EMIT ; 
: |SPC EX 
: SPC  |C. ,<     32  CONST BL
 
>, |C. ,<         '`  CONST  '`' 

\ COMPILER  ========================================
 
: ORG! H - ,<    0 VALUE HOFS
TO' H  =: OBJ! 

HERE >, (D#0 @2 
: WITHIN OVER- PUSH - POP U< ; \ N: `BREL? -128 , 128 , 
=, PRNTBL 32 , 240 ,

: ((0"    0=                
: ((A"    ("SKIP PUSH  (IF EXIT
: ((;"    POP
: @ERR NOP ABORT

@R+ @R+
: `WITHSTK  WITHIN 0= (JUMP AT ((;" ,<
: `RP AT `WITHSTK `R_BTM  `R_TOP ,< 5 C, ,"RSTK?" 2ALIGNED
: `SP AT `WITHSTK `S_BTM  `S_TOP ,< 5 C, ,"DSTK?" 2ALIGNED
: `STACK TR-| RP@  vPIN  `RP   SP@ 2- `SP     ;; 
: `WITHRNG SWAP @2 `WITHSTK  ;
: `>PUSH `WITHRNG ,< 5 C, ,"FULL?"  2ALIGNED
: `>POP  `WITHRNG ,< 6 C, ,"EMPTY?" 2ALIGNED

>, (D#1 PUSH 
: >PUSH @ISTR 2- `>PUSH @I !- POP!;
: >POP  @ISTR    `>POP  @I @+ POP!;
 (VAR3 AT >PUSH 
: HNDLS >POP ,< ' `FLS 40 + , ' `FLS  , ' `FLS  40 + ,
: STK! DUP PUSH 4+ @ POP!;
 (VAR3 AT >PUSH 
: CSTK> >POP ,< ' `FWD 40 + , ' `FWD  , ' `FWD  40 + ,
: STK?  DUP PUSH 4+ @ POP @ - 2/ (;
 (VAR3 AT >PUSH 
: <CSTK >POP ,< ' `BCK 40 + , ' `BCK  , ' `BCK  40 + ,
: HTOP AT HNDLS @ @ ;
: `STK> CSTK>
: `STK>|  EX TO CSTK> ;    
: `<STK <CSTK
: `<STK|  EX TO <CSTK ;
: CSWP> `STK> `STK> SWAP ; : <CSWP `<STK `<STK SWAP ;
: `<CLR> AT CSTK> STK!  AT <CSTK STK! ;

: `MRK> H  TO CSTK>       \ MARK>
: Z, 0 SKIP 
: ,| EX  , 
: LASTH! H ,<
0 VALUE LASTH

: |LASTH EX LASTH! ;

: `<RLS <CSTK TO LASTH! ; \ RELS  , : LASTH! H ,<

: HERE H  
: R>T HOFS + ; 
: T>R HOFS - ; 
: `<MRK HERE TO <CSTK LASTH! ;  \ BEGIN

>, EX  \ THEN|
: `RLS> LASTH! CSTK> HERE SWAP! ; 
 
: ODDH? !"ODDH?" ;;
: HODD HERE (| ODDH?  DUP \ H TO FIX HERE 
: ODD (@&; ,< 1 , 

: N??| EX 
: N??  0=
: ??   ((A" ,< ,T ? >, ;;

: IXEC J
: EXECUTE PUSH; 
 @R+ @R+
: |SAFE! A! @!A XA PUSH A@ EXECUTE POP POP!;
: ?XEP+| DUP 1+ AHEAD 
: ?XEP-| 1-
: ?XEP| DUP     THEN
: XEP| XR EXECUTE POP; 
: A-L XEP|  
: I- J - ;
: S+L XEP| 
: A+L XEP| 
: I+ J + ; 
: (<RNG| RANGE>S A+L SKIP
: (RNG| RANGE>S  SKIP
: ASTR| A!
: STR| XR POP    
: .TIMES DROP|   
: TIMES PUSH XR  
: TIMES| (FOR CALL BEGIN J EXECUTE THEN (NEXT RELS<
 RDROP RDROP; 
: NUP XEP| DUP ;
: CMOVE SWAP  
: S>M ASTR| CSTR 
: C!A+ XA C!R+ XA ;
HERE >, (D#0 @ 
: FILL ASTR| PUSH A@ C!R+ POP; ,<
N: ERASE 0 ,  N: BLANK 32 ,  DROP


>, `EL?
: TOKEN? N??|
: TOKEN  BL  [ : ?C@ DUP C@ ]   
: WORD PARSE [ '`' C!A+ ]
: S>" TBUF
: S>"! ?XEP| NUP C!+ S>M ;
: ">Z CSTR 
: S>Z S>" 0 C!A+ 1+ ; \ TO S TBUF

: =" TOKEN?
: " ?C@ 1+ T MPUSH ;

: ==: DUP ,| 
: =H HODD  \ HENTRY ; H=:  _HER_E  !!!\ _@HERE 
: `=: 0 TOKEN?               \ ; =:  ;  DW _VDBG,3
: (=:   NOP " 2!- TO T ;  \  _ENTRYZ   _@SAME  DW _
   
  
\ ============== COMPILER ===================

: TARG: `<CLR>  \ TNOP TO FIX WITH <CLR>
: TARG:C =H LASTH! \ L_ _COLONC  :`   DW _HENTRY
: >, TO FIND  TBUF ++ CFND TBUF -- SKIP? (; CFND 2+ ;

\ ============== EVAL ===================

: MEMTI| A+L 0   
: TI| BLK XR LTIB PUSH   ETIB PUSH PUSH
 CALL EX POP POP POP THEN    TO BLK TO LTIB TO ETIB 
: /BLK BLK 0; 0 TO ETIB ; 

: (MAC (D#0   AT |SAFE! VAL >,  VAL FIND 
: SEVAL CSTR          \ SEVAL
: `EVAL MEMTI|        \ FIX WITH MEMTI|
BEGIN   `STACK TOKEN (IF .; FIND  \ FIX WITH `STACK
: @OPER  NOOP OPER[] @EXEC AGAIN  ,<

: :(;   (MAC ,< ,T (;     2ALIGNED
: :MAC  (MAC ,< ,T (MAC   2ALIGNED
: :VAR3 (MAC ,< ,T (VAR3  2ALIGNED
: :SET2 (MAC ,< ,T (SET2  2ALIGNED
: :CON  (MAC ,< ,T (CON   2ALIGNED
: :JUMP (MAC ,< ,T (JUMP  2ALIGNED
: :!"   (MAC ,< ,T (!"    2ALIGNED
: :."   (MAC ,< ,T (."    2ALIGNED
: :"    (MAC ,< ,T ("     2ALIGNED
: :@"   (MAC ,< ,T (@"    2ALIGNED
: :/"   (MAC ,< ,T (/"    2ALIGNED
: :,"   (MAC ,< ,T (,"    2ALIGNED
: TREPEAT TO `RLS> \ THEN|
: TAGAIN :JUMP `<RLS ;    

: QUAN  :VAR3 
: VALUE :SET2 
: CONST TO =H  :CON
; 
: VQUAN   :VAR3
: VECTOR  :SET2 
: DEFER TO =H :JUMP
; 

\ ---------- INIT INTERPRETTER ----------------

: @INI H>T MSB (| SEVAL TO @INIT
: `@ABINI  NOP SKIP

\ ============   INTERPRETTER   ==============

: TARG; \ L_ _SEMICO
: @SEMICO :(;  \ ;  (;,  _LPAR,TO_+_FIND      ; [`
: TARG,<  TO FIND  : @LPAR  vT FND ;         

\ =============   VARIABLES  ==============

: BLK>SCR BLK ,<  0 VALUE  SCR
0  DEFER BLOCK

: MCLR (LIT `MACADR  ,<    
' `MACADR VALUE MOBJ   
 
\ KEY TO_METHOD CHANGED
: KEY! (LIT BK (SET2 (VAR
: KEY BK ;;

ZDO VALUE 5 TIMES _FL _AX _BX _CX _DX 
 -1 VALUE SCRH
 
: |HLD CALL EX (SET2 THEN ,<       0 CONST HLD

\ =============   CONSTANTS  ==============

: `bs  DUP 0; 1- CALL SPC THEN 
       |C. ,<      8  CONST  bs       
: `LF  |C. ,<     10  CONST  lf       
: `CR  |C. ,<     13  CONST  cr 
: `C-  |C. ,<     '-  CONST  c- 

: "."| CALL EX THEN
: `C"  |C. ,<     '"  CONST  c"
1  CONST  ONE
HERE 2- =: BYE 
  
: EOS! bs (SET2 ,<   0 VAR EOS 

: `MASK| EX 1- 
: AND NAND NOT ;
>, `MASK| ,<  \ USED IN fLUSH.CF
  4 CONST NBUFS    
: W>B `MASK| ,<
256 CONST 1B
\ >, `MASK| ,<
 16 CONST 1H

' `TIB CONST TIB
\ : 1L& `MASK| ,<
  64  CONST 1L

>, `MASK| ,<  \ USED
1024  CONST 1K
 
\ ============ PRIMITIVE METHODS ===============

: SWAP| EX SWAP ;

: T> T
: DEA> 4+ 
: NAME> CSTR +  ;

\ : NOP;  ;

: I J ;
: ("SW ("SKIP B?" 1+ 
: (XARY 2* POP + @ PUSH;
: S1- U1+
: 1-; 1- ; 
: EOSZ DROP|
: EOS? EOS
: @0<>? A! 0 @!A ;
: |ROT EX
: ROT -ROT -ROT ;

: TUCK DUP -ROT ;
: W>BB SWAP|
: SPLIT DUP W>B XEP| HW>B ;
: 2DUP OVER OVER ;

\ : WITHIN OVER- PUSH - POP U< ;

\ COMPILER BASIC PRIMITIVES  ------------ 

: `SOURCE BLK 0; ETIB 0<>; BLK BLOCK 1K + TO ETIB ;
: C!- 1- XEP|
: C!I J 
: C! PUSH C!R+ RDROP; 
: 31& (@&; ,< 31 ,  
: |@! XR PUSH J @ EX POP!;
: XOR! |@! XOR ;
: SPACES TIMES| SPC ;    
>, @R+
: = XOR 0= ;

\ STRINGS ---------------------------

: FND? TOKEN? N??| 
: TFND T  FND ;
: ALIGN| EX    
: ALIGNED |LASTH  HERE ODD 0; 0 C, ;
: ((" ("SKIP ;; 
' ALIGN| VECTOR  v",

: ,T BL
: `", WORD ?C@ N?? 
: ", CSTR v", DUP C, 
: S, STR| CSTR C, ; 
: M: ';  
: ?M: AT |SAFE! ,< 0 , VAL' HOFS , >,
   CALL =H :MAC `", THEN 
: <M> MOBJ   |H TO MOBJ ;   


: T. T   
: WID.  4+ 
: ID. |SPC 
: ". CSTR        
: TYPE STR| CSTR EMIT ; 
: ((." ("SKIP  ". ;;  

: XY? 1K LTIB - ;
: ?|CR 0; 
: |CR EX 
: CR TO cr TO lf 0 TO CNTC ;
: `OK ."_ok" CR .">>_"  ;;  
: `. EMT! KEY! CR TBUF ID. NOP ID. CR BLK 0;  \ ERRA
  BLK>SCR ZBLK XY? 
: >XY TO 1K ,< 0 VALUE XY

\ NUMBERS ---------------------------

: U/ NIP|    : U/MOD A! 0 
: (UM/ SWAP| TWICE TWICE -/ -/ -/ -/ ;
: UMOD U/MOD DROP;
: UM/MOD U/MOD XEP| (UM/ ; \ ( UD U - U UD )

: 9>? 9 SKIP
: OPT? ONE OVER U<  (@&; ,< 7 , 
HERE >, (D#0 @  
: BASE! 2- W>B 2+ ,<
  10 VALUE BASE 
N: `DECI 10 , N: `BIN 2 , N: `HEX 16 ,  DROP

: `BLOCK [ 1B + ]
: 1K* 1K
: U* DROP|
: UM* A! 0 TWICE TWICE +* +* +* +* ;
' `BLOCK VAL' BLOCK T!

: DIG? '0 - 9>? - DUP BASE U< ;
>, (PNT2 ,<  0 DEFER @STATE 
: `DIG# BASE! 0 ;
: `ERRN 0& A! ;
: `DIG^  TO @STATE  31& SKIP
: `ADIG' TO @STATE  
: `MUL+  PUSH BASE U* POP +
: `DIGICHK  TO @STATE A@ OPT? NIP    IF
   ("SW ,< 5 C, '' C, '^ C, '# C, '$ C, '%  C, 2ALIGNED
  >, CALL `ADIG' `DIG^ `DIG# `HEX `BIN  THEN
  A@  THEN DIG? (IF `ERRN  `MUL+ ;
: S1+ PUSH  
: `CONV; 1- POP
: 1+; 1+ ; 
: `-? OPT? 0; OVER C@ c- = 0; S1- EX XEP| NEG ;
: "># CSTR
: S># `DECI 0 -ROT DUP (IF 1-; `-?  NIP| 
: CONV  `DIGICHK FOR PUSH C@R+ J 1+ A! @STATE POP 
    A@ (IF `CONV; NEXT 1+ ;
    
 INCLUDE UPACK.CF  \ 230 B

>, EX
: ">NUM  TR-| STR? SKIP? `STR@ 
: `"># "># ?? ;  

: ">NUMC  TR-| STR? SKIP? `STR@, `">#
: #, ,|  
: :LIT  (MAC ,< ,T (#     2ALIGNED

: S6 (| CALL XEP| XEP| XEP| THEN 
: S3 |SPC CALL TWICE THEN ROT DUP 
: H. W>BB CALL 
: B. |SPC THEN  W>B 1H U/MOD TWICE 
: DIG. |C. 
: ALPHA 9>? + (@+; ,< '0 ,   \ FOR NUMOUT 

: . DUP 0< IF NEG TO c- THEN  
: U. `DECI SKIP 
: .H `HEX SKIP
: .B `BIN |SPC 
: `U.  BASE U/MOD  SKIP? RECURSE DIG. ;

>, EOS! : `CR2 RDROP RDROP; 
: `CH A@ PRNTBL 0; A@ SKIP 
: `tab BL DUP A! EMIT 2DUP + A@ SWAP! 1+ ; 
: `CHTAB ("SW ,< 5 C, ^H C, ^I C, ^M C, ^Z C, 127 C, 
>, `CH `bs `tab `CR2  TO `CR2 NOOP 
 |SPC : ACCEPT PUSH 0 BEGIN KEY `CHTAB DUP I = UNTIL EXIT ;

: ,' ,| 
: ' FND?
: @DEF? @2 
: UNDEF? ODD !"UNDEF?" ;;
HERE >, (D#0
: @ADR+  @ (| + 
: ADR' '  TO ODD ODDH? ; 
N: TO' -2 ,  N: AT' -4 , N: VAL' 2 , DROP
\ HERE >, (D#0 @ADR+ PUSH; ,<
\ N: TO -2 ,   N: AT -4 , N: X:` 0 , DROP 
HERE >, (D#0 @ADR+ , ;
N: FTO` -2 ,  N: FAT` -4 , N: FVAL` 2 ,  DROP 
 

\ IO  -------------------------------------

\ INTS DOS, FILES & VIDEO

: `fsk 1K TUCK UM* SCRH EX SCRH 
: IO? _FL ODD !"IO?" ;;
: `File| ">Z EX IO? _AX ;
: XDROT XEP| 
: DROT |ROT  
: D0 0 0 ;
HERE >, (D#0 C@ (INT# TO _FL TO _AX TO _BX TO _CX TO _DX ;
N: (DOS  $21 ,  
=, (VID  $10 , 

: THRU (RNG| ?XEP+| 
: LOAD TR-| 1K OVER TI| VAL `EVAL ; 

: `FTOP| TO HNDLS HNDLS EX TO HNDLS ;
:  `RW IXEC ! IXEC ONE RDROP; ,<
HERE >, (D#0 @ DROT (DOS ;
>, `FTOP| 
: FOPEN `File| ,< 
N: Fopen $3D02 ,
>, `FTOP| 
: FCREATE `File| ,< 
N: Fcreate $3C00 ,
\ : LineIn OVER ! DUP [ 1+ CSTR ] ,<
\ N: `LineIn2 $A00 ,
=, StdPut   $200 ,  \ 

HERE >, (D#0 @ (DOS ;
>, `RW  (VAR3 ,< N: Fread  $3F00 , 0 ,
>, `RW  (VAR3 ,< N: Fwrite $4000 , 0 , 
: `RWPOS `fsk ,<
=, Fseek  $4200 ,

HERE >, (D#0 @ XDROT (DOS ; 
N: Fsize $4202 , 
N: Fpos $4201 , 
N: Fcut $4000 , 
: `ALLCLR `<CLR> \ 0 TO LTIB
: `CLSD AT HNDLS STK? TIMES| \ CLOSES ALL FILES 
: HCLOSE HNDLS ,<
=, Fclose $3E00 , 

: StdGet 0 
: FKEY  ^Z AT Fread ROT Fread TO Fread @ ;
: ERRput 2  
: FEMIT SWAP AT Fwrite ROT Fwrite ;
: FGet HTOP FKEY ;

: WBLK `RWPOS Fwrite IO? ;
: RBLK `RWPOS Fread  IO? ; 

: @OPENI| TO FOPEN EOSZ @R+ (LIT KEY |SAFE! ;
: INCLUDE TO TOKEN?  : NCLUDED  @OPENI| FGet   SKIP
 BEGIN `EVAL  CR TIB 1L ACCEPT EOS? UNTIL `EVAL  HCLOSE ;
: FTYPE TO TOKEN?  @OPENI| FGet  AT |SAFE! BE EMIT
  BEGIN  CR FIB 1L ACCEPT EOS? UNTIL  HCLOSE ;

\ INCLUDE DEBUG.CF  \ 530

