\ PRIMITIV'S MACROSES 
MCLR 
PRUNE 
<M> : MMRK ;  <M> 

M: :0>   (D#0;         
M: :1>   (D#1;         
M: :2>   (D#2;  
M: :FOR  (FOR;
M: :NEXT (NEXT;
M: :code (code;     
M: :LARY (LARY;     
M: :WARY (WARY;
M: :BARY (BARY;     
M: :XARY (XARY;
M: :VAR  (VAR; 
M: TRICE|` CALL TWICE| THEN; 
M: TWICE|` CALL THEN; 
M: JUMP|` (| MARK>; 
M: RANGE|` (RNG| DXEP+|;  
M: <RANGE|` (<RNG| TO DXEP|; 
M: ITER|` STR| DXEP+|;  
M: <ITER|` VAL (<RNG| TO DXEP|; 
M: IF-` (IF- MARK>;  
M: IF` (IF MARK>;
\ M: -IF` 1+ IF-; 
M: -IF` (-IF MARK>; 
M: UNTIL` (IF <RELS; 
M: UNTIL-` (IF- <RELS; 

<M> 
>, 2* 
: `ARY| 2* 1+ 2/ :` EX |LASTH 
: `CLARYW TIMES| Z, 
; 

\ : T;; :(RET AT <CSTK ITEMS? AT CSTK> ITEMS? + 0<>; T,< ;
: `x??x; EX ??# 
: `(@H, @H- vADJ 
; 
: `?? `<; `x??x;
: `H@:? H 2- @ vISW? H LASTH <> AND 
; 
: T:; `?? :(GO; <RELS ; 
: T?; `??
: TUNTIL :(IF <RELS ; 
: `; `H@:? T;; 0; UNW `(@H, TO <CSTK
: TAGAIN :(JUMP <RELS ;    
: T;THEN `; RELS> ;

\ : (` : ( ')  PARSE 2DROP ;    \  COMMENTS REMARKS

\ : RB, >RB RB? C, ; 
\ HELPERS
: .( ') PARSE TYPE ;;
: `CLARYSET Z, MARK>` SWAP `CLARYW THEN` ; \ SET
: DOES>` :code` (SKIP 
: 0#> D# :0>` ; 
: 1#> D# :1>` ; 
: 2#> D# :2>` ; 
: `DO POP ADR' (SET2 
: `vDO (JUMP ,< Z, 
: DO# `DO TOKEN? ">NUM `vDO ; 
: ZDO `DO 0 `vDO ; 
: DO `DO `vDO ; 
: DO' `DO ' `vDO ;
: FMLY AT `vDO DROP| STR| ?|OVER+ `vDO ;
: FML# AT `vDO TIMES| VAL DO# ;

\ BRANCHES
: ELSE` |THEN  TO SWAP  
: AHEAD` :JUMP` MARK>` ; 
: REPEAT` AGAIN` THEN` ;
: WHILE` TO SWAP IF` ;
: FOR-` :JUMP` SKIP 
: FOR` :FOR` MARK>` BEGIN` SWAP ;
: NEXT` THEN` :NEXT` <RELS` RDROP` ;
: NEXT-` THEN` UNTIL-` ;
0#> C@, >RW , ; 
?:, CAL#, $E8 ,
 :, JMP#, $E9 , 

\ FIELD TESTING OF MACROSES
: PRBA :code :0> :1> :2> :IO; :0" :!" :" :." \ "PRIMITIV'S
:VAR :VAR3 :SET2 :CON 
:BARY :LARY :WARY :XARY 
POP SP@ !R+ @R+ XR XA SKIP +2/ DUP J D2/ NOT PUSH 0= +* U< NAND
U1+ NEG 0< -/ A@ RP@ EX 2/ DROP RDROP; DROP;  RDROP 
TROFF; OVER :JUMP ;; :FOR :NEXT
TRICE| TWICE| RANGE| <RANGE| BEGIN UNTIL JUMP| THEN IF- THEN 
BEGIN UNTIL- FOR- NEXT-
-IF THEN IF THEN ,<  \ TEST PRIMITIV'S MACROSES
?CSP  \ CHECK AGAINST STACK CHANGE
FORGET PRBA  

\ MAKERS 
: CREATE-- H TO HLD [ T 5+ @ #'-'- = 0; EX HLD TO H |T >DEA ]
: VARIABLE 0
: VAR ,|  
: CREATE =H :VAR`
; 
: ENTRY, ,' Z, \ H TO CSP
: TOK, TOKEN? CSTR AT S, ;  \ CSP ID. TO BK ;
: `MKR <BUILD , EX ,' ;       
: `W, STR , ;
: 3MKR `MKR , , DOES>  `W,    
: `W: `W, 
: `(:  :` `W, @EXEC ; 
: 2MKR `MKR , DOES> `W: ;     
: 1MKR `MKR DOES> `(: ;
: BARY VAL `ARY| :BARY` ; 
: WARY     `ARY| :WARY` ; 
: LARY TO  `ARY| :LARY` ; 
: QARY AT  `ARY| :QARY` ; 
: XARY `ARY| :XARY` ; 
: BCONST (, |C. CONST ; 
: `ALU A-L XEP| U1+ ;
: ADIG 0 -ROT SKIP BEGIN `ALU 2DUP U< UNTIL
    DROP SWAP '0 + EMIT ;
: `. 10000 ADIG 1000 ADIG 100 ADIG 10 ADIG 1 ADIG DROP SPC ;
: BYTE. HERE ' -
: BYTES? SPC `. ." BYTES" ;
: P=: ALIGNED HERE 1+ =: CSP! ; 
: EXPORT -1 C: =: ;
: EXPORTED FND?? 2@ FND?? DUP @ NOT A" DEFINED"  2! ;
P=: BRK $CC C, ' (NOP 1- JMP#,
: |VALUE :` CALL` EX` :SET2` THEN` CONST ;  
CR .( MACRO ) BYTE. MMRK
<M> 
