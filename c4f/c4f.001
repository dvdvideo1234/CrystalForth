; COMMANDS      OF INTERPRETER
; JUMP EXIT IF NEXT push pop J DUP !R+ @R+ xR XA +2/ +* AND XOR

locals  @@

pd  equ dword ptr
pw  equ word  ptr
pb  equ byte  ptr

TO_     =  -1
AT_     =  -2
;VL_     =

JMPS    MACRO LBL
  jmp   SHORT LBL
        ENDM

SKIPA   MACRO
  DB    03DH
        ENDM

SKIPB   MACRO
  DB    03CH
        ENDM

SKIPr   MACRO reg
  mov   reg,0
  org   $-2
        ENDM

X       MACRO
  xchg  Rsp,DSP
        ENDM

TO_R    MACRO  REG
  PUSH  REG
        ENDM

R_TO    MACRO  REG
  POP   REG
        ENDM

R2P     macro
  scasw
        endm

I2P     macro
  INC   I
  INC   I
        endm

@I2P   macro  REG
  MOV  REG,[I]
  I2P
        endm

cf_to   macro  reg
  sbb   reg,reg
        endm

DROP    macro
  LODSW
        endm

ADUP    macro  REG
  LEA   DSP,[DSP-2]
  MOV   [DSP],REG
        endm

SWAP    macro
  XCHG  [DSP],T
        endm

rchg    macro   reg
  xchg  ax,reg
        endm

ZTEST   MACRO   REG
  OR    REG,REG
        ENDM

NIP     MACRO   REG
  RCHG  REG
        DROP
        ENDM

ALGN  MACRO  FLAG
        IF ($-START+FLAG) AND 1
        NOP
        ENDIF
        ENDM

N       MACRO NAM
  ALGN  0
  NAM   = (($-START+100H) SHR 1)+8000H
        ENDM

L       MACRO LBL,L@
  ALGN  0
L@:
  LBL   = ($-START+100H) SHR 1
        ENDM

; REGISTERS     for interpretter
I   = BX  ; INSTUCTION POINTER
RSP = SP  ; RETURN STACK POINTER
WR  = DI  ; WORK ADDRESS REGISTER
DSP = SI  ; DATA STACK POINTER
FPP = BP  ; FRAME PARAMS POINTER
T   = AX  ; DATA STACK TOP REGISTER
AR  = DX  ; ADDRESS REGISTER
W   = CX  ; WORK REGISTER

MyCseg  segment para  use16

        assume cs: MyCseg,  ds: MyCseg, ss: MyCseg, es: MyCseg

        org 100h

@TBUF   = -256          ;  256
@TIB    = @TBUF  * 2    ;  256
                        ;  512 B FSTACK
@R_TOP  = @TIB   * 2    ; 1024 B RSTACK
@S_TOP  = @R_TOP * 2    ; 2048 B DSTACK
@VOCTOP = @S_TOP * 2    ; 4096 B = 4 BUFFERS * 1024 B

Start   Label byte

 L _ABORT,@ABORT
  mov   bX,1000h     ; only 64k allocate
  mov   ah,4ah
  int   21h
  MOV   RSP,@R_TOP-2
  MOV   DSP,@S_TOP-2
  CALL  @RTN
@MAINLP DW 0,0,0,0

; L _ENTER,@ENTER
;        ADUP    T
;        PUSH    FPP
;        MOV     FPP,SP
;        @I2P    CX
;        XOR     AX,AX
;        XCHG    AL,CH
;        SUB     SP,CX
;        SUB     SP,CX
;        MOV     WR,SP
;@ENT:
;        REP     MOVSW
;        XCHG    CX,T
;        INC     CX
;@ENT2:
;        PUSH    T
;        LOOP    @ENT2
;        CALL    @DROP1
;        DW _LEAVE,_EXIT ; RETURN
;
; L _LEAVE,@LEAVE
;        MOV     SP,FPP
;        POP     FPP
;        JMP     @MAIN
; L _SETV,@SETV
;        @I2P    WR
;        JMPS    @_SETV
;@SV8:   JMPS    @SV1
;@SV7:   JMPS    @SV1
;@SV6:   JMPS    @SV1
;@SV5:   JMPS    @SV1
;@SV4:   JMPS    @SV1
;@SV3:   JMPS    @SV1
;@SV2:   JMPS    @SV1
;@SV1:   SUB     WR,OFFSET @SV1+2
;@_SETV:
;        MOV     [FPP+WR],T
;        JMPS    @DROP1
; L _GETV,@GETV
;        @I2P    WR
;        JMPS    @_GETV
;@GV8:   JMPS    @GV1
;@GV7:   JMPS    @GV1
;@GV6:   JMPS    @GV1
;@GV5:   JMPS    @GV1
;@GV4:   JMPS    @GV1
;@GV3:   JMPS    @GV1
;@GV2:   JMPS    @GV1
;@GV1:   SUB     WR,OFFSET @GV1+2
;@_GETV:
;        MOV     W,[FPP+WR]
;        JMPS    @WPUSH

;vvvvvv--------------   IO  ---------------
 L _IO,@IO              ; ( IO
        TO_R    AR
        X
        POP     DI
        XCHG    DI,BX
        POP     CX
        POP     DX
        PUSH    DSP
        CALL    DI
        POP     DSP
        PUSH    DX
        PUSH    CX
        PUSH    BX
        PUSH    AX
        cf_to   AX
        X
        R_TO    AR
        POP     WR
;^^^^^^--------------   IO  ---------------
 L _EXIT,@RTN          ; ( EXIT
        R_TO    I
        JMPS    @MAIN
@NEXT:
        POP     W
        DEC     W
        PUSH    W
        JS      @SKIP
 L _BR,@JMP             ; ( (JUMP
        MOV     I,[I]
        JMPS    @MAIN
 L _BR0,@IF              ; ( IF
        OR      T,T
        DROP
        JC      @JMP
 L _SKIP,@SKIP          ; ( SKIP
        i2P
        JMPS    @MAIN
 L _NEXT,@brm            ; ( NEXT
        JMPS    @NEXT

 L _SDIV,@SDIV          ; ( -/
        SHL     PW [DSP],1
        RCL     T,1
        CMP     T,AR
        JB      @_NO_DIV
        SUB     T,AR
        INC     PW [DSP]
@_NO_DIV:
        JMPS    @RTN

 L _PMUL,@PMUL          ; ( +*
        MOV     W,[DSP]
        SHR     W,1
        JNC     @_NO_MUL
        ADD     T,AR
@_NO_MUL:
        RCR     T,1
        RCR     PW [DSP],1
        JMPS    @RTN

 L _XR,@XR              ; ( XR  XCHG
        POP     WR
        XCHG    T,WR
        JMPS    @_XA
 L _nAND,@nAND          ; ( AND
        NIP     W
        AND     T,W
        NOT     T
        JMPS    @MAIN
 L _XA,@XA              ; ( XA
        POP     WR
        XCHG    WR,AR
@_XA:
        PUSH    WR
        JMPS    @MAIN
@_RSTP:
        TO_R    WR
        SKIPB
 L _PUSH,@PUSH          ; ( PUSH
        TO_R    T
@DROP1:
        DROP
        JMPS    @MAIN
 L _RSTP,@RSTP         ; ( !R+
        POP     WR
        STOSW
        JMP     @_RSTP
 L _RLDP,@RLDP          ; ( @R+
        R_TO    WR
        MOV     W,[WR]
        R2P
        JMPS    @_J
 L _J,@J                ; ( J
        R_TO    WR
        R_TO    W
        TO_R    W
@_J:
        TO_R    WR
        JMPS    @WPUSH
 L _POP,@POP            ; ( POP
        R_TO    W
        SKIPA
 L _DUP,@DUP            ; ( DUP
        MOV     W,T
@WPUSH:
        ADUP    T
        XCHG    W,T
 L _NOP,@MAIN           ; ( NOP
        @I2P    WR
        SHL     WR,1
        JC      @NEST@
        JMP     WR
 L _EX,@EX              ; ( EX
        R_TO    WR
@NEST@:
        TO_R    I
        MOV     I,WR
        JMPS    @MAIN
 L _XOR,@XOR            ; ( XOR
        NIP     W
        XOR     T,W
        JMPS    @MAIN
 L _PLAVG,@PLAVG        ; ( +2/
        ADD     T,[DSP]
        MOV     [DSP],T
 L _2DIV,@2DIV          ; ( 2/
        RCR     T,1
        JMPS    @MAIN

MyCseg  ends
        end  Start
