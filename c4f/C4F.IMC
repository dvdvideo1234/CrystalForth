; COMMANDS      OF INTERPRETER  (MINIMAL SET)
; (JUMP (; (IF (IF-   CONTROLS
; push pop J DUP      STACK
; !R+ @R+ xR XA       TRANSFER
; NAND +2/ +* -/      MATH & LOGIC

locals  @@

pd  equ dword ptr
pw  equ word  ptr
pb  equ byte  ptr

TO_   = -2
AT_   = -4
VAL_  = 2

JMPS   MACRO LBL
  jmp   SHORT LBL
  ENDM

SKIPA  MACRO
  DB    03DH
  ENDM

SKIPB  MACRO
  DB    03CH
  ENDM

SKIPr  MACRO reg
MADR = $
  mov   reg,0
  IF $-MADR-2
  org   $-1
  ENDIF
  org   $-1
  ENDM

X       MACRO
  xchg  Rsp,DSP
  ENDM

SWAP   macro
  XCHG  [DSP],TOP
  endm

Z?  MACRO   REG
  OR    REG,REG
  ENDM

CLR    MACRO   REG
  XOR    REG,REG
  ENDM

R2P_    macro   REG
  INC   REG
  INC   REG
  endm

R2M_    macro   REG
  DEC   REG
  DEC   REG
  endm

NIP_   macro
  R2P_ DSP ; LEA  DSP,[DSP+2]
  endm
        
D_TO   macro   REG
  X
  POP   REG
  X
endm

TO_D    macro  REG
  X
  PUSH  REG
  X
endm

R_TO   macro   REG
  POP   REG
endm

TO_R    macro  REG
  PUSH  REG
endm

ALiGN_  MACRO  FLAG
  IF ($-START+FLAG) AND 1
  NOP
  @NOPSCNT = @NOPSCNT+1
  ENDIF
  ENDM
        
@NOPSCNT = 0        

P_  MACRO NAM
  ALIGN_ 0
  NOP
NAM:
  org   $-1
  ENDM

PP_  MACRO NAM,LBL
  P_ NAM
LBL:
  ENDM

L_  MACRO NAM
  ALIGN_  0
NAM:
  ENDM

LL_  MACRO NAM,ADR
  ALIGN_  0
NAM:
  DW ADR
  ENDM

N_  MACRO
  JMP SHORT   @NOP
  ENDM

BUF_ MACRO ADR,LEN
  MADR = MADR - (LEN)
  ADR  = MADR
ENDM
 
VAR_    macro   LBL,DAT
LBL  DW __VAR,DAT
  ENDM

value_  macro   lbl,dat
  DW     __SETVAR
  CONST_ lbl,dat
  endm

QUAN_  macro   lbl,dat
  DW     __VAR3,__SETVAR
  CONST_ lbl,dat
  endm

CONST_  macro   lbl,dat
LBL  DW __cons,dat
  endm

DEFER_  macro   lbl,dat
LBL  DW __defer,dat
  endm

vector_ macro   lbl,dat
  DW     __SETVAR
  DEFER_  lbl,dat
  endm

point_  macro   lbl,dat
  DW __setpnt
  DEFER_  lbl,dat
  endm

entry_  macro ADR,nam
  DW    ADR,0
  nam_  nam
  endm

nam_    macro   msg
  local endstr
  db    endstr-$-1
  db    msg
endstr  label   byte
        endm

; REGISTERS     for interpretter
TOP   = BX  ; DATA STACK TOP REGISTER
TOPL  = BL  ; DATA STACK TOP REGISTER
TOPH  = BH  ; DATA STACK TOP REGISTER
IP    = SI  ; INSTRUCTION POINTER
RSP   = SP  ; RETURN STACK POINTER
DSP   = BP  ; DATA STACK POINTER
AR    = DX  ; ARITHMETIC (ALTERNATIVE) REGISTER
NXT   = [DSP]  ; TO NEXT POINTER
      
WA    = DI  ; WORK ADDRESS REGISTER
;NP    = CX  ; WORK REGISTER
W     = AX  ; WORK REGISTER
WL    = AL  ; WORK REGISTER
WH    = AH  ; WORK REGISTER
