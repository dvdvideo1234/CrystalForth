FORGET TT : TT ;

: BSCAN> W>B PUSH PUSH XCHG DUP AHEAD BEGIN C@R+ J - IF CSWAP>
   THEN UNTIL- : /SCANM1 DROP DUP : /SCANI THEN NOT+ 2EXIT ; 
: SCAN PUSH PUSH XCHG DUP AHEAD BEGIN  @R+ J - /SCANI ?; THEN
 UNTIL- /SCANM1 ;   : BSCAN W>B  BSCAN ;

{ MAKERS }
: `MKR 0 =, , EX : ,' ' , ;   : `W, STR , ;
: 3MKR `MKR , , DOES>  `W,    : `W: `W, : `(: =H `W, @EXECUTE ; 
: 2MKR `MKR , DOES> `W: ;     : 1MKR `MKR DOES> `(: ;

{ DOERS }
: `WITH POP ' ,<  0 VECTOR `DO   : WITHZ `WITH 0 `DO ;
: WITH' `WITH ' `DO ;            : WITH# `WITH >NUM `DO ;
: WITH  `WITH `DO ;              : WITH+ `WITH DUP `DO OVER+ ;
: FAMILY WITH+ SWAP ..TIMES ;    : FAMILY# WITH# SWAP ..TIMES ;

{ DEFINITIONS }
-1 QUAN {LVL
0 VALUE `(LOCATE
0 VALUE `OLDT

: `{?NAMES ,<  @' ?:STR , 4 WARY `NAMES
: `{NAMES "//" "{" "\" "}" BEGIN
    [ 4 -1 `NAMES ! ] 4 TIMES; 2- J `NAMES ! ; ,<
`{NAMES   <CSTK TO H

{ BODY }
' \ =: `\ : `} {LVL  AT {LVL DEC 0<>;  `(LOCATE AT LOCATE 
: `// FOUND 0>=;  H @ TO FOUND ; : `REM/ {LVL 0<>;
: {REM/} H OFF -1 TO FOUND  TO LOCATE TO `(LOCATE PAD OFF ;
: `PAD+ TBUF [ {LVL 0= DROP ?; : PAD+" H INC DROP; PAD XEP;
    CSTR J STR + (MOVM BL SWAP C!+ (;S! ] POP 1 ;
: `{ AT {LVL INC `REM/ LOC! `{?NAMES ?DUP `PAD+ ?; 
    1- [ @ 1 ] ,< 0 WARY `{NAMES:     >, `} `\ `{ `// ,<

: >. TOKEN? ID. ;
' `{ =: {
'  { =: {`

' PARSTK  4 + CONST PARPTR^   : `@PAR @ PARPTR^ @ + ;   
-64 CONST >EACH
0#> `@PAR @ ;  1#> `@PAR ! ;  2#> `@PAR ; 3MKR PQUAN ,

: `>EACH OVER XEP; : `EACH >EACH CSTR SBUF S! +S! STR EVAL ; 
: N`THP CALL
: ?LENP { ADR -- ADR LEN } [ 1- OVER- ] DUP 
: >NXTP { ADR-ADR` } 1 : NPAR  THEN { ADR CNT -- ADR` } 
    TIMES; DUP 256 BL BSCAN> + 1+ ; 
: REMARR} NIP; 
: COMMENT} PAD STR H @ XEP; DUP J OR 0;
    2DUP + 1- C@ BL - !"NO_COMMENT" ;
: SHOW} COMMENT} CR . TYPE ;
: EVAL} COMMENT} DROP EVAL ; 

2 0 8 FAMILY PQUAN  `V0 `V1 `V2 `V3 `V4 `V5 `V6 `V7 

: `ZEROS TIMES; 0 TO PARSTK ; : `FILLPAR TIMES; TO PARSTK ; 
: `SETPAR C@R+  C@R+ P>BYT XCHG PUSH `ZEROS `FILLPAR   EX
    POP PARPTR^ +! ;  : RETURN` `OLDT TO T ; 

\  FOUND TO `V3   COUNT  TO `V2    LEN TO `V1    LIST TO `V0 
: ``=: -1 : `=SEVAL  "=:_`_" SEVAL  ; 
: <SKIP` AHEAD` ,<` CSTK> ; : SKIP> ``=: TO CSTK> >, THEN` ;
: FUNC: COMMENT} DUP FOUND - `SETPAR ,< 4 C, 0 C, >, bs `V2
    UMAX U< !"TOO_MANY_PARS" =H  T TO `OLDT "=:_" >EACH >" 
	`V2 FOR I 8 U* (LIT `V0 + `V0 I N`THP `EACH NEXT 
	`=SEVAL (LIT `SETPAR , `V2 `V3 - C, `V3 C, >, ;    

: TAB? 78 CNTC - U< CR ?; 2 SPACES ;

: FOREACH >EACH >" COMMENT} TBUF BL ERASE ,< 
{ SADR SLEN CNT // STEP OFST DEST } 
FUNC: `FOREACH 
<SKIP 
: CHAR+ DEST C!+ TO DEST ; 
: BAD 1 : BAD? !"PARAMS?" ; 
: DFLT DROP : DEFAULT 1 TO STEP "_^A" >EACH "+! DROP ; 
: HAS_PARAMS? [ TBUF CSTR BAD? BL 1- 0 BSCAN> DFLT ?; DUP
 TO STEP DEFAULT ?; ] >EACH CSTR .TIMES; CSTR DUP BL U< DROP ?;
 TBUF + INC ; 
: PREPARE [ SADR STEP DUP AT SLEN +! NPAR TO SADR ] OFST 
 TO DEST >EACH CSTR .TIMES; CSTR DUP BL U< CHAR+ ?; 1-
 PUSH  SADR POP N`THP .TIMES; CSTR CHAR+ ; 
SKIP> CNT 0; SADR SLEN + TO OFST SADR CNT NPAR OFST - BAD? 
    HAS_PARAMS? CNT STEP (/MD !"ODDLIST" 0 TO SLEN
	TIMES; PREPARE OFST DEST OVER- EVAL RETURN ;


{ 1 A  2 B  3 C  4 D  5 E  6 F } 
">NUM_^A_CONST_^B1" FOREACH 


