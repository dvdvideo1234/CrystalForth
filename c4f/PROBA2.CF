FORGET TT : TT ;

: BSCAN> W>B PUSH PUSH XCHG DUP AHEAD BEGIN C@R+ J - IF CSWAP>
   THEN UNTIL- : /SCANM1 DROP DUP : /SCANI THEN NOT+ 2EXIT ; 
: SCAN PUSH PUSH XCHG DUP AHEAD BEGIN  @R+ J - /SCANI ?; THEN
 UNTIL- /SCANM1 ;   : BSCAN W>B  BSCAN ;

{ MAKERS }
: `MKR 0 =, , EX : ,' ' , ;   : `W, STR , ;
: 3MKR `MKR , , DOES>  `W,    : `W: `W, : `(: =H `W, @EXECUTE ; 
: 2MKR `MKR , DOES> `W: ;     : 1MKR `MKR DOES> `(: ;

{ DOERS }
: `WITH POP ' ,<  0 VECTOR `DO   : WITHZ `WITH 0 `DO ;
: WITH' `WITH ' `DO ;            : WITH# `WITH >NUM `DO ;
: WITH  `WITH `DO ;              : WITH+ `WITH DUP `DO OVER+ ;
: FAMILY WITH+ SWAP ..TIMES ;    : FAMILY# WITH# SWAP ..TIMES ;

{ DEFINITIONS }
-1 QUAN {LVL
0 VALUE `(LOCATE
0 VALUE `OLDT

: `{?NAMES ,<  @' ?:STR , 4 WARY `NAMES
: `{NAMES "//" "{" "\" "}" BEGIN
    [ 4 -1 `NAMES ! ] 4 TIMES; 2- J `NAMES ! ; ,<
`{NAMES   <CSTK TO H

{ BODY }
' \ =: `\ : `} {LVL  AT {LVL DEC 0<>;  `(LOCATE AT LOCATE 
: `// FOUND 0>=;  H @ TO FOUND ; : `REM/ {LVL 0<>;
: {REM/} H OFF -1 TO FOUND  TO LOCATE TO `(LOCATE PAD OFF ;
: `PAD+ TBUF [ {LVL 0= DROP ?; : PAD+" H INC DROP; PAD XEP;
    CSTR J STR + (MOVM BL SWAP C!+ (;S! ] POP 1 ;
: `{ AT {LVL INC `REM/ LOC! `{?NAMES ?DUP `PAD+ ?; 
    1- [ @ 1 ] ,< 0 WARY `{NAMES:     >, `} `\ `{ `// ,<

: >. TOKEN? ID. ;
' `{ =: {
'  { =: {`

' PARSTK  4 + CONST PARPTR^   : `@PAR @ PARPTR^ @ + ;   
-64 CONST >EACH
0#> `@PAR @ ;  1#> `@PAR ! ;  2#> `@PAR ; 3MKR PQUAN ,

: `>EACH OVER XEP; : `EACH >EACH CSTR SBUF S! +S! STR EVAL ; 
: N`THP CALL
: ?LENP { ADR -- ADR LEN } [ 1- OVER- ] DUP 
: >NXTP { ADR-ADR` } 1 : NPAR  THEN { ADR CNT -- ADR` } 
    FOR BEGIN CSTR BL = UNTIL NEXT DROP ; 
: REMARR} NIP; 
: COMMENT} PAD STR H @ XEP; DUP J OR 0;
    2DUP + 1- C@ BL - !"NO_COMMENT" ;
: SHOW} COMMENT} CR . TYPE ;
: EVAL} COMMENT} DROP EVAL ; 

CR
0 WITH# + 8 TIMES 1 3 5 7 9 11 13 15
. CR

CR  8 FAMILY# . 1 3 5 7 9 11 13 15 
CR 
{ 8 FAMILY# . 1 3 5 7 9 11 13 15 } EVAL} \ APPLY .

\ 2 0 WITH+ PQUAN 8 ..TIMES `V0 `V1 `V2 `V3 `V4 `V5 `V6 `V7 
2 0 8 FAMILY PQUAN  `V0 `V1 `V2 `V3 `V4 `V5 `V6 `V7 

: `ZEROS TIMES; 0 TO PARSTK ; : `FILLPAR TIMES; TO PARSTK ; 
: `SETPAR C@R+  C@R+ P>BYT XCHG PUSH `ZEROS `FILLPAR   EX
    POP PARPTR^ +! ;  : RETURN` `OLDT TO T ; 

\  FOUND TO `V3   COUNT  TO `V2    LEN TO `V1    LIST TO `V0 
: ``=: -1 : `=SEVAL  "=:_`_" SEVAL  ; 
: <SKIP` AHEAD` ,<` CSTK> ; : SKIP> ``=: TO CSTK> >, THEN` ;
: FUNC: COMMENT} DUP FOUND - `SETPAR ,< 4 C, 0 C, >, bs `V2
    UMAX U< !"TOO_MANY_PARS" =H  T TO `OLDT "=:_" >EACH >" 
	`V2 FOR I 8 U* (LIT `V0 + `V0 I N`THP `EACH NEXT 
	`=SEVAL (LIT `SETPAR , `V2 `V3 - C, `V3 C, >, ;    

{
 TO H \ HEAP POINTER 
\ GAGATA
  //
 AT KEY { SOME VECTOR }  
} SHOW}
 
{ V1 V2 V3 V4 V5 V6 V7 V8 } SHOW}
FUNC: FA
    CR []; 
	V1 . V2 . V3 . V4 . 
	V5 . V6 . V7 . V8 .
RETURN ;

{ PROBA } SHOW}
1 2 3 4 5 6 7 8 FA

{ A B C }  SHOW}
FUNC: ABC   
    CR []; A . B . C .
RETURN ;
9 8 7 ABC 

: TAB? 78 CNTC - U< CR ?; 2 SPACES ;

: HAN PUSH "SRC"_PILON" "TMP"_PILON" "DST"_PILON" POP ,<
{ SRC_PILON TMP_PILON DST_PILON DISKS } FUNC: HANOJ 
<SKIP : .FROM SRC_PILON "From_"  : .PILON ID. ID. ; 
      : .TO DST_PILON "To_" .PILON ; 
SKIP> DISKS 0; AT DISKS DEC DISKS IF 
	    SRC_PILON DST_PILON TMP_PILON DISKS  HANOJ
        SRC_PILON TMP_PILON DST_PILON 1      HANOJ
        TMP_PILON SRC_PILON DST_PILON DISKS  HANOJ ;;
THEN CR "Move_Disk" ID. .FROM SPACE .TO   RETURN  ;;


: QUINS CR 0 ,< { X // IDX } FUNC: QUIN  
<SKIP  8 CONST Q8  Q8 BARY ROW  Q8 BARY FROW  
 Q8 2* BARY DIAG\ Q8 2* BARY DIAG/ : ADD_QUIN IDX 1+ X ROW C! ; 
 0#> PUSH IDX FROW IXEC X IDX + DIAG\ IXEC Q8 IDX - X + DIAG/ ;  
 N: TEST >, C@ OR ; N: SET >, 1 CSWAP! ; =, RESET >, 0 CSWAP! ;
SKIP>  X Q8 - IF Q8 TIMES; 
	J TO IDX  0 TEST 0<>;  ADD_QUIN SET X 1+ QUIN RESET ;
THEN [ Q8 TAB? ] 0 Q8 1- RNG>; ROW C@ ALPHA EMIT   RETURN ;


: PERM CR CSTR 20 UMIN 
<SKIP   0 VALUE `LEN   20 BARY `ARP  : `>ARP 0 `ARP ;
: `PRINT [ `LEN TAB? ] `>ARP `LEN TYPE ; 
: `SWAP { S D } `ARP PUSH `ARP DUP PUSH
    C@ { S@ } J  C@ { D@ } POP C! { S! } POP  C! { D! } ;
SKIP>  DUP TO `LEN `>ARP MOVM `LEN  ,< 
{ N } FUNC: `PERMUTE <SKIP SKIP>   N 0;  AT N DEC  N `PRINT ?;
	N `PERMUTE  N TIMES;  J N `SWAP  N `PERMUTE  J N `SWAP  
RETURN ;

{ >A >L A L { INSERTING A L WITH BLANK -- >A` >L` } }
FUNC: S"INSERT 
<SKIP   : INS DUP AT >L +! >A (MPUSH TO >A ;
SKIP>   "_" CSTR INS A L INS   >A >L RETURN ;

\ : APPLY} (LIT 
\ : BSCAN>  PICK PUSH PUSH FOR CSTR J - IF CSWAP> NEXT 
\ : /SCAN SKIP THEN : /SCANI POP 1+ RDROP XCHG NOT+ POP ;
\ : SCAN> PICK PUSH PUSH FOR STR J - /SCANI ?; NEXT /SCAN ;

{ H 32 ERASE  "^A^B^C^D_ABCD" DROP  H 10 DUMP
  H 20 BL BSCAN> CR 32 . . .  H 20 2 BSCAN> CR 2 . . . 
  H 20 3 BSCAN> CR 3 . . .    H 20 4 BSCAN> CR 4 . . . 
  H 20 5 BSCAN> CR 5 . . . 
} EVAL}

: FOREACH >EACH >" COMMENT} TBUF BL ERASE ,< 
{ SADR SLEN CNT // STEP OFST DEST } 
FUNC: `FOREACH 
<SKIP 
: CHAR+ DEST C!+ TO DEST ; 
: BAD 1 : BAD? !"PARAMS?" ; 
: DFLT DROP : DEFAULT 1 TO STEP "_^A" >EACH "+! DROP ; 
: HAS_PARAMS? [ TBUF CSTR BAD? BL 1- 0 BSCAN> DFLT ?; DUP
 TO STEP DEFAULT ?; ] >EACH CSTR .TIMES; CSTR DUP BL U< DROP ?;
 TBUF + INC ; 
: PREPARE [ SADR STEP DUP AT SLEN +! NPAR TO SADR ] OFST 
 TO DEST >EACH CSTR .TIMES; CSTR DUP BL U< CHAR+ ?; 1-
 PUSH  SADR POP N`THP .TIMES; CSTR CHAR+ ; 
SKIP> CNT 0; SADR SLEN + TO OFST SADR CNT NPAR OFST - BAD? 
    HAS_PARAMS? CNT STEP (/MD !"ODDLIST" 0 TO SLEN
	TIMES; PREPARE OFST DEST OVER- EVAL RETURN ;

: ** DUP U* ; : 2^ 1 SWAP TIMES; 2* ;
CR { ASDF ASFD AFDS AFSD } """^A""_ID." FOREACH 
CR 0 { %1111 $20 '~ 3#200 7#100 99 ^A 'A } 
">NUM_^A_." FOREACH .
CR { %1111 $20 '~ 3#200 7#100 99 ^A 'A } 
">NUM_^A_NEG_." FOREACH 
CR { %1111 $20 '~ 3#200 7#100 99 ^A 'A } 
"CR_>._^A_>._**_>._=_>NUM_^A_**_." FOREACH 

CR { + - U* U/ 2* 2/ UMOD NEG }
 ">." FOREACH
CR { + - U* U/ 2* 2/ UMOD NEG }
 "'_^A_'$_EMIT_H._>._=:_>._^A" FOREACH
CR { + - U* U/ 2* 2/ UMOD NEG }
 ">._^A_>._=:_>._^B" FOREACH
{ 1 A  2 B  3 C  4 D  5 E  6 F } 
">NUM_^A_CONST_^B1" FOREACH 

\ 1 2 3 4  5 6 7 8  9 Q W E  R T Y U  I O P A  S D F G  H J K L
\ ; ' "\ /  Z X C V  B N M ,  "_ "^ "" "~ } \ SHOW}
\ "CR_.""^A"_^B"_^C"_^D""" FOREACH

CR { 1 . 2 3 + } ">." FOREACH
CR 

{ \ DFGHDFGHWO
: \ DFGHDFGHDFGH
A \ SDFGHDFGHDFGHDFG
2 { SDFGHSDFGHDFG { SDFGSDFGSDF } }
3 \ SDFGDFGHFD
+ { FDGHDFGHDFG
}
.
;
} SHOW} EVAL}
