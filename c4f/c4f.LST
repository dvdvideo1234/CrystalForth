Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 1
C4F.asm



      1				     ; COMMANDS	     OF	INTERPRETER
      2				     ; JUMP EXIT IF NEXT   CONTROLS
      3				     ; push pop	J DUP	   STACK
      4				     ; !R+ @R+ xR XA	   TRANSFER
      5				     ; +2/ +* AND XOR	   MATH	& LOGIC
      6
      7				     locals  @@
      8
      9	      =	dword ptr	     pd	 equ dword ptr
     10	      =	word  ptr	     pw	 equ word  ptr
     11	      =	byte  ptr	     pb	 equ byte  ptr
     12
     13	      =-0001		     TO_     =	-1
     14	      =-0002		     AT_     =	-2
     15
     16				     JMPS_   MACRO LBL
     17				       jmp   SHORT LBL
     18					     ENDM
     19
     20				     SKIPA_  MACRO
     21				       DB    03DH
     22					     ENDM
     23
     24				     SKIPB_  MACRO
     25				       DB    03CH
     26					     ENDM
     27
     28				     SKIPr_  MACRO reg
     29				       mov   reg,0
     30				       org   $-2
     31					     ENDM
     32
     33				     SKIPc_  MACRO reg
     34				       mov   reg,0
     35				       org   $-1
     36					     ENDM
     37
     38				     X_	     MACRO
     39				       xchg  Rsp,DSP
     40					     ENDM
     41
     42				     pushR_  MACRO  REG
     43				       PUSH  REG
     44					     ENDM
     45
     46				     popR_   MACRO  REG
     47				       xchg  t,reg
     48				       drop_
     49					     ENDM
     50
     51				     R2P_    macro   REG
     52				       INC   REG
     53				       INC   REG
     54				       endm
     55
     56				     R2M_    macro   REG
     57				       DEC   REG
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 2
C4F.asm



     58				       DEC   REG
     59				       endm
     60
     61				     @IP_    macro  REG
     62				       MOV   REG,[IP]
     63				       R2P_  IP
     64				       endm
     65
     66				     cf_to_  macro  reg
     67				       sbb   reg,reg
     68					     endm
     69
     70				     DROP_   macro
     71				       LODSW
     72					     endm
     73
     74				     DUP_    macro  REG
     75				       R2M_  DSP
     76				       MOV   [DSP],REG
     77					     endm
     78
     79				     SWAP_   macro
     80				       XCHG  [DSP],T
     81					     endm
     82
     83				     rchg_   macro   reg
     84				       xchg  ax,reg
     85				       endm
     86
     87				     Zero?_  MACRO   REG
     88				       OR    REG,REG
     89					     ENDM
     90
     91				     CLR_    MACRO   REG
     92				       XOR    REG,REG
     93					     ENDM
     94
     95				     ALiGN_  MACRO  FLAG
     96					     IF	($-START+FLAG) AND 1
     97					     NOP
     98				       @NOPSCNT	= @NOPSCNT+1
     99					     ENDIF
    100					     ENDM
    101
    102	      =0000		     @NOPSCNT =	0
    103
    104				     L_	     MACRO NAM,L@
    105				       ALIGN_  0
    106				     L@:
    107				       NAM   = (($-START+100H) SHR 1)+8000H
    108					     ENDM
    109
    110				     P_	     MACRO NAM,L@
    111				       ALIGN_  0
    112				     L@:
    113				       NAM   = ($-START+100H) SHR 1
    114				       ENDM
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 3
C4F.asm



    115
    116				     N_	     MACRO
    117				       JMP   NP
    118				       ENDM
    119
    120				     ; REGISTERS     for interpretter
    121	      =BX		     IP	 = BX  ; INSTRUCTION POINTER
    122	      =SP		     RSP = SP  ; RETURN	STACK POINTER
    123	      =SI		     DSP = SI  ; DATA STACK POINTER
    124	      =DX		     NP	 = DX  ; TO NEXT POINTER
    125	      =BP		     AR	 = BP  ; ARITHMETIC (ALTERNATIVE) REGISTER
    126
    127	      =AX		     T	 = AX  ; DATA STACK TOP	REGISTER
    128	      =AL		     TL	 = AL  ; DATA STACK TOP	REGISTER
    129	      =AH		     TH	 = AH  ; DATA STACK TOP	REGISTER
    130	      =DI		     WA	 = DI  ; WORK ADDRESS REGISTER
    131	      =CX		     W	 = CX  ; WORK REGISTER
    132	      =CL		     WL	 = CL  ; WORK REGISTER
    133	      =CH		     WH	 = CH  ; WORK REGISTER
    134
    135	0000			     MyCseg  segment para  use16
    136
    137					     assume cs:	MyCseg,	 ds: MyCseg, ss: MyCseg, es: MyCseg
    138
    139					     org 100h
    140
    141	      =-0100		     @TBUF   = -256	     ;	256
    142	      =-0200		     @TIB    = @TBUF  *	2    ;	256
    143							     ;	512 B FSTACK
    144	      =-0400		     @R_TOP  = @TIB   *	2    ; 1024 B RSTACK
    145	      =-0800		     @S_TOP  = @R_TOP *	2    ; 2048 B DSTACK
    146	      =-1000		     @VOCTOP = @S_TOP *	2    ; 4096 B =	4 BUFFERS * 1024 B
    147
    148	0100			     Start   Label byte
    149	0100			     _START:
    150
    151				      P_ _ABORT,@ABORT
1   152				       ALIGN_  0
2   153					     IF	($-START+0) AND	1
2   154					     NOP
2   155				       @NOPSCNT	= @NOPSCNT+1
2   156					     ENDIF
1   157	0100			     @ABORT:
1   158	      =0080		       _ABORT	= ($-START+100H) SHR 1
    159	0100  BB 1000		       mov   bX,1000h	  ; only 64k allocate
    160	0103  B4 4A		       mov   ah,4ah
    161	0105  CD 21		       int   21h
    162	0107  E8 0010		       CALL  @NEXTS
    163
    164				      P_ _NOP,@NOP	     ; ( NOP
1   165				       ALIGN_  0
2   166					     IF	($-START+0) AND	1
2   167					     NOP
2   168				       @NOPSCNT	= @NOPSCNT+1
2   169					     ENDIF
1   170	010A			     @NOP:
1   171	      =0085		       _NOP   =	($-START+100H) SHR 1
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 4
C4F.asm



    172				       @IP_    WA
1   173	010A  8B 3F		       MOV   WA,[IP]
1   174				       R2P_  IP
2   175	010C  43		       INC   IP
2   176	010D  43		       INC   IP
    177	010E  D1 E7		       SHL     WA,1
    178	0110  72 03		       JC      @NEST
    179	0112  FF E7		       JMP     WA
    180
    181				      P_ _EX,@EX	     ; ( EX
1   182				       ALIGN_  0
2   183					     IF	($-START+0) AND	1
2   184					     NOP
2   185				       @NOPSCNT	= @NOPSCNT+1
2   186					     ENDIF
1   187	0114			     @EX:
1   188	      =008A		       _EX   = ($-START+100H) SHR 1
    189	0114  5F		       POP     WA
    190
    191	0115			     @NEST:
    192	0115  53		       PUSH    IP
    193	0116  8B DF		       MOV     IP,WA
    194				       JMPS_   @NOP
1   195	0118  EB F0		       jmp   SHORT @NOP
    196
    197
    198	011A			     @NEXTS:
    199	011A  5A		       POP   NP
    200	011B  BC FBFE		       MOV   RSP,@R_TOP-2
    201	011E  BE F7FE		       MOV   DSP,@S_TOP-2
    202	0121  E8 0020		       CALL  @RET
    203
    204	0124  0000		     _@INIT  DW	0
    205				     ;AR      DW 0
    206
    207				     ;vvvvvv--------------   IO	 ---------------
    208
    209				      P_ _IODD,@IODD		  ; ( IO
1   210				       ALIGN_  0
2   211					     IF	($-START+0) AND	1
2   212					     NOP
2   213				       @NOPSCNT	= @NOPSCNT+1
2   214					     ENDIF
1   215	0126			     @IODD:
1   216	      =0093		       _IODD   = ($-START+100H)	SHR 1
    217				       DUP_    T
1   218				       R2M_  DSP
2   219	0126  4E		       DEC   DSP
2   220	0127  4E		       DEC   DSP
1   221	0128  89 04		       MOV   [DSP],T
    222
    223				      P_ _IOD,@IOD		; ( IO
1   224				       ALIGN_  0
2   225					     IF	($-START+0) AND	1
2   226					     NOP
2   227				       @NOPSCNT	= @NOPSCNT+1
2   228					     ENDIF
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 5
C4F.asm



1   229	012A			     @IOD:
1   230	      =0095		       _IOD   =	($-START+100H) SHR 1
    231				       DUP_    T
1   232				       R2M_  DSP
2   233	012A  4E		       DEC   DSP
2   234	012B  4E		       DEC   DSP
1   235	012C  89 04		       MOV   [DSP],T
    236
    237				      P_ _IO,@IO	      ;	( IO
1   238				       ALIGN_  0
2   239					     IF	($-START+0) AND	1
2   240					     NOP
2   241				       @NOPSCNT	= @NOPSCNT+1
2   242					     ENDIF
1   243	012E			     @IO:
1   244	      =0097		       _IO   = ($-START+100H) SHR 1
    245	012E  52 55		       PUSH    NP AR
    246	0130  8B 3C		       MOV     DI,[DSP]
    247	0132  8B 4C 02		       MOV     CX,[DSP+2]
    248	0135  8B 54 04		       MOV     DX,[DSP+4]
    249	0138  87 FB		       XCHG    DI,IP
    250	013A  FF D7		       CALL    DI
    251	013C  5D 5A		       POP     AR NP
    252
    253				     ;^^^^^^--------------   IO	 ---------------
    254
    255
    256				     ;-------------------------------------------
    257				     ; CONTROL
    258				     ;-------------------------------------------
    259
    260				      P_ _DROPX,@DROPX	     ; DROP;
1   261				       ALIGN_  0
2   262					     IF	($-START+0) AND	1
2   263					     NOP
2   264				       @NOPSCNT	= @NOPSCNT+1
2   265					     ENDIF
1   266	013E			     @DROPX:
1   267	      =009F		       _DROPX	= ($-START+100H) SHR 1
    268					     DROP_
1   269	013E  AD		       LODSW
    270					     SKIPB_
1   271	013F  3C		       DB    03CH
    272
    273				      P_ _RDROPX,@RDROPX
1   274				       ALIGN_  0
2   275					     IF	($-START+0) AND	1
2   276					     NOP
2   277				       @NOPSCNT	= @NOPSCNT+1
2   278					     ENDIF
1   279	0140			     @RDROPX:
1   280	      =00A0		       _RDROPX	 = ($-START+100H) SHR 1
    281	0140  59			     POP     W
    282
    283	0141  5B		     @RETA:  POP     IP
    284					     N_
1   285	0142  FF E2		       JMP   NP
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 6
C4F.asm



    286
    287				      P_ _RET,@RET	     ; ( (;
1   288				       ALIGN_  0
2   289					     IF	($-START+0) AND	1
2   290					     NOP
2   291				       @NOPSCNT	= @NOPSCNT+1
2   292					     ENDIF
1   293	0144			     @RET:
1   294	      =00A2		       _RET   =	($-START+100H) SHR 1
    295					     JMPS_   @RETA
1   296	0144  EB FB		       jmp   SHORT @RETA
    297
    298				      P_ _NEXT,@NEXT
1   299				       ALIGN_  0
2   300					     IF	($-START+0) AND	1
2   301					     NOP
2   302				       @NOPSCNT	= @NOPSCNT+1
2   303					     ENDIF
1   304	0146			     @NEXT:
1   305	      =00A3		       _NEXT   = ($-START+100H)	SHR 1
    306	0146  59			     POP     W
    307	0147  49			     DEC     W
    308	0148  51			     PUSH    W
    309					     SKIPC_  WL
1   310	0149  B1 00		       mov   WL,0
1   311				       org   $-1
    312
    313				      P_ _IFM,@IFM
1   314				       ALIGN_  0
2   315					     IF	($-START+0) AND	1
2   316					     NOP
2   317				       @NOPSCNT	= @NOPSCNT+1
2   318					     ENDIF
1   319	014A			     @IFM:
1   320	      =00A5		       _IFM   =	($-START+100H) SHR 1
    321	014A  48			     DEC     T
    322	014B  78 13			     JS	     @SKIP
    323
    324				      P_ _JUMP,@JUMP		 ; ( (JUMP
1   325				       ALIGN_  0
2   326					     IF	($-START+0) AND	1
2   327	014D  90			     NOP
2   328	      =0001		       @NOPSCNT	= @NOPSCNT+1
2   329					     ENDIF
1   330	014E			     @JUMP:
1   331	      =00A7		       _JUMP   = ($-START+100H)	SHR 1
    332					     @IP_    IP
1   333	014E  8B 1F		       MOV   IP,[IP]
1   334				       R2P_  IP
2   335	0150  43		       INC   IP
2   336	0151  43		       INC   IP
    337					     N_
1   338	0152  FF E2		       JMP   NP
    339
    340				      P_ _?SKIP,@?SKIP
1   341				       ALIGN_  0
2   342					     IF	($-START+0) AND	1
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 7
C4F.asm



2   343					     NOP
2   344				       @NOPSCNT	= @NOPSCNT+1
2   345					     ENDIF
1   346	0154			     @?SKIP:
1   347	      =00AA		       _?SKIP	= ($-START+100H) SHR 1
    348					     Zero?_  T
1   349	0154  0B C0		       OR    T,T
    350	0156  74 03			     JE	     @1M?
    351					     N_
1   352	0158  FF E2		       JMP   NP
    353
    354				      P_ _IF,@IF	      ;	( IF
1   355				       ALIGN_  0
2   356					     IF	($-START+0) AND	1
2   357					     NOP
2   358				       @NOPSCNT	= @NOPSCNT+1
2   359					     ENDIF
1   360	015A			     @IF:
1   361	      =00AD		       _IF   = ($-START+100H) SHR 1
    362	015A  48			     DEC     T
    363	015B			     @1M?:
    364	015B  40			     INC     T
    365					     DROP_
1   366	015C  AD		       LODSW
    367	015D  74 EF			     JZ	     @JUMP
    368
    369				      P_ _SKIP,@SKIP	      ;	( SKIP
1   370				       ALIGN_  0
2   371					     IF	($-START+0) AND	1
2   372	015F  90			     NOP
2   373	      =0002		       @NOPSCNT	= @NOPSCNT+1
2   374					     ENDIF
1   375	0160			     @SKIP:
1   376	      =00B0		       _SKIP   = ($-START+100H)	SHR 1
    377					     R2P_    IP
1   378	0160  43		       INC   IP
1   379	0161  43		       INC   IP
    380					     N_
1   381	0162  FF E2		       JMP   NP
    382
    383				      P_ _RSKIP,@RSKIP
1   384				       ALIGN_  0
2   385					     IF	($-START+0) AND	1
2   386					     NOP
2   387				       @NOPSCNT	= @NOPSCNT+1
2   388					     ENDIF
1   389	0164			     @RSKIP:
1   390	      =00B2		       _RSKIP	= ($-START+100H) SHR 1
    391	0164  5F			     POP     WA
    392					     R2P_    WA
1   393	0165  47		       INC   WA
1   394	0166  47		       INC   WA
    395					     SKIPA_
1   396	0167  3D		       DB    03DH
    397
    398				      P_ _XR,@XR	      ;	( XR  XCHG
1   399				       ALIGN_  0
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 8
C4F.asm



2   400					     IF	($-START+0) AND	1
2   401					     NOP
2   402				       @NOPSCNT	= @NOPSCNT+1
2   403					     ENDIF
1   404	0168			     @XR:
1   405	      =00B4		       _XR   = ($-START+100H) SHR 1
    406	0168  5F			     POP     WA
    407	0169  97			     XCHG    T,WA
    408					     JMPS_   @_XA
1   409	016A  EB 03		       jmp   SHORT @_XA
    410
    411				      P_ _XA,@XA	      ;	( XA
1   412				       ALIGN_  0
2   413					     IF	($-START+0) AND	1
2   414					     NOP
2   415				       @NOPSCNT	= @NOPSCNT+1
2   416					     ENDIF
1   417	016C			     @XA:
1   418	      =00B6		       _XA   = ($-START+100H) SHR 1
    419	016C  5F			     POP     WA
    420	016D  87 FD			     XCHG    WA,AR
    421	016F			     @_XA:
    422	016F  57			     PUSH    WA
    423					     N_
1   424	0170  FF E2		       JMP   NP
    425
    426	0172			     @_RSTP:
    427	0172  57			     PUSH    WA
    428					     SKIPB_
1   429	0173  3C		       DB    03CH
    430
    431				      P_ _PUSH,@PUSH	      ;	( PUSH
1   432				       ALIGN_  0
2   433					     IF	($-START+0) AND	1
2   434					     NOP
2   435				       @NOPSCNT	= @NOPSCNT+1
2   436					     ENDIF
1   437	0174			     @PUSH:
1   438	      =00BA		       _PUSH   = ($-START+100H)	SHR 1
    439	0174  50			     PUSH    T
    440	0175			     @DROP1:
    441					     DROP_
1   442	0175  AD		       LODSW
    443					     N_
1   444	0176  FF E2		       JMP   NP
    445
    446				      P_ _BE,@BE
1   447				       ALIGN_  0
2   448					     IF	($-START+0) AND	1
2   449					     NOP
2   450				       @NOPSCNT	= @NOPSCNT+1
2   451					     ENDIF
1   452	0178			     @BE:
1   453	      =00BC		       _BE   = ($-START+100H) SHR 1
    454	0178  B4 0E			     MOV     AH,0EH
    455	017A  CD 10			     INT     10H
    456					     JMPS_   @DROP1
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 9
C4F.asm



1   457	017C  EB F7		       jmp   SHORT @DROP1
    458
    459				      P_ _RSTM,@RSTM	     ; ( !R-
1   460				       ALIGN_  0
2   461					     IF	($-START+0) AND	1
2   462					     NOP
2   463				       @NOPSCNT	= @NOPSCNT+1
2   464					     ENDIF
1   465	017E			     @RSTM:
1   466	      =00BF		       _RSTM   = ($-START+100H)	SHR 1
    467	017E  5F			     POP     WA
    468					     R2M_    WA
1   469	017F  4F		       DEC   WA
1   470	0180  4F		       DEC   WA
    471					     SKIPB_
1   472	0181  3C		       DB    03CH
    473
    474				      P_ _RST,@RST	   ; ( !R
1   475				       ALIGN_  0
2   476					     IF	($-START+0) AND	1
2   477					     NOP
2   478				       @NOPSCNT	= @NOPSCNT+1
2   479					     ENDIF
1   480	0182			     @RST:
1   481	      =00C1		       _RST   =	($-START+100H) SHR 1
    482	0182  5F			     POP     WA
    483	0183			     @RST1:
    484	0183  57			     PUSH    WA
    485	0184  AB			     STOSW
    486					     DROP_
1   487	0185  AD		       LODSW
    488					     N_
1   489	0186  FF E2		       JMP   NP
    490
    491				      P_ _RSTP,@RSTP	     ; ( !R+
1   492				       ALIGN_  0
2   493					     IF	($-START+0) AND	1
2   494					     NOP
2   495				       @NOPSCNT	= @NOPSCNT+1
2   496					     ENDIF
1   497	0188			     @RSTP:
1   498	      =00C4		       _RSTP   = ($-START+100H)	SHR 1
    499	0188  5F			     POP     WA
    500	0189  AB			     STOSW
    501	018A  EB E6			     JMP     @_RSTP
    502
    503				      P_ _RSTBP,@RSTBP	       ; ( C!R+
1   504				       ALIGN_  0
2   505					     IF	($-START+0) AND	1
2   506					     NOP
2   507				       @NOPSCNT	= @NOPSCNT+1
2   508					     ENDIF
1   509	018C			     @RSTBP:
1   510	      =00C6		       _RSTBP	= ($-START+100H) SHR 1
    511	018C  5F			     POP     WA
    512	018D  AA			     STOSB
    513	018E  EB E2			     JMP     @_RSTP
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 10
C4F.asm



    514
    515				      P_ _RLDP,@RLDP	      ;	( @R+
1   516				       ALIGN_  0
2   517					     IF	($-START+0) AND	1
2   518					     NOP
2   519				       @NOPSCNT	= @NOPSCNT+1
2   520					     ENDIF
1   521	0190			     @RLDP:
1   522	      =00C8		       _RLDP   = ($-START+100H)	SHR 1
    523	0190  5F			     POP     WA
    524	0191  8B 0D			     MOV     W,[WA]
    525					     R2P_    WA
1   526	0193  47		       INC   WA
1   527	0194  47		       INC   WA
    528					     JMPS_   @_J
1   529	0195  EB 0C		       jmp   SHORT @_J
    530
    531				      P_ _RLDBP,@RLDBP		; ( C@R+
1   532				       ALIGN_  0
2   533					     IF	($-START+0) AND	1
2   534	0197  90			     NOP
2   535	      =0003		       @NOPSCNT	= @NOPSCNT+1
2   536					     ENDIF
1   537	0198			     @RLDBP:
1   538	      =00CC		       _RLDBP	= ($-START+100H) SHR 1
    539	0198  5F			     POP     WA
    540	0199  8A 0D			     MOV     WL,[WA]
    541					     CLR_    WH
1   542	019B  32 ED		       XOR    WH,WH
    543	019D  47			     INC     WA
    544					     JMPS_   @_J
1   545	019E  EB 03		       jmp   SHORT @_J
    546
    547				      P_ _J,@J		      ;	( J
1   548				       ALIGN_  0
2   549					     IF	($-START+0) AND	1
2   550					     NOP
2   551				       @NOPSCNT	= @NOPSCNT+1
2   552					     ENDIF
1   553	01A0			     @J:
1   554	      =00D0		       _J   = ($-START+100H) SHR 1
    555	01A0  5F			     POP     WA
    556	01A1  59			     POP     W
    557	01A2  51			     PUSH    W
    558	01A3			     @_J:
    559	01A3  57			     PUSH    WA
    560	01A4			     @WPUSH:
    561					     DUP_    T
1   562				       R2M_  DSP
2   563	01A4  4E		       DEC   DSP
2   564	01A5  4E		       DEC   DSP
1   565	01A6  89 04		       MOV   [DSP],T
    566	01A8  91			     XCHG    W,T
    567					     N_
1   568	01A9  FF E2		       JMP   NP
    569
    570				      P_ _POP,@POP	      ;	( POP
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 11
C4F.asm



1   571				       ALIGN_  0
2   572					     IF	($-START+0) AND	1
2   573	01AB  90			     NOP
2   574	      =0004		       @NOPSCNT	= @NOPSCNT+1
2   575					     ENDIF
1   576	01AC			     @POP:
1   577	      =00D6		       _POP   =	($-START+100H) SHR 1
    578	01AC  59			     POP     W
    579					     SKIPA_
1   580	01AD  3D		       DB    03DH
    581
    582				      P_ _DUP,@DUP	      ;	( DUP
1   583				       ALIGN_  0
2   584					     IF	($-START+0) AND	1
2   585					     NOP
2   586				       @NOPSCNT	= @NOPSCNT+1
2   587					     ENDIF
1   588	01AE			     @DUP:
1   589	      =00D7		       _DUP   =	($-START+100H) SHR 1
    590	01AE  8B C8			     MOV     W,T
    591					     JMPS_   @WPUSH
1   592	01B0  EB F2		       jmp   SHORT @WPUSH
    593
    594				      P_ _ALIGN,@ALIGN
1   595				       ALIGN_  0
2   596					     IF	($-START+0) AND	1
2   597					     NOP
2   598				       @NOPSCNT	= @NOPSCNT+1
2   599					     ENDIF
1   600	01B2			     @ALIGN:
1   601	      =00D9		       _ALIGN	= ($-START+100H) SHR 1
    602	01B2  48			     DEC     T
    603	01B3  0C 01			     OR	     TL,1
    604
    605				      P_ _1P,@1P
1   606				       ALIGN_  0
2   607					     IF	($-START+0) AND	1
2   608	01B5  90			     NOP
2   609	      =0005		       @NOPSCNT	= @NOPSCNT+1
2   610					     ENDIF
1   611	01B6			     @1P:
1   612	      =00DB		       _1P   = ($-START+100H) SHR 1
    613	01B6  40			     INC     T
    614					     N_
1   615	01B7  FF E2		       JMP   NP
    616
    617				      P_ _PLAVG,@PLAVG	      ;	( +2/
1   618				       ALIGN_  0
2   619					     IF	($-START+0) AND	1
2   620	01B9  90			     NOP
2   621	      =0006		       @NOPSCNT	= @NOPSCNT+1
2   622					     ENDIF
1   623	01BA			     @PLAVG:
1   624	      =00DD		       _PLAVG	= ($-START+100H) SHR 1
    625	01BA  03 04			     ADD     T,[DSP]
    626	01BC  89 04			     MOV     [DSP],T
    627
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 12
C4F.asm



    628				      P_ _2DIV,@2DIV	      ;	( 2/
1   629				       ALIGN_  0
2   630					     IF	($-START+0) AND	1
2   631					     NOP
2   632				       @NOPSCNT	= @NOPSCNT+1
2   633					     ENDIF
1   634	01BE			     @2DIV:
1   635	      =00DF		       _2DIV   = ($-START+100H)	SHR 1
    636	01BE  D1 D8			     RCR     T,1
    637					     N_
1   638	01C0  FF E2		       JMP   NP
    639
    640				      P_ _SDIV,@SDIV	      ;	( -/
1   641				       ALIGN_  0
2   642					     IF	($-START+0) AND	1
2   643					     NOP
2   644				       @NOPSCNT	= @NOPSCNT+1
2   645					     ENDIF
1   646	01C2			     @SDIV:
1   647	      =00E1		       _SDIV   = ($-START+100H)	SHR 1
    648	01C2  D1 24			     SHL     PW	[DSP],1
    649	01C4  D1 D0			     RCL     T,1
    650	01C6  3B C5			     CMP     T,AR
    651	01C8  72 04			     JB	     @_NO_DIV
    652	01CA  2B C5			     SUB     T,AR
    653
    654				      P_ _U1P,@U1P
1   655				       ALIGN_  0
2   656					     IF	($-START+0) AND	1
2   657					     NOP
2   658				       @NOPSCNT	= @NOPSCNT+1
2   659					     ENDIF
1   660	01CC			     @U1P:
1   661	      =00E6		       _U1P   =	($-START+100H) SHR 1
    662	01CC  FF 04			     INC     PW	[DSP]
    663	01CE			     @_NO_DIV:
    664					     N_
1   665	01CE  FF E2		       JMP   NP
    666
    667				      P_ _PMUL,@PMUL	      ;	( +*
1   668				       ALIGN_  0
2   669					     IF	($-START+0) AND	1
2   670					     NOP
2   671				       @NOPSCNT	= @NOPSCNT+1
2   672					     ENDIF
1   673	01D0			     @PMUL:
1   674	      =00E8		       _PMUL   = ($-START+100H)	SHR 1
    675	01D0  8B 0C			     MOV     W,[DSP]
    676	01D2  D1 E9			     SHR     W,1
    677	01D4  73 02			     JNC     @D2DIV
    678	01D6  03 C5			     ADD     T,AR
    679
    680				      P_ _D2DIV,@D2DIV
1   681				       ALIGN_  0
2   682					     IF	($-START+0) AND	1
2   683					     NOP
2   684				       @NOPSCNT	= @NOPSCNT+1
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 13
C4F.asm



2   685					     ENDIF
1   686	01D8			     @D2DIV:
1   687	      =00EC		       _D2DIV	= ($-START+100H) SHR 1
    688	01D8  D1 D8			     RCR     T,1
    689
    690				      P_ _U2DIV,@U2DIV
1   691				       ALIGN_  0
2   692					     IF	($-START+0) AND	1
2   693					     NOP
2   694				       @NOPSCNT	= @NOPSCNT+1
2   695					     ENDIF
1   696	01DA			     @U2DIV:
1   697	      =00ED		       _U2DIV	= ($-START+100H) SHR 1
    698	01DA  D1 1C			     RCR     PW	[DSP],1
    699					     N_
1   700	01DC  FF E2		       JMP   NP
    701
    702				      P_ _16MUL,@16MUL
1   703				       ALIGN_  0
2   704					     IF	($-START+0) AND	1
2   705					     NOP
2   706				       @NOPSCNT	= @NOPSCNT+1
2   707					     ENDIF
1   708	01DE			     @16MUL:
1   709	      =00EF		       _16MUL	= ($-START+100H) SHR 1
    710	01DE  D1 E0			     SHL     T,1
    711
    712				      P_ _8MUL,@8MUL
1   713				       ALIGN_  0
2   714					     IF	($-START+0) AND	1
2   715					     NOP
2   716				       @NOPSCNT	= @NOPSCNT+1
2   717					     ENDIF
1   718	01E0			     @8MUL:
1   719	      =00F0		       _8MUL   = ($-START+100H)	SHR 1
    720	01E0  D1 E0			     SHL     T,1
    721
    722				      P_ _4MUL,@4MUL
1   723				       ALIGN_  0
2   724					     IF	($-START+0) AND	1
2   725					     NOP
2   726				       @NOPSCNT	= @NOPSCNT+1
2   727					     ENDIF
1   728	01E2			     @4MUL:
1   729	      =00F1		       _4MUL   = ($-START+100H)	SHR 1
    730	01E2  D1 E0			     SHL     T,1
    731
    732				      P_ _2MUL,@2MUL
1   733				       ALIGN_  0
2   734					     IF	($-START+0) AND	1
2   735					     NOP
2   736				       @NOPSCNT	= @NOPSCNT+1
2   737					     ENDIF
1   738	01E4			     @2MUL:
1   739	      =00F2		       _2MUL   = ($-START+100H)	SHR 1
    740	01E4  D1 E0			     SHL     T,1
    741					     N_
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 14
C4F.asm



1   742	01E6  FF E2		       JMP   NP
    743
    744				      P_ _nAND,@nAND	      ;	( AND
1   745				       ALIGN_  0
2   746					     IF	($-START+0) AND	1
2   747					     NOP
2   748				       @NOPSCNT	= @NOPSCNT+1
2   749					     ENDIF
1   750	01E8			     @nAND:
1   751	      =00F4		       _nAND   = ($-START+100H)	SHR 1
    752					     POPR_   W
1   753	01E8  91		       xchg  t,W
1   754				       drop_
2   755	01E9  AD		       LODSW
    756	01EA  23 C1			     AND     T,W
    757
    758				      P_ _NOT,@NOT
1   759				       ALIGN_  0
2   760					     IF	($-START+0) AND	1
2   761					     NOP
2   762				       @NOPSCNT	= @NOPSCNT+1
2   763					     ENDIF
1   764	01EC			     @NOT:
1   765	      =00F6		       _NOT   =	($-START+100H) SHR 1
    766	01EC  40			     INC     T
    767
    768				      P_ _NEG,@NEG
1   769				       ALIGN_  0
2   770					     IF	($-START+0) AND	1
2   771	01ED  90			     NOP
2   772	      =0007		       @NOPSCNT	= @NOPSCNT+1
2   773					     ENDIF
1   774	01EE			     @NEG:
1   775	      =00F7		       _NEG   =	($-START+100H) SHR 1
    776	01EE  F7 D8			     NEG     T
    777					     N_
1   778	01F0  FF E2		       JMP   NP
    779
    780				      P_ _XOR,@XOR	      ;	( XOR
1   781				       ALIGN_  0
2   782					     IF	($-START+0) AND	1
2   783					     NOP
2   784				       @NOPSCNT	= @NOPSCNT+1
2   785					     ENDIF
1   786	01F2			     @XOR:
1   787	      =00F9		       _XOR   =	($-START+100H) SHR 1
    788					     POPR_   W
1   789	01F2  91		       xchg  t,W
1   790				       drop_
2   791	01F3  AD		       LODSW
    792	01F4  33 C1			     XOR     T,W
    793					     N_
1   794	01F6  FF E2		       JMP   NP
    795
    796				      P_ _ZEQ,@ZEQ
1   797				       ALIGN_  0
2   798					     IF	($-START+0) AND	1
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 15
C4F.asm



2   799					     NOP
2   800				       @NOPSCNT	= @NOPSCNT+1
2   801					     ENDIF
1   802	01F8			     @ZEQ:
1   803	      =00FC		       _ZEQ   =	($-START+100H) SHR 1
    804	01F8  2D 0001			     SUB     T,1
    805					     SKIPR_  W
1   806	01FB  B9 0000		       mov   W,0
1   807				       org   $-2
    808				      P_ _ZLESS,@LESS
1   809				       ALIGN_  0
2   810					     IF	($-START+0) AND	1
2   811					     NOP
2   812				       @NOPSCNT	= @NOPSCNT+1
2   813					     ENDIF
1   814	01FC			     @LESS:
1   815	      =00FE		       _ZLESS	= ($-START+100H) SHR 1
    816	01FC  D1 E0			     SHL     T,1
    817					     CF_TO_  T
1   818	01FE  1B C0		       sbb   T,T
    819					     N_
1   820	0200  FF E2		       JMP   NP
    821
    822				      L_ _CTX,@CTX	; ( c -- ) \ Send character c to output	device.
1   823				       ALIGN_  0
2   824					     IF	($-START+0) AND	1
2   825					     NOP
2   826				       @NOPSCNT	= @NOPSCNT+1
2   827					     ENDIF
1   828	0202			     @CTX:
1   829	      =8101		       _CTX   =	(($-START+100H)	SHR 1)+8000H
    830	0202  0097		       DW  _IO	    ; char in DL
    831	0204  92		       XCHG  AX,DX
    832	0205  80 FA FF		       CMP   DL,0FFH ; 0FFH is interpreted as input
    833	0208  75 02		       JNZ   @TX1    ; do NOT allow input
    834	020A  B2 20		       MOV   DL,32   ; change to blank
    835	020C			     @TX1:
    836	020C  B4 06		       MOV   AH,6    ; MS - DOS	Direct Console I/O
    837	020E  CD 21		       INT   021H    ; display character
    838	0210  C3		       RET
    839
    840				      L_ _?CRX,@?CRX	  ; (  -- c T |	F )
1   841				       ALIGN_  0
2   842					     IF	($-START+0) AND	1
2   843	0211  90			     NOP
2   844	      =0008		       @NOPSCNT	= @NOPSCNT+1
2   845					     ENDIF
1   846	0212			     @?CRX:
1   847	      =8109		       _?CRX   = (($-START+100H) SHR 1)+8000H
    848	0212  0093		       DW _IODD
    849	0214  BA FFFF		       MOV   DX,0FFFFH ; input command & setup for TRUE	flag
    850	0217  89 14		       MOV   [DSP],DX
    851	0219  E8 FFF0		       CALL  @TX1      ; MS - DOS Direct Console I/O
    852	021C  75 05		       JNZ   QRX0    ; ?key ready
    853	021E  4A		       DEC   DX
    854				       DROP_
1   855	021F  AD		       LODSW
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 16
C4F.asm



    856	0220  89 14		       MOV   [DSP],DX
    857	0222  C3		       RET
    858	0223			     QRX0:
    859	0223  0A C0		       OR    AL,AL   ; AL=0 if extended	char
    860	0225  75 03		       JNZ   QRX1    ; ?extended character code
    861	0227  CD 21		       INT   021H    ;
    862	0229  F9		       STC
    863	022A			     QRX1:
    864	022A  B4 00		       MOV   AH,0
    865	022C  73 02		       JNC   QRX2
    866	022E  86 E0		       XCHG  AH,AL   ; extended	code in	msb
    867	0230			     QRX2:
    868	0230  89 44 02		       MOV   [DSP+2],AX
    869	0233  C3		       RET
    870
    871	0234			     _END:
    872
    873	0234			     MyCseg  ends
    874					     end  Start
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 17
Symbol Table




Symbol Name		Type   Value			   Cref	(defined at #)

??DATE			Text   "12/23/18"
??FILENAME		Text   "C4F	"
??TIME			Text   "11:47:08"
??VERSION		Number 0314
@16MUL			Near   MYCSEG:01DE		   #708
@1M?			Near   MYCSEG:015B		   350	#363
@1P			Near   MYCSEG:01B6		   #611
@2DIV			Near   MYCSEG:01BE		   #634
@2MUL			Near   MYCSEG:01E4		   #738
@4MUL			Near   MYCSEG:01E2		   #728
@8MUL			Near   MYCSEG:01E0		   #718
@?CRX			Near   MYCSEG:0212		   #846
@?SKIP			Near   MYCSEG:0154		   #346
@ABORT			Near   MYCSEG:0100		   #157
@ALIGN			Near   MYCSEG:01B2		   #600
@BE			Near   MYCSEG:0178		   #452
@CPU			Text   0101H
@CTX			Near   MYCSEG:0202		   #828
@CURSEG			Text   MYCSEG			   #135
@D2DIV			Near   MYCSEG:01D8		   677	#686
@DROP1			Near   MYCSEG:0175		   #440	 457
@DROPX			Near   MYCSEG:013E		   #266
@DUP			Near   MYCSEG:01AE		   #588
@EX			Near   MYCSEG:0114		   #187
@FILENAME		Text   C4F
@IF			Near   MYCSEG:015A		   #360
@IFM			Near   MYCSEG:014A		   #319
@IO			Near   MYCSEG:012E		   #243
@IOD			Near   MYCSEG:012A		   #229
@IODD			Near   MYCSEG:0126		   #215
@J			Near   MYCSEG:01A0		   #553
@JUMP			Near   MYCSEG:014E		   #330	 367
@LESS			Near   MYCSEG:01FC		   #814
@NAND			Near   MYCSEG:01E8		   #750
@NEG			Near   MYCSEG:01EE		   #774
@NEST			Near   MYCSEG:0115		   178	#191
@NEXT			Near   MYCSEG:0146		   #304
@NEXTS			Near   MYCSEG:011A		   162	#198
@NOP			Near   MYCSEG:010A		   #170	 195
@NOPSCNT		Number 0008			   #102	 328  #328  373	 #373  535  #535  574  #574  609  #609	621  #621 +
							   772	#772  844  #844
@NOT			Near   MYCSEG:01EC		   #764
@PLAVG			Near   MYCSEG:01BA		   #623
@PMUL			Near   MYCSEG:01D0		   #673
@POP			Near   MYCSEG:01AC		   #576
@PUSH			Near   MYCSEG:0174		   #437
@RDROPX			Near   MYCSEG:0140		   #279
@RET			Near   MYCSEG:0144		   202	#293
@RETA			Near   MYCSEG:0141		   #283	 296
@RLDBP			Near   MYCSEG:0198		   #537
@RLDP			Near   MYCSEG:0190		   #521
@RSKIP			Near   MYCSEG:0164		   #389
@RST			Near   MYCSEG:0182		   #480
@RST1			Near   MYCSEG:0183		   #483
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 18
Symbol Table



@RSTBP			Near   MYCSEG:018C		   #509
@RSTM			Near   MYCSEG:017E		   #465
@RSTP			Near   MYCSEG:0188		   #497
@R_TOP			Number -0400			   #144	 145  200
@SDIV			Near   MYCSEG:01C2		   #646
@SKIP			Near   MYCSEG:0160		   322	#375
@S_TOP			Number -0800			   #145	 146  201
@TBUF			Number -0100			   #141	 142
@TIB			Number -0200			   #142	 144
@TX1			Near   MYCSEG:020C		   833	#835  851
@U1P			Near   MYCSEG:01CC		   #660
@U2DIV			Near   MYCSEG:01DA		   #696
@VOCTOP			Number -1000			   #146
@WORDSIZE		Text   2			   #135
@WPUSH			Near   MYCSEG:01A4		   #560	 592
@XA			Near   MYCSEG:016C		   #417
@XOR			Near   MYCSEG:01F2		   #786
@XR			Near   MYCSEG:0168		   #404
@ZEQ			Near   MYCSEG:01F8		   #802
@_J			Near   MYCSEG:01A3		   529	545  #558
@_NO_DIV		Near   MYCSEG:01CE		   651	#663
@_RSTP			Near   MYCSEG:0172		   #426	 501  513
@_XA			Near   MYCSEG:016F		   409	#421
AR			Number BP			   #125	 245  251  420	650  652  678
AT_			Number -0002			   #14
DSP			Number SI			   #123	 201  219  220	221  233  234  235  246	 247  248  563	564  565  +
							   625	626  648  662  675  698	 850  856  868
IP			Number BX			   #121	 173  175  176	192  193  249  283  333	 333  335  336	378  379
NP			Number DX			   #124	 199  245  251	285  338  352  381  424	 444  489  568	615  638  +
							   665	700  742  778  794  820
PB			Text   byte  ptr		   #11
PD			Text   dword ptr		   #9
PW			Text   word  ptr		   #10	648  662  698
QRX0			Near   MYCSEG:0223		   852	#858
QRX1			Near   MYCSEG:022A		   860	#863
QRX2			Near   MYCSEG:0230		   865	#867
RSP			Number SP			   #122	 200
START			Byte   MYCSEG:0100		   #148	 153  158  166	171  183  188  211  216	 225  230  239	244  262  +
							   267	275  280  289  294  300	 305  315  320	326  331  342  347  356	  +
							   361	371  376  385  390  400	 405  413  418	433  438  448  453  461	  +
							   466	476  481  493  498  505	 510  517  522	533  538  549  554  572	  +
							   577	584  589  596  601  607	 612  619  624	630  635  642  647  656	  +
							   661	669  674  682  687  692	 697  704  709	714  719  724  729  734	  +
							   739	746  751  760  765  770	 775  782  787	798  803  810  815  824	  +
							   829	842  847  874
T			Number AX			   #127	 221  235  321	349  349  362  364  407	 439  565  566	590  602  +
							   613	625  626  636  649  650	 652  678  688	710  720  730  740  753	  +
							   756	766  776  789  792  804	 816  818  818
TH			Number AH			   #129
TL			Number AL			   #128	 603
TO_			Number -0001			   #13
W			Number CX			   #131	 281  306  307	308  524  556  557  566	 578  590  675	676  753  +
							   756	789  792  806
WA			Number DI			   #130	 173  177  179	189  193  391  393  394	 406  407  419	420  422  +
							   427	467  469  470  482  484	 499  511  523	524  526  527  539  540	  +
							   543	555  559
WH			Number CH			   #133	 542  542
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 19
Symbol Table



WL			Number CL			   #132	 310  540
_16MUL			Number 00EF			   #709
_1P			Number 00DB			   #612
_2DIV			Number 00DF			   #635
_2MUL			Number 00F2			   #739
_4MUL			Number 00F1			   #729
_8MUL			Number 00F0			   #719
_?CRX			Number 8109			   #847
_?SKIP			Number 00AA			   #347
_@INIT			Word   MYCSEG:0124		   #204
_ABORT			Number 0080			   #158
_ALIGN			Number 00D9			   #601
_BE			Number 00BC			   #453
_CTX			Number 8101			   #829
_D2DIV			Number 00EC			   #687
_DROPX			Number 009F			   #267
_DUP			Number 00D7			   #589
_END			Near   MYCSEG:0234		   #871
_EX			Number 008A			   #188
_IF			Number 00AD			   #361
_IFM			Number 00A5			   #320
_IO			Number 0097			   #244	 830
_IOD			Number 0095			   #230
_IODD			Number 0093			   #216	 848
_J			Number 00D0			   #554
_JUMP			Number 00A7			   #331
_NAND			Number 00F4			   #751
_NEG			Number 00F7			   #775
_NEXT			Number 00A3			   #305
_NOP			Number 0085			   #171
_NOT			Number 00F6			   #765
_PLAVG			Number 00DD			   #624
_PMUL			Number 00E8			   #674
_POP			Number 00D6			   #577
_PUSH			Number 00BA			   #438
_RDROPX			Number 00A0			   #280
_RET			Number 00A2			   #294
_RLDBP			Number 00CC			   #538
_RLDP			Number 00C8			   #522
_RSKIP			Number 00B2			   #390
_RST			Number 00C1			   #481
_RSTBP			Number 00C6			   #510
_RSTM			Number 00BF			   #466
_RSTP			Number 00C4			   #498
_SDIV			Number 00E1			   #647
_SKIP			Number 00B0			   #376
_START			Near   MYCSEG:0100		   #149
_U1P			Number 00E6			   #661
_U2DIV			Number 00ED			   #697
_XA			Number 00B6			   #418
_XOR			Number 00F9			   #787
_XR			Number 00B4			   #405
_ZEQ			Number 00FC			   #803
_ZLESS			Number 00FE			   #815
Turbo Assembler	 Version 3.2	    12/23/18 11:47:08	    Page 20
Symbol Table




Macro Name						   Cref	(defined at #)

@IP_							   #61	172  332
ALIGN_							   #95	152  165  182  210  224	 238  261  274	288  299  314  325  341	  +
							   355	370  384  399  412  432	 447  460  475	492  504  516  532  548	  +
							   571	583  595  606  618  629	 641  655  668	681  691  703  713  723	  +
							   733	745  759  769  781  797	 809  823  841
CF_TO_							   #66	817
CLR_							   #91	541
DROP_							   #70	268  365  441  486  754	 790  854
DUP_							   #74	217  231  561
JMPS_							   #16	194  295  408  456  528	 544  591
L_							   #104	 822  840
N_							   #116	 284  337  351	380  423  443  488  567	 614  637  664	699  741  +
							   777	793  819
POPR_							   #46	752  788
PUSHR_							   #42
P_							   #110	 151  164  181	209  223  237  260  273	 287  298  313	324  340  +
							   354	369  383  398  411  431	 446  459  474	491  503  515  531  547	  +
							   570	582  594  605  617  628	 640  654  667	680  690  702  712  722	  +
							   732	744  758  768  780  796	 808
R2M_							   #56	218  232  468  562
R2P_							   #51	174  334  377  392  525
RCHG_							   #83
SKIPA_							   #20	395  579
SKIPB_							   #24	270  428  471
SKIPC_							   #33	309
SKIPR_							   #28	805
SWAP_							   #79
X_							   #38
ZERO?_							   #87	348

Groups & Segments	Bit Size Align	Combine	Class	   Cref	(defined at #)

MYCSEG			16  0234 Para	none		   #135	 137  137  137	137
