locals  @@

pd  equ dword ptr
pw  equ word  ptr
pb  equ byte  ptr

TO_    =  2
AT_    =  4
VAL_   =  6

SKIPr   MACRO reg
	mov   reg,0
	org   $-2
    ENDM

JMPS	MACRO LBL
	jmp  SHORT LBL
	ENDM

SKIPW	MACRO
	DB    0BFH
	ENDM

SKIPA   MACRO
	DB    03DH
	ENDM

SKIPB   MACRO
	DB    03CH
	ENDM

X	MACRO
	xchg sp,AX
        ENDM

TPUSH	MACRO REG
	X
	PUSH  REG
	X
	ENDM

TPOP	MACRO REG
	X
	POP	REG
	X
	ENDM

TWICE	macro
	DW	$+2
    endm

RDEC    macro
	DW	@_NEXT_
	TWICE
    endm

LDP MACRO   REG
	XCHG	REG,AX
	LODSW
	XCHG	REG,AX
    ENDM

STP MACRO   REG
	XCHG	REG,AX
	STOSW
	XCHG	REG,AX
    ENDM

ALGN  MACRO  FLAG
    IF	($-START+FLAG) AND 1
    NOP
    ENDIF
    ENDM

N	MACRO LBL	
LBL:
    ENDM

L	MACRO LBL
	ALGN  0
	N	LBL	    
ENDM

P	MACRO LBL
	ALGN  0
	NOP
	N	LBL	    
	org   $-1
    ENDM

@XTSK	macro	LBL,ADR
	ALGN  1
	SKIPA
	P	LBL
	DW ADR
	ENDM
	
qqqqq = 0
ppppp = qqqqq

@nam    macro   msg
	local	endstr
	db   	endstr-$-1
	db   	msg
endstr	label   byte
	endm

@ln     macro   token
ppppp = $
	@nam  token
	dw    qqqqq
qqqqq = ppppp
	endm

@ALIGN  MACRO  FLAG
	IF ($-START+FLAG) AND 1
	NOP
	ENDIF
	ENDM

@VAR    macro   LBL,DAT
        P LBL
        DW      @VAR,DAT
        ENDM

@XT     macro   LBL,ADR
        P LBL
        DW      ADR
        ENDM

@XTP    macro   LBL,ADR,PAR
        P LBL
        DW      ADR,PAR
        ENDM

@value  macro   lbl,dat
        P LBL
        DW     @_cons2,@SETVAR,dat
        endm

@DEFERO macro   lbl,dat
        P LBL
        DW     @_deferO,dat
        endm

@DEFER  macro   lbl,dat
        P LBL
        DW     @_defer,dat
        endm

@vector macro   lbl,dat
        P LBL
        DW     @_defer2,@SETVAR,dat
        endm

@point  macro   lbl,dat
        P LBL
        DW     @_point,@_setpnt,dat
        endm

@QUAN   MACRO   LBL,DAT
        P lbl
        DW     @_CONS3,@SETVAR2,@VAR,dat
        ENDM

@const  macro   lbl,dat
        P LBL
        DW    @_cons,DAT
        endm

@entry  macro ADR,DAT,nam
        DW    ADR,DAT
        @nam  nam
        endm


; REGISTERS
; SI INSTRUCTION POINTER
; SP RETURN STACK POINTER
; AX DATA STACK POINTER
; CX DATA STACK TOP REGISTER
; DI WORK REGISTER
; DX ADRESS REGISTER  ?
; DX BX BP   - NOT USED
;
; MINIMAL SET INTERPRETTER COMMANDS
; METHOD       COMMANDS  (DOES (VAR (CONST (CONST2 (DEFER (DEFER2
;                        (SETVAR (SETVAR2 (CONST3 (SETPOINT (POINT
;                        (BARY (WARY (RW_BLK
; CONTROL      COMMANDS  (IF (JUMP (CALL (NEXT (FOR (NEST (EXEC (PERF
;                        (GOTO (RETURN (EX (XNEST (IFZ (IFM
; RETURN STACK COMMANDS  POP PUSH RDROP I J
; DATA STACK   COMMANDS  DUP DROP XCHG
; MATH         COMMANDS  +2/ LIT  ABS NEG NOT _ 1- 2- 1+ 2+
; LOGICAL      COMMANDS  XOR AND
; DATA TRANSF  COMMANDS  @R+ !R+ C!R+
; IO           COMMANDS  (IO

MyCseg  segment para  use16

        assume cs: MyCseg,  ds: MyCseg, ss: MyCseg, es: MyCseg

        org 100h

@TBUF   = -256          ; 256
@TIB    = @TBUF * 2     ; 256
@R_TOP  = @TIB * 2      ; 512  RSTACK
@S_TOP  = @R_TOP * 2    ; 1024 DSTACK
@VOCTOP = @S_TOP * 2    ; 2048 = 4 BUFFERS * 512

Start   Label byte
        JMPS SELF0

_OPERATION DW @WARY
	DW _COMP_NUM,_COMMA,_NUMBER,_EXEC

  @CONST  _TBL,80H
  @CONST  _TIB,-512
  @CONST  _TBUF,-256
  @CONST  _0,0
  @CONST  _BL,32

  @VALUE  _HERE,FREEMEM
  @VALUE  _ETIB,0
  @VALUE  _LTIB,0
  @VALUE  _DICT,@VOCTOP
  @POINT  _FIND?,0
_SETPNT = TO_+_FIND?

  @XT     _CNTC,0

  @DEFERO _EMIT,_DEMIT
  ;@DEFER  _SOURCE,_ETIB
  @DEFER  _OK,0
  @DEFER  _ACCEPT,_ACC
  @DEFER  _ERROR,0

  @POINT  _INIT,_@_INI
_REINI  = TO_+_INIT

SELF0:
  mov   bx,1000h     ; only 64k allocate
  mov   ah,4ah
  int   21h
@ABORT:
  MOV   SP,@R_TOP
  MOV   AX,@S_TOP
  CALL  @_RETUR
  DW    _INIT,_INIT,_TBL,_COUNT
_MAINLP DW _EVAL,_TIB,_TBL,_ACCEPT,_OK,_JUMP,_MAINLP

;------------------------------------

;  CHAR etib ltib  /  START LEN >IN
;  SI   BX   Cx
  @XT  _PARS,@PARAM           ;= (PARS
  MOV   DI,BX
  SUB   DI,CX
  XCHG  AX,SI

  CMP   AL,' '
  JNE   @@SKIPX
  JCXZ  @@SKIPX
  REPE  SCASB
  JE    @@SKIPX
  DEC   DI
  INC   CX
@@SKIPX:
  MOV   DX,DI   ;  START OF THE SOURCE
  JCXZ  @@WEX

  REPNE SCASB
  JNE   @@WEX
  DEC   DI

@@WEX:
  XCHG  AX,DI   ; END OF THE SOURCE
  SUB   AX,DX
  XCHG  AX,SI
  X
  PUSH  DX      ; START OF THE SOURCE
  JMPS  @FND?2
; PUSH  SI      ; LENGTH OF THE SOURCE
; PUSH  CX      ; REST LEN OF BUF
; X
; RET

  @XT  _FND,@PARAMZ     ; (FIND
  XOR   CX,CX
  MOV	DI,BX
NEXTfnd:
  ADD	DI,CX
  LEA   dI,[DI+4]
  MOV	BX,DI
  mov   cl,[di]
  Jcxz  @FND?
  INC   CX
  PUSH  SI
  repe  cmpsb
  POP   SI
  jNZ   NEXTfnd
  mov   SI,[BX]
  mov   cx,SI        ; fnd_ok
@FND?:
  x
@FND?2:
  PUSH  SI
  PUSH  CX
  X
  RET

 @XT  _num,@PARAMZ      ;= (>#       ; (NUM
  push  ax
  MOV   AX,10  ; base := 10
  CALL  @@NUM
  pop   AX
  X
  PUSH  BX
  PUSH  CX
  X
  RET

@@NUM:
  CALL  @@numini
  CALL  @@SGN
@@NUMZ:
  CALL  @@N1
  JMPS  @@NUMZ

@@n1:
  cmp   al,'$'     ; BASE := 16
  JNE   @@N2
  MOV   al,16
  jmp   SHORT @@setbas

@@N2:   cmp  al,'#'     ; BASE := CX
  JNE   @@N3
  mov   al,Bl
@@numini:
  Xor   Bx,Bx      ; ACCUMULATOR
@@setbas:
  mov   DI,ax
@@END?:
  JCXZ  @@ERNUM
@@GETC:
  deC   CX
  LODSB
  RET

@@N3:
  cmp   al,'9'+1
  jc    @@ton2
  AND   AL,0DFH
  cmp   al,'A'      ; no case sensivity
  jc    @@ERNUM
  sub   al,7
@@ton2:
  sub   al,'0'
  cmp   ax,DI
  jnc   @@ERNUM
  xchg  ax,Bx
  mul   DI
  xchg  ax,Bx
  add   Bx,ax
  JCXZ  @@EXNUM
  JMP   @@GETC
@@ERNUM:
  INC   CX
@@EXNUM:
  pop   dx    ; rdrop
@@noEXn:
  RET

@@SGN:
  CMP   AL,'-'     ; SGN
  JNE   @@N1
  POP   dX
  CALL  @@END?
  CALL  dX
  NEG   bX
  RET

@RLD:
  TPUSH CX
  POP   CX
@ld@:
  PUSH  DI
  MOV   DI,CX
  MOV   CX,[DI]
  RET

@PUSH:
  PUSH  CX
@DROP:
  PUSH  DI
;_DRET:
  MOV   DI,CX
  TPOP  CX
  OR    DI,DI
  RET

  @XT  _ZEQ,@CALL		; 0=
@ZEQ:
  SUB   CX,1
  SBB   CX,CX
  RET

  @XT  _DUP,@DUP
  ret

  @XT  _J,@_IJ         ; J
        DW 2

  @XT  _I,@_IJ         ; J
        DW 0

 @XTP _DEMIT,@2IO,200h ; dos  EMIT
  INT   21H
  XCHG  SI,AX
  RET

; DATA STACK   COMMANDS  DUP DROP

@_IJ:
  MOV   DI,[DI]
  ADD   DI,SP
  SKIPA

@_CONS3:
  SCASW
@_CONS2:
  SCASW
@_CONS:
  MOV   DI,[DI]
_VAR:
  TPUSH CX
@ADR:
  MOV   CX,DI
  JMP   _MAIN

 @XT _strp,@ld@
  scasw

 @XTSK _SWAP,@DROP       ; SWAP
@swap:
  XCHG  CX,DI
  JMPS  _VAR

 @XT _LDP,@ld@        ; @+
_VAR2:
  SCASW
  JMPS  _VAR

@POP:
  POP   DI
  JMPS  _VAR

 @XT _STM,@DROP
  DEC   DI
  MOV   [DI],CH
  
 @XTSK _STMB,@DROP
  DEC   DI
  MOV   [DI],CL
  JMPS  @ADR

 @XT _STP,@DROP
  MOV   [DI],CX
@ADRP:
  SCASW
  JMPS  @ADR

; RETURN STACK COMMANDS  POP PUSH XCHG
 @XT _COUNT,@ld@
  MOV   CH,0
  INC   DI
  XCHG  CX,DI
  JMPS  _VAR

 @XT _@_STR,@RLD
  XOR   CH,CH
  INC   CX
  ADD   CX,DI
  SKIPB

@XCHG:
  POP   DI
  XCHG  CX,DI
@PUSH@:
  push  di
  JMPS  @1

 @XT _LIT,@RLD
  SCASW
  JMPS  @PUSH@

 @XT _PUSH,@PUSH
  JMPS  @1

@2IO:    ; DX/CX/BX AX
  X
  PUSH  CX
  PUSH  CX
  X
@_IO:
  PUSH  SI
  PUSH  BX
  MOV   BX,CX
  MOV   SI,[DI] ; TO BE  AX
  SCASW
  X
  POP   CX
  POP   DX
  X
  XCHG  SI,AX
  jmps  @doer

@PARAMZ:       ; UNIVERSAL ENTRY
  x
  push  cx
  x
@PARAM:        ; UNIVERSAL ENTRY
  PUSH  SI
  PUSH  BX
  x
  pop   bx
  pop   si
  x
@doer:
  CALL  DI
@ret_self:
  CLD
  POP   BX
@RET_DR:
  POP   SI
_DROP:
  TPOP  CX
  JMPS  _MAIN

@ABS:
  OR    CX,CX
  JNS   @1
@NEG:
  DEC   CX
@NOT:
  NOT   CX
@1:
  JMPS _MAIN

@2M:
  DEC   CX
@1M:  
  DEC   CX
  SKIPA
@2P:
  INC   CX
@1P:  
  INC   CX
  JMPS _MAIN
  
 @XT _ST,@DROP
  SKIPB
@SETVAR2:
  SCASW
@SETVAR:
  MOV   [DI],CX
  JMPS  _DROP

@DUP:
  TPUSH CX
@CALL:
  CALL  DI
  JMPS  _MAIN

@RDROP:
  POP   DI
  JMPS  _MAIN

 @XT _IF,@DROP
  JE    @JUMP

@SKIP:
  INC	SI
  INC	SI
  JMPS  _MAIN

@NEXT:    ; (NEXT
  POP   DI
  DEC   DI
  PUSH  DI
  JS    @SKIP
@JUMP:    ; (JUMP
  MOV   SI,[SI]
  JMPS  _MAIN

@_POINT:
  MOV   DI,[DI+2]
  JMPS  @NEST

@_SETPNT:
  MOV   [DI],SI
  JMPS  @_RETUR

; MAIN  LOOP
_does3:
  SCASW
_does2:
  SCASW
_does:
  TPUSH CX
  MOV   CX,DI
@EX:
  POP   DI
@NEST:
  PUSH  SI
  PUSH  DI
@_RETUR: ; (;
  POP   SI
_MAIN:
  LDP	DI
@EXEC?:  
  TEST	DI,1
  JE	@NEST
  INC   DI
  JMP   [DI-2]

 @XT _ZEX,@DROP
  JE    @_RETUR
  JMP   _MAIN

; CONTROL      COMMANDS
 @XT _EXECUTE,@DROP
  JMPS  @NEST

 @XT _LDB,@ld@        ; C@
  MOV   CH,0
 @XTSK _LD,@ld@        ; @
  JMPS  _MAIN

@_DEFERO:
  INC   PW [_CNTC]
  SKIPA
@_DEFER3:
  SCASW
@_DEFER2:
  SCASW
@_DEFER:
  MOV   DI,[DI]
@EXEC:
  OR    DI,DI
  JZ    _MAIN
  JMPS  @EXEC?

 @XT _EXEC,@DROP
  jmps  @EXEC

 @XT _@EXEC,@DROP
  jmps  @_DEFER

; LOGICAL      COMMANDS  XOR AND
 @XT _SUB,@DROP
  SUB   CX,DI
  JMPS  _MAIN

@WARY:
  SHL   CX,1
@BARY: 
 @XTSK @_ADD,@DROP
  ADD   CX,DI
  JMPS  _MAIN

 @XTP _ACCZ,@2IO,0A00H
  MOV   PW [BX],120
  INT   21H
  INC   BX
  XCHG  SI,AX
  TPUSH BX
  RET

 L _ACC
	DW @_DROP_,_ACCZ,_COUNT,_RET

 @XT  _CMOVEU,@PARAM
  ADD   BX,CX
  JMPS  @MPUSH

 @XT  _STRPUSH,@PARAMZ       ; S!-
  mov   cl,[Si]
  XOR   ch,ch
  INC   CX
 @XTSK  _MPUSH,@PARAM
  XCHG  CX,BX
@MPUSH:
  MOV   DI,bX   ; TOP OF DICTIONARY
  ADD   SI,CX   ; AFTER NAME ADDRESS
  STD           ; BACKWARDS
  CMPSB         ; PREPARE FOR DIRECTION
  REP   MOVSB   ; NAME  MOVE
  LEA	BX,[DI+1]
  RET

 @XT  _MAKESTR,@PARAM        ; S!
  XCHG  BX,CX
  MOV   DX,CX
  MOV   [BX],CL
  INC   BX
 @XTSK  _CMOVE,@PARAM          ; CMOVE
  MOV   DI,bX
  REP   MOVSB   ; NAME  MOVE
  MOV	BX,DI
  RET

 @XT _AEX,@CALL               ; A@!
  XCHG  CX,BX
  RET

_commaer:
  call _does
@commaer:
  dw _LD,_JUMP,_comma

 @XT  _A,@DUP                ; A@
  MOV  CX,BX
  RET

@MAKER:
  call _does
  dw _HENTRY,_JUMP,@commaER

 @XT _EX,@EX			; EX
 @XT _2P,@2P			; 2+
 @XT _DROPX,@RET_DR		; DROP;
 @XT _POP,@POP        	; POP
 @XT  @_DROP_,@DROP		; DROP

 @XT _NEXT,@NEXT		; (NEXT
 @XT _RDROP,@RDROP		; RDROP
 @XT _JUMP,@JUMP		; (JUMP
 @XT _RET,@_RETUR		; (;
 @XT _SKIP,@SKIP		; SKIP
 @XT _ABORT,@ABORT		; ABORT

 L _LOOPS
        DW _PUSH,_JUMP,@@LPS
@@LPS0  DW _J,_EXECUTE
@@LPS   DW _NEXT,@@LPS0
 L _2EXIT
	DW _RDROP
 L _EXIT
	DW _POP,_SKIP
 L _XDROP	
	DW _EX
 L @ABORTX 
	DW _DROPX

 L _XDICT
	DW _DICT,_EX,TO_+_DICT,_RET
	
 L _XHERE
	DW _HERE,_EX,TO_+_HERE,_RET
	
 L _XSPAC
	DW _EX
 L _SPACE
	DW _BL,_EMIT
 L _NOP	
	DW _RET
	
 L _IDTYP
	DW _XSPAC
 L _STYPE
	DW _COUNT
 L _TYPE
	DW _XDROP
 L _ATYPE
	DW _LOOPS,_COUNT,_EMIT,_RET

 L _EVAL
	DW _NOP ;_DUP,TO_+_LTIB,@_ADD,TO_+_ETIB
 L _@EVAL   
	DW _TOKEN,_ZEX,_TBUF,_FIND?
	DW _OPERATION,_@EXEC,_JUMP,_@EVAL

 L _COLON  
	DW _RPAR          ; :
 L _HENTRY
	DW _HERE
 L _ENTRY
	DW _0,_SWAP,_TOKEN?
	DW _XDICT,_STRPUSH,_A,_STM,_STM,_RET


 P _SEMICO 
	DW _commaer,_RET  ; (;,

 P _clit   
	dw _commaer,_lit        ; (LIT,

 L _NUMBER
	DW _COUNT,_NUM,_NZ??,_RET
	
 L _XZ??
	DW _EX
 L _Z??
	DW _ZEQ
 L _NZ??
	DW	_ABORT?
	@NAM  " ?"
	DW	_RET

 L _COMP_NUM
	DW _NUMBER
 L _COMLIT	
	DW _cLIT
 L _COMMA
	DW _XHERE,_STP,_RET

 L _TOKEN?
	DW _TOKEN,_XZ??
	DW _DUP,_LDB,_RET
 L _TOKEN
	DW _BL
 L _WORD
	DW _PARSE,_TBUF,_MAKESTR,_A,_LIT,'`'
 L _SWAPST
	DW _SWAP,_ST,_RET
 L _PARSE
	DW _NOP,_ETIB,_LTIB,_PARS,TO_+_LTIB,_RET

 L _HDICT
    DW  _HERE,_STRP
 L _TO_DICT
	DW _XDICT,_MPUSH,_A,_RET

 L _@_INI
    DW  _HDICT,_REINI
    DW  _LPAR,_0,TO_+_LTIB,_RET

 L _ABORT?
	DW _@_STR,_SWAP,_IF,@ABORTX,_ERROR,_ABORT

 L _LPAR
	DW _SETPNT
@LPAR   DW 0 ;TO_+_DFND
@EXEC2P DW _2P,_RET            ; EXECUTE

 L _RPAR
	DW _SETPNT,0 	;TO_+_MFND,_DUP,_ZEQ,_IF,@EXEC2P
	DW @_DROP_,0	; TO_+_DFND,_RET  ; COMPILE

;-----------------------------------------------

freemem:
  DW ENDMEM-FREEMEM-2
  @ENTRY  _ENTRY,0,'=:'
  DB 0
EndMem:


lastw = ppppp

MyCseg  ends
        end  Start

;____________________________________________
