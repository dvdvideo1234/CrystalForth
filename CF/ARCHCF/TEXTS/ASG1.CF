\ ****************************************************
\ Wrapper for asg, when we want to test without label
\ mechanisms. These are hot patched for reverse engineering. 
\ '=:' IS ALIAS

2 CONST CELL#
: WRD, , ;
: SPLIT, SPLIT 
: BB, C, C, ;

'   HERE  =: AS-HERE
'   C,    =: AS-C,
'  ALLOT  =: AS-ALLOT
\ VAL' H    =: _AP_        \ FIXED !!!  ???
: ADORN-ADDRESS DROP CR ;

\ &&&&&&&&&&&&& UTILITIES, SYSTEM DEPENDANT &&&&&&&&&&&&&&&&&&
M: %ID.` WID. ; \ >NFA @ $@ TYPE SPACE ;
M: CELL+` 2+ ; 
M: 2CELL+` 4+ ; 
M: CELL-` 2- ; 
M: >CFA` @ ;  \ DEA TO CFA
M: >BODY` CELL+ ;
M: STARTVOC` T ;
M: HERE-` AS-HERE CELL- ;
M: %>BODY` >CFA >BODY ; ( From DEA to the DATA field of a word )
M: %>DOES` >CFA @ ; ( From DEA to the DOES> pointer for a )
M: VOCEND?` `IS-END ;
: >DATA  %>BODY ;
: >DIS  %>BODY 2CELL+ ;
: CELLS 2* ; 
: DEA' FND?? DUP CELL+ @ UNDEF? ;
: >CNT@ >CFA 5+ C@ ;   \ `HERE' advances with count 
: MC<0` + 1- C@ $80 AND $80 = ;

\ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
: IS-A VARIABLE HERE-           \ CREATE CHECKTYPER
 DOES> PUSH %>DOES @R+ = EXIT ; \ CHECK TYPE OF DEA 
: REMEMBER` ?CSP HERE- SWAP! CSP! ;  \ REMEMBER TYPE  


\ : HIBIT 0 SWAP |DROP CALL WHILE| U1+ THEN 2/ DUP ;
\ : HIBIT 0 SWAP [ DROP 1- ] UNTILZ| U1+ 2/ DUP ;

0 VALUE  ISS@  ( Start of current instruction )
VARIABLE BA-DEFAULT    0 BA-DEFAULT !
VARIABLE BA-XT
0 VALUE ISL@  ( Length of current instruction )
HERE |VALUE `|ASP AS-POINTER@
0 VALUE LATEST-INSTRUCTION@

: assemble, DUP TO ISL@ STR| : lsbyte, DUP AS-C, B/ ;
\ : B/ 8 : >> TIMES| 2/ ; \ RSHIFT

( ------------- BOOKKEEPING ---------------------- )

\ BI - Bits that needs fixed up
CREATE TBI     Z, Z, Z,  \ THE BLACK BOARD IS CLEAR
\ BY - Bits represent a commaer that is to be supplied
TBI 1 CELLS + CONST TBY
\ BA - State bits, bad if two consequitive bits are up
TBI 2 CELLS + CONST TBA

0 VECTOR BBB[]
: @BBB DUP @ 4+ C@ BBB[] DUP ,<
0 VALUE BI^             ( OR!    AND!      --      >BI  )   
: BY^ BI^ 2+ ;          ( OR!    OR!       AND!    >BY  )
: BA^ BI^ 3 + ;         ( OR!U   OR!U      OR!U    >BA  )

: BAD? TBA  @
: BADPAIRS? DUP 2* AND $AAAAAAAAAAAAAAAA AND ;           
: PRED_OR  2DUP AND !28" ;  \ PRE OR CHK
: OR!?   |@!  PRED_OR OR ;
: CHECK32 BAD? !32" ; ( Always an error )
: PRED_AND  2DUP OR -1 - !29"   ;  \ PRE AND CHK
: AND!?  PUSH NOT @I PRED_AND AND POP! ;
: OR!U |@! OR ;                               
: AT-REST?  TBI @ 0=   TBY @ 0=  AND ;                
: !POSTIT  AS-HERE TO ISS@ 
: !OLDCOMMA 0 ,<
0 VALUE OLDCOMMA@
1 VALUE  I-ALIGNMENT ( Instruction alignment )
: CONTAINED-IN  OVER AND = ; ( leaving it IS      )
: CHECK26 AT-REST? 0= !26" ;  ( Error at postit time )
: CHECK30 DUP OLDCOMMA@ < !30" DUP TO OLDCOMMA@ ;
: RESET-BAD   BA-XT @ DUP IF PUSH ] DROP  BA-DEFAULT @ TBA ! ;

\ TALLIES  ------------------------------------------------
: !TALLY  0 TBI !  0 TBY !  RESET-BAD  !OLDCOMMA  ; !TALLY
: TALLY:, STR TBI ! CSTR TBY ! C@ TBA OR!U ;
: TALLY:| STR TBI AND!? CSTR TBY OR!? C@ TBA OR!U ;
: TALLY:,, CSTR CHECK30 TBY AND!? C@ TBA OR!U ;

: |SHOW` ; \ DUP CR 2- ?ID. DUP @ H.
 \ EX |SPC TO BK H DUP H. 6 A-L |[] BYTES. ;

\ Bits  ON COMMAERS  ---------------------------------
\ $80 (RX,) address relative to IP : CELL
\ $40 (RB,) address relative to IP : byte  
\ $20 SG,   Segment: WORD
\ $10 P,    port number : byte
\  $8 IS,   immediate byte data, obligatory size
\  $4 IX,   immediate data : cell
\  $4 IB,   immediate byte data
\  $2 X,    immediate data : address/offset
\  $2 B,    immediate byte : address/offset
\  $1 W,    obligatory word

\ Bits - BI  -------------------------------------
\   1 OPERAND IS BYTE
\   2 OPERAND IS CELL
\   4 OFFSET DB|
\   8 ADDRESS  DW|   
\  10 Register op    
\  20 Memory op 
\  40 D0             
\  80 [BP]    
         
\ MAKERS -------------------------------------------------
: TB, BI^ C, ; \ ON COMPILE TIME ONLY
IS-A IS-COMMA : COMMAER CREATE , TB, 0 C, ,' 
      DOES> REMEMBER CELL+ STR BBB[] CELL+ TALLY:,, @EXEC ;         
IS-A IS-1PI   : 1PI CREATE-- , TB,  1 C, DOES> REMEMBER 
: POSTIT @+  CHECK26 !TALLY   !POSTIT CSTR  BBB[]
   TALLY:, C@ assemble, ;
IS-A IS-2PI
: 2PI CREATE-- SPLIT, TB, 2 C, DOES> REMEMBER POSTIT ;
IS-A IS-1FI   : 1FI CREATE-- 0 BB, TB, 0 C, DOES> REMEMBER
: FIXUP>   STR H CELL- OR!? C@ BBB[] TALLY:| CHECK32 ;
IS-A IS-2FI   
: 2FI CREATE-- SPLIT, TB, 0 C, DOES> REMEMBER FIXUP> ;
: IS-PI DUP IS-1PI SWAP IS-2PI   OR  ;
: IS-FI DUP IS-1FI SWAP IS-2FI   OR  ;
: IS-OP DUP IS-PI  OVER IS-FI    OR  SWAP IS-COMMA OR ;
IS-A `IS-END   : `ENDER <BUILD DOES> REMEMBER ;; ,< \ NO TAIL

\ ------------- DATA STRUCTURES --------------------------
\ A row of dea's representing a disassembly 
12 KIT: DISS    : !DISS AT DISS KIT! ;  !DISS
: DISS-  DISS DROP ;     \ Discard last item of `DISS'
: DISS" AT DISS KIT" ;   \ `DISS' STATE  
: DISS? AT DISS KIT? ;   \ `DISS' COUNT 
: DISS. |CR SPC DISS" STR| @+ XEP| DUP IS-COMMA
  IF J AT DISS 6 + - . THEN %ID.  ;   
' DISS.  VECTOR DISS-VECTOR 

\ ------------- TRYERS ---------------------------
\ : @BBW. [ CSTR ] AHEAD   : SPHHH. XEP|  SP@  TBI SWAP
\ : @HHH. [ STR ] THEN CR H. SPC STR H. (IXEC H. EX H. DROP ;
\ : DB2. BI^ DUP @BBW.     : DB. SPHHH. ". DBG. ;

: TRY-PI
\ "TRY-PI1" DB.
   DUP IS-PI 0; AT-REST? 0;
   @BBB
\ "TRY-PI4" DB2.
   TALLY:, 
\ "TRY-PI5" DB.
: DISS+ DUP TO DISS 
 \ DISS. 
;

: TRY-FI
\ "TRY-FI1" DB.
 DUP IS-FI 0; @BBB
\ "TRY-FI3" DB2.
 @  TBI @
\ DBG.
 CONTAINED-IN
\ DBG.
 0;
     @BBB
\ "TRY-FI4" DB2.
	 TALLY:|
\ "TRY-FI5" DB.
	 DISS+ 
;

: BACKTRACK? 0;  : BACKTRACK DROP DISS  \"BACKTRACKING_" 
( ."Failed_at_:" DUP %ID. CR )   >DEA \ REBUILD ;
: REBUILD  !TALLY   DISS? 0;  DISS" !DISS STR| @+ XEP| |DROP 
: TRYER   TRY-PI TRY-FI  
: TRY-COMMA
\ "TRY-COMMA1" DB.
    DUP IS-COMMA 0;
    @BBB 
\ "TRY-COMMA2" DB2.
    2+
	C@  TBY @
\ DBG.
	CONTAINED-IN
\ DBG.
	0;
	@BBB 
\ "TRY-COMMA4" DB2.
    2+
	TALLY:,, 
\ "TRY-COMMA5" DB.
	DISS+ ;

: `AWORD: C: : Z, DOES> CR PUSH STARTVOC AHEAD BEGIN X: SWAP
 (IXEC  >DEA THEN DUP VOCEND?  UNTIL POP 2DROP ;

: `|WIDI DUP EX 0; DUP %ID. 
1L OVER DEA? 1+ CNTC + U< 0; CR ; \ SHOW sift WORDS
`AWORD: SHOW-ALL `|WIDI IS-OP    ; \ SHOW OPLIST 
`AWORD: SHOW-PI  `|WIDI IS-PI    ; \ SHOW IT 
`AWORD: SHOW-FI  `|WIDI IS-FI    ; \ SHOW IT 
`AWORD: SHOW-,   `|WIDI IS-COMMA ; \ SHOW IT 

: RESULT? AT-REST? DISS? AND   BAD? 0= AND ;
: .RESULT RESULT? 0; DISS-VECTOR  DISS- REBUILD ;
: SHOW-STEP  TRYER  .RESULT >DEA  BAD? BACKTRACK?
    CALL WHILE| BACKTRACK THEN DUP VOCEND? DISS? AND ;	
>, >FILE \ SAVE SHOW: TO FILE
: SHOW: !DISS   !TALLY DEA' DUP BEGIN SHOW-STEP  OVER
 DISS" DROP @ - OVER VOCEND? OR UNTIL DROP DROP ;


: MC@-S 2DUP MC<0 AHEAD XEP| AS-POINTER@ 
: GETCODE OVER >CNT@   THEN
: MC@ 0 -ROT : lsbytes <ITER| 
: lsbyte@  C@ SWAP B* OR  ;
: INSTRUCTION  ISS@   ISL@   MC@ ;
: COMPATIBLE? TBA @ OR BADPAIRS? 0= ;
: `ADORN-ADDRESS DROP CR ;


( ---------------- DISASSEMBLERS ------------------------ )
: DIS-PI DUP IS-PI 0;
    AT-REST? 0;
    @BBB GETCODE  NOT     \ CREATE OP MASK
    AT GETCODE   AND      \ APPLY TO REAL CODE
    OVER >DATA @ = 0;     \ COMPARE WITH OP-DATA
        BI^  TALLY:,
		DISS+ 
		DUP TO LATEST-INSTRUCTION@
        AS-POINTER@ TO ISS@      \ OLD ADDRESS TO ISS
: ADJUST-ADDRESS DUP >CNT@ `|ASP + ; 

: DIS-FI DUP IS-FI 0;
   @BBB  @ TBI @ CONTAINED-IN 0;
   BI^  @ INSTRUCTION AND   OVER >DATA @ = 0;
   BA^ C@  COMPATIBLE? 0;
   BI^ TALLY:| DISS+ ;

: DIS-COMMA DUP IS-COMMA 0;
   @BBB 2+ C@ TBY @ CONTAINED-IN 0;
   BA^ C@  COMPATIBLE? 0;
   BI^ TALLY:,, DISS+ ;

: .DISS   DISS" STR| @+ XEP|  DUP IS-COMMA IF ? %ID. 
: .COMMA   DUP >DIS @ IF   DUP >DIS @EXEC  ] 
: .COMMA-STANDARD  TO GETCODE U. ADJUST-ADDRESS %ID. ;
: .COMMA-SIGNED TO GETCODE . ADJUST-ADDRESS %ID. ;

: DDD   : `(DISASSEMBLE)   !DISS !TALLY STARTVOC 
: `((DISASSEMBLE)) SWAP DUP TO AS-POINTER@ PUSH 3 SPACES
    ( startdea -- ) BEGIN DIS-PI DIS-FI DIS-COMMA >DEA
    DUP VOCEND? RESULT? OR UNTIL DROP
    RESULT? IF .DISS     \ Advances pointer past commaers
      \ LATEST-INSTRUCTION @ >PRF @ BA-XT !
      RDROP AS-POINTER@ ;THEN POP
: SHOW-MEM  UNTILZ| CSTR . ."C,__" DUP I-ALIGNMENT UMOD ;              
: D-F ( : FORCED-DISASSEMBLY )
    !DISS   !TALLY   AS-POINTER@ SWAP `((DISASSEMBLE)) DROP ;
: D-R ( : DISASSEMBLE-RANGE ) SWAP   BEGIN DUP `ADORN-ADDRESS
    `(DISASSEMBLE) 2DUP 1- U< 0= UNTIL   2DROP  ;
