0 VAR _ASG_

: ( ') PARSE 2DROP ; 
' (     =: (`
' =:    =: ALIAS
: REQUIRE ' DROP ;
' 2+    =: CELL+
' 2-    =: CELL-
' PUSH  =: >R
' POP   =: R>
' I     =: R@
' 2*    =: CELLS
' STR   =: @+
' NAME> =: >CFA
' CREATE  =: CREATE--
' NEG   =: NEGATE
' >NAME =: >NEXT%
' CSTR  =: COUNT

: RSHIFT TIMES; 2/ ;
: LSHIFT TIMES; 2* ;
: ?MEM
 CR HERE (LIT _ASG_ - . ."BYTES"
 CR T HERE - . ."EMPTY_BYTES" ;
: INVERT NOT ;
: ?ERROR SWAP DROP ?; CR . !"ERROR" ; \ '' defeats all checks. 
: >BODY  CELL+ ;

: SET VARIABLE CELLS ALLOT  ;
: !SET DUP >R CELL+ R> ! ;
: SET+! DUP >R @ !+ R> ! ;
: SET? @+ - ;
: SETX @+ NUP - 2/ ; 


( ############### PRELUDE ####################################)
REQUIRE ALIAS
'   HERE  ALIAS AS-HERE
'   C,    ALIAS AS-C,
'  ALLOT  ALIAS AS-ALLOT
\ '  H 2+   ALIAS _AP_
: ADORN-ADDRESS DROP CR ;

( ############### PART I ASSEMBLER ###################### )

\ : @- CELL- >R @I R>  ;
( CHAR - CONSTANT &-     CHAR ~ CONSTANT &~                 )
CREATE `TABLE 1 , 1 ,
: ROTLEFT `TABLE + @ UM* OR 
\   IF?;
;

( ------------- UTILITIES, SYSTEM DEPENDANT -----------------)
\ : %ID. >NFA @ $@ TYPE SPACE ;
: %ID. ID. ; ( Print a definitions name from its DEA.)
\ VOCABULARY ASSEMBLER IMMEDIATE   ASSEMBLER DEFINITIONS HEX
( We use the abstraction of a dea "dictionary entry address".)
( aqa "xt"  Return the DEA from "word". 1]                   )
\ DENOTATION : % POSTPONE ' ; PREVIOUS
: %>BODY >CFA @ >BODY ; ( From DEA to the DATA field of a wrd)
\ : %BODY> BODY> CFA> ; ( Reverse of above)
: %>DOES CELL- ; ( From DEA to the DOES> pointer for a)
: IGNORE? 1+ C@ '~ = ;
: VOCEND? C@ 0= ;
: STARTVOC T ;

0 VALUE IS-A^
: IS-A 0 CONST HERE CELL- TO IS-A^  DOES> @ SWAP @ = ;
: REMEMBER` HERE %>DOES IS-A^ ! ; 
( ------------- UTILITIES, SYSTEM INDEPENDANT ------- )
(   The FIRST bitset is contained in the SECOND one,)
: CONTAINED-IN OVER AND = ;
: lsbyte, DUP AS-C, 0008 RSHIFT ;
: lsbyte@ 1- SWAP 8 LSHIFT OVER C@ OR SWAP ;
: lsbytes  >R R@ + 
  BEGIN R> DUP
\   IF?;
  
  WHILE 1- >R  lsbyte@ 
\   IF?;
  
  REPEAT 2DROP ;
: MC@ 0 -ROT lsbytes ;
: MC<0 + 1- C@ $80 AND $80 = ;
: MC@-S 2DUP MC<0 -ROT lsbytes ;

( ------------- ASSEMBLER, BOOKKEEPING -----------------------)
  
VARIABLE TALLY-BI   ( Bits that needs fixed up)
  
VARIABLE TALLY-BY   ( Bits represent a commaer to be supplied)
  
VARIABLE TALLY-BA   ( bad if two consequitive bits are up)
VARIABLE BA-DEFAULT    0 BA-DEFAULT !
VARIABLE OLDCOMMA ( Previous comma, or zero)
VARIABLE ISS  ( Start of current instruction)
VARIABLE ISL  ( Lenghth of current instruction)
VARIABLE BA-XT
: RESET-BAD   BA-XT @ DUP IF EXECUTE ;THEN
   DROP  BA-DEFAULT @ TALLY-BA !  ;
: !TALLY   0 TALLY-BI !
        0 TALLY-BY !   RESET-BAD   0 OLDCOMMA ! ;
   0 BA-XT !   !TALLY
( Return: instruction IS complete, or not started)
: AT-REST? TALLY-BI @ 0=   TALLY-BY @ 0=  AND ;
( For N : it CONTAINS bad pairs)
: BADPAIRS? DUP 1 LSHIFT AND $AAAA ( AAAA AAAA AAAA) AND ;
: BAD? TALLY-BA @ BADPAIRS? ;
: COMPATIBLE? TALLY-BA @ OR BADPAIRS? 0= ;
: CHECK26 AT-REST? 0= 26 ?ERROR ;  ( Error at postit time )
: CHECK32 BAD? 32 ?ERROR ; ( Always an error )
: CHECK31 2DUP SWAP CONTAINED-IN 0= 31 ?ERROR ;
: CHECK31A 2DUP OVER >R RSHIFT 1
         OR OVER LSHIFT R> <> 31 ?ERROR ;
: CHECK33 2DUP SWAP INVERT CONTAINED-IN 0= 31 ?ERROR ;
: CHECK28 2DUP AND 28 ?ERROR ;
: CHECK29 2DUP OR -1 - 29 ?ERROR   ;
: CHECK30 DUP OLDCOMMA @ < 30 ?ERROR DUP OLDCOMMA ! ;
( Or DATA into ADDRESS. If bits were already up its wrong.)
: OR! >R @I  CHECK28 OR R> ! ;
: OR!U >R @I  OR R> ! ; ( Or DATA into ADDRESS. Unchecked.)
: AND! >R INVERT @I CHECK29 AND R> ! ;
( ------------- ASSEMBLER, DEFINING WORDS    -----------)
: >DATA  %>BODY  ;
( Work on TALLY-BI etc.     posits fixups and commaers.  )
(              Effects  for   |||    |||       |||       )
: >BI %>BODY CELL+ ;        ( OR!    AND!      --        )
: >BY %>BODY 2 CELLS + ;    ( OR!    OR!       AND!      )
: >BA %>BODY  3 CELLS + ;   ( OR!U   OR!U      OR!U      )
: >CNT %>BODY 4 CELLS + ;   ( `HERE' advances with count )
: >DIS %>BODY 5 CELLS + ;
: >PRF %>BODY 5 CELLS + ;
: assemble, ISL @ DROP; TIMES; lsbyte, ;
: !POSTIT  AS-HERE ISS !  0 OLDCOMMA ! ;
: TALLY:,   @+ TALLY-BI !  @+ TALLY-BY !   @+ TALLY-BA OR!U
    @+ ISL !   @ BA-XT ! ;
: POSTIT   CHECK26   !TALLY   !POSTIT
    @+ >R   TALLY:,   R> assemble, ;
: BUILD-IP >R , , , , R> , 0 ( prefix) , ;
IS-A IS-1PI
: 1PI  CHECK33 CREATE-- 1 BUILD-IP DOES> REMEMBER POSTIT ;
IS-A IS-2PI
: 2PI  CHECK33 CREATE-- 2 BUILD-IP DOES> REMEMBER POSTIT ;
: IS-PI  >R 0
    R@ IS-1PI OR  R@ IS-2PI OR \ R@ IS-3PI OR   R@ IS-4PI OR
R> DROP ;
: TALLY:|   @+ TALLY-BI AND!
   @+ TALLY-BY OR!   @ TALLY-BA OR!U ;
: FIXUP>   @+ ISS @ OR!   TALLY:|   CHECK32 ;
IS-A IS-xFI
: xFI   CHECK31 CREATE-- , , , , DOES> REMEMBER FIXUP> ;
: FIXUP-DATA @+ ROT SWAP LSHIFT ISS @ OR! TALLY:| CHECK32 ;
IS-A IS-DFI
: DFI   CHECK31A CREATE-- , , , , DOES> REMEMBER FIXUP-DATA ;

( *************** OBSOLESCENT **************************    )

\ Reverses bytes in a WORD. Return IT.
0 VAR `BYTES
: REVERSE-BYTES `BYTES !  `BYTES DUP CELL+ REVERT `BYTES @ ;
: CORRECT-R 0 CELL+ ISL @ - ROTLEFT ;
: TALLY:|R  @+ CORRECT-R TALLY-BI AND!
   @+ TALLY-BY OR!   @ TALLY-BA OR!U ;
: FIXUP<   CORRECT-R ISS @ OR!   ;
IS-A IS-FIR   : FIR   CHECK31 CREATE--
        REVERSE-BYTES , REVERSE-BYTES , , ,
    DOES> REMEMBER @+ FIXUP< TALLY:|R  CHECK32 ;
IS-A IS-DFIR   : DFIR   CHECK31 CREATE-- , REVERSE-BYTES , , ,
    DOES> REMEMBER @+ SWAP >R LSHIFT REVERSE-BYTES FIXUP< R>
          TALLY:|R  CHECK32 ;

( *************** PREFERRED NOT YET USED *******************)

: (AND!BYTE) >R $FF AND INVERT R@ C@ CHECK29 AND R> C! ;
: AND!BYTE BEGIN 2DUP (AND!BYTE) SWAP 8 RSHIFT
              DUP WHILE SWAP 1+ REPEAT 2DROP ;
: (OR!BYTE) >R R@ C@  CHECK28 OR R> C! ;
: OR!BYTE BEGIN 1- 2DUP (OR!BYTE) SWAP
           8 RSHIFT DUP WHILE SWAP REPEAT 2DROP ;
: TALLY:|R'  @+ TALLY-BI AND!BYTE
   @+ TALLY-BY OR!   @ TALLY-BA OR!U ;
: FIXUP<'   @+ ISS @ ISL @ + OR!BYTE   TALLY:|R'  CHECK32 ;

( *************** END PREFERRED ****************************  )
: TALLY:,, CELL+   @+ CHECK30 TALLY-BY AND!   @ TALLY-BA OR!U ;
: COMMA @+ >R  TALLY:,,  CHECK32   R> EXECUTE ;
IS-A  IS-COMMA
: COMMAER CREATE  , 0 , , , , , DOES> REMEMBER COMMA ;

( ------------- ASSEMBLER, SUPER DEFINING WORDS --------------)

CREATE PRO-TALLY 3 CELLS ALLOT  ( Prototype for TALLY-BI BY BA)
: T! PRO-TALLY !+ !+ !+ DROP ;
: T!R   REVERSE-BYTES T! ;
: T@ PRO-TALLY 3 CELLS +  @- @- @- DROP ;
: 1FAMILY, 2DROP; TIMES; DUP >R T@ R> 1PI   OVER+ ;
: 2FAMILY, 2DROP; TIMES; DUP >R T@ R> 2PI   OVER+ ;
: xFAMILY| 2DROP; TIMES; DUP >R T@ R> xFI   OVER+ ;
: FAMILY|R 2DROP; TIMES; DUP >R T@ REVERSE-BYTES R> FIR OVER+ ;
: xFAMILY|F 2DROP; TIMES; DUP >R T@ R> DFI   OVER+ ;

( ############### PART II DISASSEMBLER ##################### )

( ------------- DATA STRUCTURES --------------------------)
12 SET DISS   ( A row of dea's representing a disassembly)
: !DISS DISS !SET ;
: .DISS-AUX DISS @+ NUP - 2/ CR :; TIMES; 
    @+ DUP IS-COMMA OVER IS-DFI OR IF DUP DISS - . THEN ID. ;
    
VARIABLE DISS-VECTOR    ' .DISS-AUX DISS-VECTOR !
: +DISS DISS SET+! ;
: DISS? DISS SET? ;
: DISS- 0 CELL+ NEGATE DISS +! ;

( ------------- TRYERS ----------------------------)

: TRY-PI
    DUP IS-PI IF
    AT-REST? IF
        DUP >BI TALLY:,
        DUP +DISS
    THEN
    THEN
\   IF?;
;

: TRY-xFI
   DUP IS-xFI IF
   DUP >BI @ TALLY-BI @ CONTAINED-IN IF
       DUP >BI TALLY:|
       DUP +DISS
   THEN
   THEN
\   IF?;
;

: TRY-DFI
   DUP IS-DFI IF
   DUP >BI @ TALLY-BI @ CONTAINED-IN IF
       DUP >BI TALLY:|
       DUP +DISS
   THEN
   THEN
\   IF?;
;

: TRY-FIR
   DUP IS-FIR IF
\   IF?;
   DUP >BI @ CORRECT-R TALLY-BI @ CONTAINED-IN IF
\   IF?;
       DUP >BI TALLY:|R
       DUP +DISS
   THEN
   THEN
 \  IF?;
;

: TRY-COMMA
  DUP IS-COMMA 
  0;
    DUP >BY @ TALLY-BY @ CONTAINED-IN 
    0;
      DUP >BI TALLY:,,
      DUP +DISS
\   IF?;
;

( Generate bookkeeping such as to correspond with `DISS'. )
: REBUILD
    !TALLY DISS? 0; DISS SETX !DISS  TIMES;
      @+ TRY-PI TRY-xFI TRY-DFI TRY-FIR TRY-COMMA DROP 
\   IF?;
;

: BACKTRACK
(   ." BACKTRACKING"                                     )
    DROP DISS @ @- DISS !
(   DROP DISS @ 0 CELL+ - @                              )
(   "Failed at :" TYPE DUP ID. CR                        )
    >NEXT%
(   DISS-                                                )
    REBUILD
;

: RESULT? AT-REST? DISS? AND   BAD? 0= AND ;
: .RESULT
    RESULT? 0;
        DISS-VECTOR @ EXECUTE
        DISS-
        REBUILD
\   IF?;
;

: SHOW-STEP
        TRY-PI TRY-DFI TRY-xFI TRY-FIR TRY-COMMA
        .RESULT
        >NEXT%
(       DUP ID.                                               )
        BAD? IF BACKTRACK THEN
        BEGIN DUP VOCEND? DISS? AND WHILE BACKTRACK REPEAT
\   IF?;
;

( Show all the instructions present in the asembler vocabulary)
: SHOW-ALL
    !DISS   !TALLY
    STARTVOC BEGIN
       SHOW-STEP
    DUP VOCEND? UNTIL DROP
\   IF?;
;

( Show all the opcodes present in the assembler vocabulary )
: SHOW-OPCODES
    !DISS   !TALLY
    STARTVOC BEGIN
       DUP IS-PI IF DUP %ID. THEN >NEXT%
    DUP VOCEND? UNTIL DROP
   IF?;
;

( Show at least all instructions valid for the "OPCODE" given)
: SHOW:
    !DISS   !TALLY
    ' DUP BEGIN
        SHOW-STEP
     OVER DISS CELL+ @ - OVER VOCEND? OR UNTIL DROP DROP
   IF?;
;

( ------------- DISASSEMBLERS -------------------------------)

VARIABLE AS-POINTER       HERE AS-POINTER !

: INSTRUCTION  ISS @   ISL @   MC@ 
   IF?;
;


VARIABLE LATEST-INSTRUCTION

: DIS-PI
  DUP IS-PI 0;
   IF?;
    AT-REST? 0;
   IF?;
      DUP >BI OVER >CNT @  MC@ INVERT
      >R AS-POINTER @ OVER >CNT @  MC@ R>   AND
      OVER >DATA @ = 0;
   IF?;
        DUP >BI TALLY:,
   IF?;
        DUP +DISS
   IF?;
        DUP LATEST-INSTRUCTION !
   IF?;
        AS-POINTER @ ISS !
   IF?;
        DUP >CNT @ AS-POINTER +!
   IF?;
;

: DIS-xFI
   IF?;
  DUP IS-xFI 0;
   IF?;
    DUP >BI @ TALLY-BI @ CONTAINED-IN 0;
   IF?;
      DUP >BI @ INSTRUCTION AND   OVER >DATA @ = 0;
   IF?;
        DUP >BA @  COMPATIBLE? 0;
   IF?;
          DUP >BI TALLY:|
   IF?;
          DUP +DISS
   IF?;
;

: DIS-DFI
  DUP IS-DFI 0;
    DUP >BI @ TALLY-BI @ CONTAINED-IN 0;
      DUP >BA @  COMPATIBLE? 0;
        DUP >BI TALLY:|
        DUP +DISS
   IF?;
;

: DIS-DFIR
  DUP IS-DFIR 0;
    DUP >BI @ CORRECT-R   TALLY-BI @ CONTAINED-IN 0;
      DUP >BA @  COMPATIBLE? 0;
        DUP >BI TALLY:|R
        DUP +DISS
   IF?;
;

: DIS-FIR
  DUP IS-FIR 0;
    DUP >BI @ CORRECT-R   TALLY-BI @ CONTAINED-IN 0;
      DUP >BI @ CORRECT-R   INSTRUCTION AND
                        OVER >DATA @ CORRECT-R = 0;
        DUP >BA @  COMPATIBLE? 0;
          DUP >BI TALLY:|R
          DUP +DISS
   IF?;
;

: DIS-COMMA
  DUP IS-COMMA 0;
    DUP >BY @ TALLY-BY @ CONTAINED-IN 0;
      DUP >BA @  COMPATIBLE? 0;
        DUP >BI TALLY:,,
        DUP +DISS
   IF?;
;

( Print a disassembly for the data-fixup DEA.             )
: .DFI
    INSTRUCTION   OVER >BI @ AND   OVER >DATA @ RSHIFT   U.
    %ID.                         ( DEA -- )
   IF?;
;

( Print a disassembly for the data-fixup from reverse DEA.)
: .DFIR
    INSTRUCTION   OVER >BI @ CORRECT-R AND   OVER >DATA @
     RSHIFT  REVERSE-BYTES CORRECT-R U.
    %ID.                         ( DEA -- )
   IF?;
;

( Print a standard disassembly for the commaer DEA.   )
: .COMMA-STANDARD
    AS-POINTER @ OVER >CNT @ MC@ U.
    DUP >CNT @ AS-POINTER +!
    %ID.                         ( DEA -- )
   IF?;
;

( Print a signed disassembly for the commaer DEA.     )
: .COMMA-SIGNED
    AS-POINTER @ OVER >CNT @ MC@ .
    DUP >CNT @ AS-POINTER +!
    %ID.                         ( DEA -- )
;

: .COMMA   DUP >DIS @ IF   DUP >DIS @ EXECUTE   
   IF?;
    ;THEN
    .COMMA-STANDARD    
   IF?;
;

: %~ID. DUP IGNORE? IF DROP ;THEN %ID.  ;

( Print the disassembly `DISS'            )
: .DISS   DISS SETX TIMES;
    @+
    DUP IS-COMMA IF
   IF?;
        .COMMA
    ;THEN DUP IS-DFI IF
   IF?;
        .DFI
    ;THEN DUP IS-DFIR IF
   IF?;
        .DFIR
    ;THEN
   IF?;
    %~ID.
;

VARIABLE I-ALIGNMENT  1 I-ALIGNMENT ! ( Instruction alignment )

: SHOW-MEMORY  
    BEGIN COUNT . ."  C, "
   IF?;
             DUP I-ALIGNMENT @ UMOD 
    WHILE 
   IF?;
    REPEAT 
   IF?;
;

: ((DISASSEMBLE))
    SWAP
    DUP AS-POINTER !   >R
    3 SPACES
    ( startdea -- ) BEGIN
        DIS-PI DIS-xFI DIS-DFI DIS-DFIR DIS-FIR DIS-COMMA
        >NEXT%
(       DUP ID. ." : "  DISS-VECTOR @ EXECUTE                 )
    DUP VOCEND? RESULT? OR UNTIL DROP
    RESULT? IF
   IF?;
      .DISS     \ Advances pointer past commaers
      LATEST-INSTRUCTION @ >PRF @ BA-XT !
      RDROP AS-POINTER @
    ;THEN
      R> SHOW-MEMORY
   IF?;    
;

\ NDFGDFG
: (DISASSEMBLE)   !DISS !TALLY STARTVOC ((DISASSEMBLE)) ;

: FORCED-DISASSEMBLY
    !DISS   !TALLY   AS-POINTER @ SWAP ((DISASSEMBLE)) DROP 
;

: DISASSEMBLE-RANGE  SWAP   BEGIN DUP ADORN-ADDRESS
    (DISASSEMBLE) 2DUP 1+ U< UNTIL   2DROP  
;

: DDD (DISASSEMBLE) 
   IF?;
;

: D-R DISASSEMBLE-RANGE 
   IF?;
;
