
A386 = 0

pd  equ dword ptr
pw  equ word  ptr
pb  equ byte  ptr

Zero?_  MACRO   REG
  OR    REG,REG
ENDM

JMPS    MACRO LBL
  jmp   SHORT LBL
ENDM

SKIPA   MACRO
  DB    03DH
ENDM

SKIPB   MACRO
  DB    03CH
ENDM

SKIPR   MACRO reg
  mov   reg,0
  org   $-2
ENDM

SKIPC   MACRO reg
  mov   reg,0
  org   $-1
ENDM

X       MACRO
  xchg  Rsp,DSP
ENDM

TO_R    MACRO  REG
  PUSH   REG
ENDM

R_TO    MACRO  REG
  POP    REG
ENDM

TO_D    MACRO  REG
  X
  PUSH   REG
  X
ENDM

D_TO    MACRO  REG
  X
  POP    REG
  X
ENDM

rchg    macro   reg
  xchg  ax,reg
endm

DROP_   macro   
  LODSW
endm

SWAP_   macro   
  XCHG  TOP,NXT
endm

PUSHR_  MACRO REG
  DEC   DSP
  DEC   DSP
  MOV   NXT,REG
ENDM  

POPR_   macro   reg
  xchg  ax,reg
  DROP_
endm

CLR     macro   reg
  XOR   reg,reg
endm

ALIGN_  MACRO
  IF ($-START) AND 1
  NOP
  ENDIF
ENDM

P_  MACRO NAM
  ALIGN_
  NOP
NAM:
  org   $-1
ENDM

L_      MACRO NAM
  ALIGN_  0
NAM:
ENDM

; REGISTER usage
ip  = BX  ; BX INSTRUCTION POINTER
dsp = SI  ; SI DATA STACK POINTER
rsp = sp  ; SP RETURN STACK POINTER
top = Ax  ; AX DATA STACK TOP REGISTER
NXT   EQU PW [DSP]
topL= AL  ; AX DATA STACK TOP REGISTER
topH= AH  ; AX DATA STACK TOP REGISTER
w   = di  ; DI WORK REGISTER
ar  = BP  ; BX ARITHMETIC ( ADDRESS ) register 
DR  = CX  ; DX DATA REGISTER
DRL = CL  ; DX DATA REGISTER
DRH = CH  ; DX DATA REGISTER


; MINIMAL SET INTERPRETTER COMMANDS
; CONTROL      COMMANDS  (IF (JUMP (RETURN (IF-  ;(IO
; RETURN STACK COMMANDS  POP PUSH 
; DATA STACK   COMMANDS  DUP J
; DATA TRANSF  COMMANDS  @R+ !R+ XCHG XR
; MATH         COMMANDS  +2/ +* -/ NAND

MyCseg  segment para  use16

        assume cs: MyCseg,  ds: MyCseg, ss: MyCseg, es: MyCseg

        org 100h

STKSZ   = 512
_R_TOP  = -64            
_S_TOP  = _R_TOP-STKSZ   
_TIB    = _S_TOP-STKSZ-256-_R_TOP   
_TBUF   = _TIB-256         
_SBUF   = _TBUF-256         
_VOCTOP = _SBUF-256

Start  Label byte   
L_ _START
  mov   ah,4ah     
  mov   bx,1000h        ; only 64k allocate
  int   21h
P_ _ABORT
  CLD
  MOV   RSP,_R_TOP
  MOV   DSP,_S_TOP
  CALL  @RETURN
  
_INIT   DW 0

; IO COMMANDS vvvvvvvvvv  ---------------------------

L_ _BK
  DW _DUP,_IO
  CLR   AX
  INT   16H
  ZERO?_ TOPL
  JE  @@1
@W_B:  
  CLR   TOPH
@@1: RET

P_ _OSTR
  R_TO 	W			    ; TAKE TOP OF THE RETURN STACK
  MOV   DRL,[W]	  ; USE RETURN TOP AS DATA ADDRESS
  CLR   DRH
  ADD   DR,W
  INC   DR
  INC   DR
  AND   DRL,0FEH
  XCHG  DR,W
  JMPS  @DUPW ; 
    
P_ _IO  				  ; IF INPUT PARAMS = OUTPUT PARAMS 
  PUSH  AR  ; PRESERVE REGISTERS
  MOV   W,IP
  MOV   BX,[DSP]
  MOV   CX,[DSP+2]
  MOV   DX,[DSP+4]
  CALL  W	 ; ,"^\~|~?~^V^A+~^R~+~X+~^S~+~^Q~+~C~"
  POP  	AR	; RESTORE REGISTERS
  JMPS  @RETURN

; IO           COMMANDS  (IO  ^^^^^^^

; CONTROL      COMMANDS  ----------------------------

P_ _?SKIP			; ?SKIP
  Zero?_    TOP  
  JZ    @SKIPDR
  JMPS  @MAIN

P_ _IF	 			; (IF
  Zero?_    TOP  
  JE    @JUMPDR 
  
P_ _SKIPDR
@SKIPDR:
  DROP_
P_ _SKIP
@SKIP:
  INC   ip
  INC   ip
  JMPS  @MAIN

P_ _IFM    			; (IF-
  JMPS  @IFM
  
P_ _NEXTP
  POP   DR
  INC   DR
  PUSH  DR
@next:  
  JnE   @JUMP  
@SKIPrd:
  pop   dr
  JMPS  @skip
    
P_ _NEXT
  POP   DR
  DEC   DR
  PUSH  DR
  INC   DR
  JMPS  @next
  
P_ _MIF    			; (-IF
  INC   TOP
@IFM:
  DEC   TOP			; DECREMENT TOP AND BRANCH ON POSITIVE 
  JS    @SKIP		; ON NEGATIVE - SKIP BRANCH
  JMPS  @JUMP 
  
P_ _NFOR
  NOT   TOP
P_ _FOR
  TO_R	TOP
@JUMPDR:  
  DROP_
P_ _JUMP    			; (JUMP
@JUMP:
  MOV   IP,[IP]		; JUST BRANCH
  JMPS  @MAIN

; DATA TRANSFER  COMMANDS -----------------------------------

P_ _BE
  MOV     AH,0EH
  INT     10H
  JMPS    @DROP
        
P_ _RSTM			; !R-
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  DEc   W			; DECREMENT ADDRESS
  DEc   W			; DECREMENT ADDRESS
  SKIPB
  
P_ _RST			  ; !R
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  MOV   [W],TOP		; USE RETURN TOP AS DATA ADDRESS
  JMPS  @WSAVE		; FETCH NEXT DATA TO TOP

P_ _RLDM			; @R-
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  DEc   W			; DECREMENT ADDRESS
  DEc   W			; DECREMENT ADDRESS
  SKIPB
  
P_ _RLD			  ; @R
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  MOV   DR,[W]		; USE RETURN TOP AS DATA ADDRESS
  JMPS  @DUPW ; 

P_ _RLDP			; @R+
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  MOV   DR,[W]		; USE RETURN TOP AS DATA ADDRESS
  inc   W			; INCREMENT ADDRESS
  JMPS  @RINCW			; INCREMENT ADDRESS

P_ _RSTBP			; C!R+
  R_TO 	W			; USE RETURN TOP AS DATA ADDRESS
  STOSB
  JMPS  @WSAVE			; FETCH NEXT DATA TO TOP

P_ _RSTP			; !R+
  R_TO 	W			; USE RETURN TOP AS DATA ADDRESS
  STOSW
@WSAVE:
  TO_R  W
  DROP_
  JMPS  @MAIN			; FETCH NEXT DATA TO TOP

P_ _RLDBP			  ; C@R+
  R_TO 	W			  ; TAKE TOP OF THE RETURN STACK
  MOV   DRL,[W]	; USE RETURN TOP AS DATA ADDRESS
  CLR   DRH
@RINCW:  
  inc   W			  ; INCREMENT ADDRESS
@DUPW:  
  TO_R  W			  ; STORE ADDRESS BACK TO RETURN STACK
@DUP:  
  PUSHR_	TOP	    ; DUPLICATE DATA TOP REGISTER
@XCHG:  
  XCHG  TOP,DR
  JMPS  @MAIN

P_ _XCHG				; XCHG
  R_TO	DR			; EXCHANGE TOP ELEMENTS
  TO_R  TOP			; OF TWO STACKS
  JMPS  @XCHG 
  
P_ _XA				  ; XA
  R_TO	W			  ; EXCHANGE RETURN TOP ELEMENT
  TO_R 	ar			; 
  MOV	ar,W		  ; WITH ADDED REGISTER
  JMPS  @MAIN 
  
; MAIN  LOOP  ---------------------------------------

P_ _RDRPX
  R_TO  DR
P_ _RET  
@RETURN:
  r_to  IP			; POP IP FROM RETURN TOP ELEMENT  
@MAIN:
  MOV   DR,[IP]	
  LEA   IP,[IP+2]
  test 	DRL,1		; ADDRESS ODD ?
  je    @nest		; NOT ODD ADDRESS - NEST THEN
  dec   DR			; MAKE ODD ADDRESS EVEN
  JMP   DR			; BRANCH TO PRIMITIVE
P_ _EX
  R_TO  DR
@NEST:				  ; (NEST
  to_r  IP			; PUSH OLD IP
  MOV   IP,DR		; PUSH NEW IP
  JMPS  @MAIN   

;  STACK COMMANDS   --------------------------------

P_ _NIP
  SWAP_
P_ _DROP				; DUPLICATE TOP
  JMPS  @DROP

P_ _DROPX
  R_TO  IP
  SKIPB
P_ _PUSH				; PUSH
  TO_R	TOP
@DROP:
  DROP_
  JMPS  @MAIN

P_ _J				  ; J - DATA FROM SECOND ELEMENT OF RETURN STACK
  R_TO  W			; POP W FROM RETURN
  R_TO  DR		; POP TOP FROM RETURN  - SECOND ELEMENT
  TO_R  DR		; PUSH TOP
  TO_R  W			; PUSH W - STATE OF RETURN STACK IS 
  JMPS  @DUP	;          LIKE BEFORE OPERATION
  
P_ _DUP				; DUPLICATE TOP
  TO_R	TOP		; PUSH TOP TO RETURN STACK
@POP:  
  R_TO  DR		; - THIS WAY WE ACHIVE DUPLICATE OF TOP
  JMPS  @DUP		
  
P_ _STKP			; STACK PTR
  TO_R  DSP
  SKIPA
P_ _OVER			; DUPLICATE NEXT
  TO_R  NXT
P_ _POP				; POP 
  JMPS  @POP
  
P_ _POPX			; POP 
  R_TO  DR
  R_TO  IP
  JMPS  @DUP
  
P_ _RDROP
  R_TO  DR
  SKIPA
P_ _SWAP
  SWAP_
  JMPS  @MAIN
   
; MATH, LOGIC AND SHIFT COMMANDS   +2/ +* -/ NAND

P_ _XOR				  ; XOR - LOGICAL PRIMITIVE
  XOR     NXT,TOP	  ; XOR TO SECOND DATA ELEMENT - NEXT
  JMPS    @DROP
  
P_ _MDIV				  ; -/ DIVIDE PRIMITIVE
  SHL	  NXT,1     ; SHIFT LEFT NEXT TO CARRY
  RCL   TOP,1		  ; ROTATE LEFT WITH CARRY
  CMP   TOP,ar		; COMPARE TOP WITH AR
  JB	  @MDIV		  ; IF BELOW SUBTRACT IS NOT POSSIBLE
  SUB   TOP,ar		; SUBTRACT SAR FROM TOP
P_ U1P  
  INC	  NXT	      ; SUCSESSFULL SUBTRACT
@MDIV:  
  JMPS  @MAIN
   
P_ _P2DIV			    ; +2/ SUM AND SHIFT PRIMITIVE
  ADD   NXT,TOP		; NEXT := NEXT + TOP;
  MOV	  TOP,NXT		; PREPARE FOR SHIFT
P_ _2DIV  
  RCR   TOP,1		  ; SHIFT RIGHT TOP WITH CARRY
  JMPS  @MAIN
   
P_ _PMUL				  ; +* MULTIPLY PRIMITIVE
  TEST	NXT,1     ; TEST LEAST SIGNIFICANT BIT
  JE    @PMUL2		; IF CLEAR - NOT ADD
  ADD   TOP,ar		; ADDING SAR TO TOP
P_ _D2DIV  
@PMUL2:
  RCR   TOP,1		  ; JUST SHIFT RIGHT TOP WITH CARRY
  RCR   NXT,1     ; SHIFT RIGHT NEXT WITH CARRY
  JMPS  @MAIN
   
P_ _NAND				  ; NAND - LOGICAL PRIMITIVE
  AND   NXT,TOP	  ; AND TO SECOND DATA ELEMENT - NEXT
  DROP_
@NOT:
  INC   TOP
P_ _NEG  
  NEG	TOP			    ; NOT  2  1 & 2 => NAND
  JMPS  @MAIN
P_ _ZEQ
  NEG   TOP
  SBB   TOP,TOP
P_ _NOT
  JMPS  @NOT
  
 L_ _PARS
  DW  _IO
  XCHG    CX,AX
  MOV     DI,BX    
  ;MOV     AX,[DSP+2]
	JCXZ 	  @@SKIPX
	SUB  	  DI,CX	   
	CMP  	  AL,' '
	JNE  	  @@SKIPX
	REPE 	  SCASB
	JE   	  @@SKIPX
	DEC  	  DI
	INC  	  CX
@@SKIPX:
  MOV     [DSP+2],DI    ;  START OF THE SOURCE
	JCXZ  	@@WEX
	REPNE 	SCASB
	JNE   	@@WEX
	DEC   	DI
@@WEX:                ; END OF THE SOURCE  IN DI
	SUB     DI,[DSP+2]    ; LENGTH OF THE WORD
	MOV     [DSP],DI      ; LENGTH OF THE WORD
  XCHG    CX,AX         ; IN CX REMAINS LENGTH OF THE BUFFER
  RET
	
; -----------------------
; searching
; -----------------------

 L_ _CFIND
  DW  _IO
  INC     PB [BX]
  CALL    @FIND  
  DEC     PB [BX]
  RET
  
 L_ _FIND
  DW  _IO
@FIND:  
  CLR     CX 
  XCHG    TOP,DI
@FND?:  
  ADD     DI,CX
  LEA 	  DI,[DI+4]
  mov 	  cl,PB [Di]
  jcxz	  @DCX ;not_fnd
  inc 	  cx
  PUSH    SI
  MOV     SI,BX
  repe	  cmpsb
  POP     SI
  jNZ 	  @FND?
	MOV		  CL,2
	ADD		  [DI+2],CX
  MOV     [DSP],DI
@DCX: 
  XCHG    TOP,CX
  RET

;----------------   NUMBERS	 ---------------------

L_ _ATOI
  DW  _IO

@@ADR   = BX
@@ACC   = CX
@@IND   = DI
@@BASE  = SI
@@TMP   = SI
@@OPADR = DX  ; OPTION ADDRESS
  
  XCHG    TOP,DI
  PUSH    DSP
  LEA     @@ADR,[@@ADR+@@IND]
  NOT     @@IND
	CALL	  @@ATOI
  POP     DSP
  MOV     NXT,CX
  XCHG    TOP,DI
	RET

@@ATOI:
	MOV     AL,10   	; BASE 10 INITIALLY
	CALL  	@@SGN
	CALL  	@@numini
@@GETC:	
  MOV     AL,[@@ADR+@@IND]
	CALL  	@@OPADR
  INC     @@IND
  JNZ     @@GETC
  RET

COMOPT  DW @@B16,@@B8,@@B2,@@KOLI,@@ACCUM,@@DIEZ
OPTAB   DB "$&%'^#"

@@SGN:
  INC     @@IND
	JZ     	@@ERNUM
  CMP     pb [@@ADR+@@IND],'-'     ; SGN
  jne     @@EXNUM2
  INC     @@IND
	JZ     	@@ERNUM
	POP   	@@OPADR
	CALL  	@@OPADR         ; return to caller
@@DNEG:  
	NEG   	@@acc
;	not   	@@acc
;	not   	AR
;@@DINC:  
;	inc   	@@acc
;  jne     @@EXNUM2
;	inc   	AR
@@EXNUM2: 
  RET

@@DIEZ:	
	XCHG  	@@acc,AX
  
@@numini:	
	CLR   	@@acc      ; ZEROING ACCUMULATOR
  ;CLR     AR        ; HI PART ACCUMULATOR
  JMPS    @@setbasE
  
@@B2:
	MOV		  AL,2        ; BIN
  SKIPA
  
@@B8:
	MOV		  AL,8        ; OCT
  SKIPA
  
@@B16:              ; HEX
	MOV		  AL,16
  
@@setbasE:	
	DEC   	AX
	DEC   	AX
	xor   	ah,ah
	mov   	@@base,ax
	INC   	@@base
	INC   	@@base
@@NORMAL?:
  CALL    @@STATE
  
@@N16:	
  PUSH    @@base
	MOV		  @@TMP,6-1
@@SCANB1:	
	CMP		  AL,OPTAB[@@TMP]
	JE		  @@SCANB2	
	DEC		  @@TMP
	JNS		  @@SCANB1	
@@SCANB2:	
	SHL		  @@TMP,1
	MOV		  @@OPADR,COMOPT[@@TMP]
  POP     @@base
  
  JS      @@N5
  INC     @@IND
	JZ      @@ERNUM
  DEC     @@IND
  RET
  
@@ERNUM:	
	DEC   	@@IND
@@STATE:	
	pop   	@@OPADR    ; rdrop
	RET
  
@@N5:	
	cmp   	al,'9'+1
	jc    	@@ton2
	cmp   	al,'A'      ; no case sensivity
	jc    	@@ERNUM
	sub   	al,7
@@ton2:	
	sub   	al,'0'
	cmp   	ax,@@base
	jnc   	@@ERNUM
@@ACCUM:	
	;Xchg  	AR,AX
	;mul   	@@base
	;Xchg  	AR,AX
	Xchg  	@@acc,AX
	mul   	@@base
	Xchg  	@@acc,AX
	add   	@@acc,ax
  ;ADC     AR,DX
	JMPS    @@NORMAL?
  
@@KOLI:	
	AND	  	AL,31
	JMPS  	@@ACCUM
  
 L_ _MPUSH ; TOP OF DICTIONARY   IN DI
  DW _IO
	POPR_   DI
	POPR_	  CX
  CALL    @MAKESTR
  INC     AX
  RET
  
 L_ _MKSTR         ; S>"!
  DW _IO
	POPR_   DI
	POPR_	  CX
  MOV     CH,0
  ADD     DI,CX
  INC     DI          ; SPACE FOR LENGTH
  MOV     PB [DI],'`' ; IMMEDIATE SIGN
@MAKESTR:  
  XCHG    AX,SI
  to_r    CX
  ADD     SI,CX       ; AFTER NAME ADDRESS
  STD                 ; BACKWARDS
  CMPSB               ; PREPARE FOR DIRECTION
  REP     MOVSB       ; NAME (MEMORY) MOVE
  CLD
  r_to    cx
  MOV     [DI],CL     ; LENGTH OF THE STRING
  XCHG    AX,SI
  XCHG    AX,DI
  RET

    
L_ _EndMem

MyCseg  ends
        end  Start
