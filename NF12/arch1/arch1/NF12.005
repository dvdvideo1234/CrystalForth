
A386 = 0

pd  equ dword ptr
pw  equ word  ptr
pb  equ byte  ptr

JMPS    MACRO LBL
  jmp   SHORT LBL
ENDM

SKIPA   MACRO
  DB    03DH
ENDM

SKIPB   MACRO
  DB    03CH
ENDM

SKIPr   MACRO reg
  mov   reg,0
  org   $-2
ENDM

X       MACRO
  xchg  Rsp,DSP
ENDM

TO_R    MACRO  REG
  PUSH   REG
ENDM

R_TO    MACRO  REG
  POP    REG
ENDM

TO_D    MACRO  REG
  X
  PUSH   REG
  X
ENDM

D_TO    MACRO  REG
  X
  POP    REG
  X
ENDM

rchg    macro   reg
  xchg  ax,reg
endm

DROP_    macro   
  LODSW
endm

DUP_    MACRO
  DEC   DSP
  DEC   DSP
  MOV   [DSP],TOP
ENDM  

DROPR_   macro   reg
  xchg  ax,reg
  DROP_
endm

CLR    macro   reg
  XOR  reg,reg
endm

ALIGN_  MACRO
  IF ($-START) AND 1
  NOP
  ENDIF
ENDM

P_  MACRO NAM
  ALIGN_
  NOP
NAM:
  org   $-1
ENDM

; REGISTER usage
ip  = BX  ; BX INSTRUCTION POINTER
dsp = SI  ; SI DATA STACK POINTER
rsp = sp  ; SP RETURN STACK POINTER
top = Ax  ; AX DATA STACK TOP REGISTER
topL= AL  ; AX DATA STACK TOP REGISTER
w   = di  ; DI WORK REGISTER
ar  = Dx  ; BX ARITHMETIC ( ADDRESS ) register 
DR  = CX  ; DX DATA REGISTER
DRL = CL  ; DX DATA REGISTER
DRH = CH  ; DX DATA REGISTER
		 ; BP   - NOT USED

; MINIMAL SET INTERPRETTER COMMANDS
; CONTROL      COMMANDS  (IF (JUMP (RETURN (IF-  ;(IO
; RETURN STACK COMMANDS  POP PUSH 
; DATA STACK   COMMANDS  DUP J
; DATA TRANSF  COMMANDS  @R+ !R+ XCHG XR
; MATH         COMMANDS  +2/ +* -/ NAND

MyCseg  segment para  use16

        assume cs: MyCseg,  ds: MyCseg, ss: MyCseg, es: MyCseg

        org 100h

@TBUF   = -256          ; -256    TBUF = 256   
@TIB    = @TBUF * 2     ; -512    TIB  = 256  + 
@R_TOP  = @TIB          ; -512  RSTACK = 768  +
@S_TOP  = @TBUF+@TIB*2  ; -1280 DSTACK = 768  += TOTAL = 2048
@VOCTOP = @TIB * 12     ; -6144 = 4 BUFFERS * 1024 + TOTAL

Start   Label byte

  mov   bx,1000h     ; only 64k allocate
  mov   ah,4ah
  int   21h
P_ _ABORT
  CLD
  MOV   RSP,@R_TOP
  MOV   DSP,@S_TOP
  CALL  @RETURN
  
_INIT   DW 0
_REGS   DW 0
; AX DX FL BX CX
@AX  DW    0,0,0,0,0

; IO           COMMANDS  (IO  vvvvvvvvvv

P_ _IODD  				  ; NOT IF => IO OPERATION
  DUP_
P_ _IOD  				  ; NOT IF => IO OPERATION
  DUP_
P_ _IO  				  ; NOT IF => IO OPERATION
  PUSH  AR  ; PRESERVE REGISTERS
  MOV   W,[DSP]
  MOV   CX,[DSP+2]
  MOV   DX,[DSP+4]
  push  es ds 
  XCHG  W,IP
  CALL  W		      ; CALL ADDRESS IN W
  pop   ds es
  PUSHF			; FETCH FLAGS
  CLD				; CLEAR DIRECTION FOR EVERYTHING CASE
  MOV   DI,OFFSET @AX
  STOSW
  RCHG  DX
  STOSW
  POP   AX		; STORE FLAGS TO _F
  STOSW
  RCHG  BX		; STORE BX TO _B
  STOSW
  RCHG  CX		; STORE CX TO _C
  STOSW
  POP  	AR	; RESTORE REGISTERS
P_ _DROPX  
  DROP_
@RETURN:
  r_to  IP			; POP IP FROM RETURN TOP ELEMENT
  JMPS  @MAIN	; LOAD IP FROM RETURN STACK
; IO           COMMANDS  (IO  ^^^^^^^

; CONTROL      COMMANDS  (IF (JUMP (RETURN (IF-

P_ _RETURN			; (RET
  JMPS  @RETURN

P_ _?SKIP			; ?SKIP
  OR    TOP,TOP  ; DR = CX
  JZ  @IFM1
  JMPS  @MAIN

P_ _IF	 			; (IF
  DEC   TOP
@IFM1:  
  INC   TOP
  DROP_
  JE    @JUMP 
  
P_ _SKIP
@SKIP:
  INC   ip
  INC   ip
  JMPS  @MAIN

P_ _IFM    			; (IF-
  JMPS  @IFM
  
P_ _MIF    			; (-IF
  INC   TOP
@IFM:
  DEC   TOP			; DECREMENT TOP AND BRANCH ON POSITIVE
  JS    @SKIP		; ON NEGATIVE - SKIP BRANCH
  JMPS  @JUMP 
  
P_ _NEXT
  R_TO  DR
  INC   DR
  JZ    @SKIP
  TO_R  DR

P_ _JUMP    			; (JUMP
@JUMP:
  MOV   IP,[IP]		; JUST BRANCH
  JMPS  @MAIN


; DATA TRANSFER  COMMANDS  @R+ !R+ XCHG XA

P_ _RSTM			; !R-
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  DEc   W			; DECREMENT ADDRESS
  DEc   W			; DECREMENT ADDRESS
  SKIPB
  
P_ _RST			  ; !R
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  MOV   [W],TOP		; USE RETURN TOP AS DATA ADDRESS
  JMPS  @WSAVE		; FETCH NEXT DATA TO TOP

P_ _RLDM			; @R-
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  DEc   W			; DECREMENT ADDRESS
  DEc   W			; DECREMENT ADDRESS
  SKIPB
  
P_ _RLD			  ; @R
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  MOV   DR,[W]		; USE RETURN TOP AS DATA ADDRESS
  JMPS  @DUPW ; 

P_ _RLDP			; @R+
  R_TO 	W			; TAKE TOP OF THE RETURN STACK
  MOV   DR,[W]		; USE RETURN TOP AS DATA ADDRESS
  inc   W			; INCREMENT ADDRESS
  JMPS  @RINCW			; INCREMENT ADDRESS

P_ _RSTBP			; C!R+
  R_TO 	W			; USE RETURN TOP AS DATA ADDRESS
  STOSB
  JMPS  @WSAVE			; FETCH NEXT DATA TO TOP

P_ _RSTP			; !R+
  R_TO 	W			; USE RETURN TOP AS DATA ADDRESS
  STOSW
@WSAVE:
  TO_R  W
  DROP_
  JMPS  @MAIN			; FETCH NEXT DATA TO TOP

P_ _XCHG				; XCHG
  R_TO	W			; EXCHANGE TOP ELEMENTS
  TO_R  TOP			; OF TWO STACKS
  MOV   TOP,W		; => DATA STACK AND RETURN STACK
  JMPS  @MAIN 
  
P_ _XA				  ; XA
  R_TO	W			  ; EXCHANGE RETURN TOP ELEMENT
  TO_R 	ar			; 
  MOV	ar,W		  ; WITH ADDED REGISTER
  JMPS  @MAIN 
  
P_ _RLDBP			  ; C@R+
  R_TO 	W			  ; TAKE TOP OF THE RETURN STACK
  MOV   DRL,[W]	; USE RETURN TOP AS DATA ADDRESS
  CLR   DRH
@RINCW:  
  inc   W			  ; INCREMENT ADDRESS
@DUPW:  
  TO_R  W			  ; STORE ADDRESS BACK TO RETURN STACK
@DUP:  
  DUP_			    ; DUPLICATE DATA TOP REGISTER
  MOV   TOP,DR
  JMPS  @MAIN

; MAIN  LOOP
P_ _EX
  R_TO  DR
@NEST:				  ; (NEST
  to_r  IP			; PUSH OLD IP
@LBL:  
  MOV   IP,DR		; PUSH NEW IP
  
P_ _NOP  
@MAIN:
  MOV   DR,[IP]	
  INC   IP
  INC   IP
  test 	DRL,1		; ADDRESS ODD ?
  je    @nest		; NOT ODD ADDRESS - NEST THEN
  dec   DR			; MAKE ODD ADDRESS EVEN
  JMP   DR			; BRANCH TO PRIMITIVE

;  STACK COMMANDS   PUSH DUP

P_ _DROP				; DUPLICATE TOP
  JMPS  @DROP

P_ _NFOR
  NOT   TOP
P_ _FOR
  MOV   IP,[IP]		; JUST BRANCH
P_ _PUSH				; PUSH
  TO_R	TOP
@DROP:
  DROP_
  JMPS  @MAIN

P_ _J				  ; J - DATA FROM SECOND ELEMENT OF RETURN STACK
  R_TO  W			; POP W FROM RETURN
  R_TO  DR		; POP TOP FROM RETURN  - SECOND ELEMENT
  TO_R  DR		; PUSH TOP
  TO_R  W			; PUSH W - STATE OF RETURN STACK IS 
  JMPS  @DUP	;          LIKE BEFORE OPERATION
  
P_ _DUP				; DUPLICATE TOP
  TO_R	TOP		; PUSH TOP TO RETURN STACK
@POP:  
  R_TO  DR		; - THIS WAY WE ACHIVE DUPLICATE OF TOP
  JMPS  @DUP		
  
P_ _POP				; POP 
  JMPS  @POP
   
; MATH, LOGIC AND SHIFT COMMANDS   +2/ +* -/ NAND

P_ _MDIV				  ; -/ DIVIDE PRIMITIVE
  SHL	  PW [DSP],1; SHIFT LEFT NEXT TO CARRY
  RCL   TOP,1		  ; ROTATE LEFT WITH CARRY
  CMP   TOP,ar		; COMPARE TOP WITH AR
  JB	  @MDIV		  ; IF BELOW SUBTRACT IS NOT POSSIBLE
  SUB   TOP,ar		; SUBTRACT SAR FROM TOP
P_ U1P  
  INC	  PW [DSP]	; SUCSESSFULL SUBTRACT
@MDIV:  
  JMPS  @MAIN
   
P_ _P2DIV			; +2/ SUM AND SHIFT PRIMITIVE
  ADD   PW [DSP],TOP		; NEXT := NEXT + TOP;
  MOV	  TOP,PW [DSP]		; PREPARE FOR SHIFT
P_ _2DIV  
  RCR   TOP,1		; SHIFT RIGHT TOP WITH CARRY
  JMPS  @MAIN
   
P_ _PMUL				  ; +* MULTIPLY PRIMITIVE
  TEST	PB [DSP],1; TEST LEAST SIGNIFICANT BIT
  JE    @PMUL2		; IF CLEAR - NOT ADD
  ADD   TOP,ar		; ADDING SAR TO TOP
P_ _D2DIV  
@PMUL2:
  RCR   TOP,1		  ; JUST SHIFT RIGHT TOP WITH CARRY
  RCR   PW [DSP],1; SHIFT RIGHT NEXT WITH CARRY
  JMPS  @MAIN
   
P_ _NAND				; NAND - LOGICAL PRIMITIVE
  DROPR_ 	W			; FETCH SECOND DATA ELEMENT - NEXT
  AND   TOP,W		; AND  1
P_ _NOT
  INC   TOP
P_ _NEG  
  NEG	TOP			  ; NOT  2  1 & 2 => NAND
  JMPS  @MAIN
  
P_ _XOR				  ; XOR - LOGICAL PRIMITIVE
  DROPR_ 	W			; FETCH SECOND DATA ELEMENT - NEXT
  XOR   TOP,W		
  JMPS  @MAIN
  
EndMem:

;lastw = ppppp

MyCseg  ends
        end  Start
