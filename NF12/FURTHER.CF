: @I (J @ ; HERE >, (D#0 : C@, C@ : C, |H : C!+ (PUSH W>B @I
 (DUP W>B - + (!R+ (POP : 1- (@+; ,< -1 , : ODD (@&; ,< 1 ,  
: |ALIGNED (EX : ALIGNED HERE ODD 0; ,<  =, NOP, $90 , 
: 5+ (@+; ,< 5 , : \` : \ |LTIB (DUP 0; 1- : L/ (@&; ,< -64 , 
: (|GO` (, (@R+ (XR (PUSH ; : @+ (PUSH (@R+ (POP; ; H 2- OBJ!
: (VAR3` (, (D#2 ; : EVEN (@&; ,< -2 , ^M EMIT ^J EMIT '^ EMIT
: |UNW (EX : UNW (|GO DROP; : @H- |H : @- 2- @+ 2- ;
: HIDE FND?? 5+ '` : SWAPC! (SWAP : C! C!+ (DROP; ; UNW
: ,' |, : ' FND?? @+ @ : ODD?? ODD ?? ; : @' ' @ ;

' (@, \ GENERATING PRIMITIVE`S COMPILERS
N: (JUMP` ,' (JUMP   N: (SET2` ,' (SET2  N: (CON`  ,' (CON    
N: ABORT` ,' (ABORT  N: (@&;`  ,' (@&;   N: (@+;`  ,' (@+;    
N: "R+`   ,' ("R+    N: (IO;`  ,' (IO;   N: (VAR`  ,' (VAR
N: (IF`   ,' (IF     N: SKIP` ,' (SKIP  N: (IF-`  ,' (IF-    
N: (NEXT` ,' (NEXT   N: (FOR`  ,' (FOR   N: @R+`   ,' (@R+    
N: XR`    ,' (XR     N: XA`    ,' (XA    N: (WARY` ,' (WARY   
N: EX`    ,' (EX     N: PUSH`  ,' (PUSH  N: DROP`  ,' (DROP   
N: POP`   ,' (POP    N: (MAC`  ,' (MAC   N: (!"`   ,' (!"    
N: POP;`  ,' (POP;   N: RDROP` ,' (RDROP N: !R+`   ,' (!R+    
N: DROP;` ,' (DROP;  N: SWAP`  ,' (SWAP  N: NOP`   ,' (NOP    
N: DUP`   ,' (DUP    N: SP@`   ,' (SP@   N: OVER`  ,' (OVER   
N: NIP`   ,' (NIP    N: J`     ,' (J     N: -/`    ,' (-/     
N: U1+`   ,' (U1+    N: +2/`   ,' (+2/   N: 2/`    ,' (2/    
N: +*`    ,' (+*     N: D2/`   ,' (D2/   N: NAND`  ,' (NAND   
N: NEG`   ,' (NEG    N: 0=`    ,' (0=    N: U<`    ,' (U<    
N: NOT`   ,' (NOT    N: BEMIT` ,' (BEMIT N: RDROP;` ,' (RDROP;
=, 0<`    ,' (0<     

\ ERROUT & BYE
: |DROP EX : DROP DROP; ; UNW ' ;, =: ;;`  : C;` (JUMP` ,<`
: C:` MARK>` : ?` (|GO SWAP! : ADR' ' (DUP ODD?? : NOP ; 
: X:` ADR' (PUSH ; : FOR` (FOR` MARK>` BEGIN` : SWAP SWAP ; 
: NEXT` THEN` (NEXT` RELS<` RDROP` ; : ..TIMES |DROP : .TIMES
|DROP : TIMES PUSH XR : TIMES| FOR J EXECUTE NEXT : EXIT RDROP;
; UNW : (."` (, "R+ : ". CSTR : TYPE |DROP TIMES| CSTR EMIT ; 
: |SPC EX : SPACE BL SKIP : |EMIT EX EMIT ; : ID. |SPC C; ".  
: _ERR TBUF ID. MESSAGE ID. BYE ; ' _ERR ADR' vERR 2+ !
 
\ CONTROL
: (UNDER @R+ PUSH : XEP| XR EXECUTE POP; ; UNW 
: A+L XEP| : I+ J + ;       : IXEC J PUSH ;
: GO|` (|GO` MARK>` ;       : AHEAD` (JUMP` MARK>` ; 
: ELSE` AHEAD` SWAP THEN` ; : AGAIN` (JUMP` RELS<` ;
: WHILE` GO| ? SWAP         : IF`   (IF`  MARK>` ;   
: IF-`  (IF-` MARK>` ;      : REPEAT` AGAIN` THEN` ; 
: UNTIL` (IF` RELS<` ;      : UNTIL-` (IF-` RELS<` ;
: WHILE|  BEGIN IF ? EXIT   : UNTILZ| IXEC  C; WHILE|
: UNTIL| BEGIN  IXEC        : WHILEZ| UNTIL C; EXIT 

\ MAKERS
: .( ') PARSE TYPE ; : ("` (, "R+ ; 
: (CODE;` (, POP : TOBE T ! ; 
: QUAN (VAR3` : VALUE (SET2` : CONST :` (CON` , ;
: CREATE |UNW : VARIABLE 0 : VAR :` (VAR` , ; 
: VQUAN (VAR3` : VECTOR (SET2` : DEFER :` (JUMP` , ; 
: (CON.` (, (D#1 C@ EMIT ; : BCONST (CON.` CONST ; 
: (D# (D#0 >, HERE XEP| @, ;  : DOES>` (CODE;` |DROP 
: 0#> (D# (D#0 : 1#> (D# (D#1 : 2#> (D# (D#2 ;
: (W2 @R+ : (W1 @R+ : WITHIN OVER- (UNDER - U< ; 
0#> C@, : REL, HERE 2+ - , ; N: CALL, $E8 ,  =, JUMP, $E9 ,  
0#> C@, : BREL, HERE 1+ - : BREL?, DUP (W2 ,< -128 , 128 , >,
 N?? C, ; =, JMPS, $EB ,  : WFIND vTARG (IO; ,<
 $04E8 , $3B00 , $FC5D , $C3 C, ' @FIND? JUMP, ALIGNED
0#> : `@A'+ @ ADR' + ; N: AT' -4 , N: TO' -2 , =, VAL' 2 ,
0#> `@A'+ ! ;          N: BE Z, : META ' ,<    =, IS   2 , 
0#> `@A'+ , ;          N: AT` -4 ,             =, TO` -2 , 
0#> `@A'+ PUSH ; N: AT  -4 ,  =, TO  -2 ,  : VAL@ VAL' @ ;
' NOP VECTOR `vDO : `DO ' TO `vDO POP ; : DO# `DO TOKEN? ">NUM
`vDO ; : ZDO `DO 0 `vDO ; : DO `DO `vDO ; : DO' `DO ' `vDO ;

\ HIDE UNNECESSARY WORDS
DO HIDE 53 TIMES   (ABORT (@&; (@+; ("R+ (IO; (; (IF (SKIP (IF-
(NEXT (FOR (JUMP (BEMIT (@R+ (!R+ (XR (XA (WARY (RDROP; (NOP 
 (EX (NIP (DROP (DROP; (PUSH (J (DUP (OVER (POP  (POP;
 (RDROP (SWAP (-/ (U1+ (+2/ (2/ (+* (D2/ (NAND (NEG (0= (NOT
 (U< (0< ;, (SET2 (CON (VAR (MAC (!" (SP@ DROP; NOP;

\ VARIABLES 
: CSP! SP@ ,< 0 VALUE CSP  : CSP? SP@ CSP - ;
DO# BCONST 4 TIMES   8 bs  '- c-  13 cr  10 lf  
' |ALIGNED VECTOR v",     DO# CONST 6 
TIMES  $10 1H  -$700 SBUF  -$600 TIB  1024 1K  $40 1L  256 1B 
: |HLD CALL EX (SET2 THEN ,< 0 CONST HLD 
: |SCR CALL EX (SET2 THEN ,< 0 CONST SCR
: BASE! 2- W>B 2+ ,< 10 VALUE BASE 
: `ZBLK 0 ,< 0 VALUE BLK  

\ MACRO & STR,
: M: ';  : ?M: =H WORD (MAC` : WORD, CSTR v", : STR, DUP C, 
: S, |DROP TIMES| CSTR  C, ; : BS, CSTR  S, ; : A"` (!"` 
: "STR,  '" WORD  WORD, ; : ."` (."` "STR, ; : "` ("` "STR, ; 
: |CR EX : CR TO cr TO lf  0 TO CNTC ; : |[] ." [" EX ." ]" ; 
: [ID] CSTR : [S] |SPC |DROP : [TYPE] |[] TIMES| CSTR DUP BL U<
 IF DROP '. THEN EMIT ; : _OK ."  Ok" CR ." >>" ; : MEMTI| A+L 
 0 : TI| BLK XR LTIB PUSH ETIB PUSH PUSH CALL EX POP POP POP
 THEN TO BLK TO LTIB TO ETIB : /BLK BLK 0; 0 TO ETIB ; 

\ NUMOUT 
: = - 0= ; : AND NAND NOT ; : -ROT SWAP : USWAP XEP| SWAP ; 
: ROT USWAP SWAP ; : 0>A| 0 : >A| XR XA EXECUTE XA C; EXIT
: U/ |DROP : (/MD >A| 0 CALL THEN  CALL THEN -/ -/ -/ -/ ; 
: UMOD |DROP : U/MOD (/MD SWAP ; 
: U* |DROP : UM*  >A| 0 CALL THEN  CALL THEN +* +* +* +* ;
: `9>? 9 OVER U< (@&; ,< 7 , : S6 GO|  XEP| XEP| XEP|  THEN 
: S3 |SPC CALL CALL THEN THEN ROT DUP : H. 1B U/MOD CALL
: B. |SPC THEN W>B 1H U/MOD CALL THEN : DIG. |EMIT   
: ALPHA `9>? +   : 48+ (@+; ,< '0 , 

: ?TAB HLD - : SPACES TIMES| SPACE ; : # BASE U/MOD : HOLD |HLD
 1+ ; : <# 0 TO HLD BASE! ; : <#>| <# EX ?TAB : #> DROP HLD
TIMES| DIG. ;  : `6 DUP 0< 0; NEG EX -10 SWAP HOLD ; : U. 0 
: U.RS |SPC : U.R lf : U.R# <#>| : u. 31 AND XEP| : S# UNTILZ| 
# DUP ; : . 0 : .RS |SPC : .R lf : .R# <#>| SWAP `6 SWAP C; u. 

12345 10 .R

\ KEY StdKey WAITKEY
: BKEY? CALL 1L AND 0= ;; THEN 1B (IO; ,< $16CD , $589C , $90C3
 , : |WAIT EX  : WAITKEY |DROP : BKEY BEGIN BKEY? UNTIL
  CALL DUP W>B 0; W>B ;; THEN 0 (IO; ,< $16CD , $90C3 ,
' BKEY VALUE StdKey : `StdKey! StdKey ,< ' BKEY VALUE `KEY ;;`
' `KEY 2+ =: KEY : /LINE? 0<>; |CR BKEY 27 = 0;  : EOS! cr ,< 
0 VALUE EOS : EOS| EOS XR PUSH 0 TO EOS EX POP TO EOS ;
 
\ CMOVE, WORDS & DEA - DICTIONARY ENTRY ADDRESS
: >DEA 4+ : NAME> CSTR + ; : DEA? 4+ C@ ; : NAME. XEP| J DEA?
 1 + CNTC + 80 U< /LINE?  J 4+ ID. ; : WORDS EOS| CR 0 T BEGIN
 DUP DEA? WHILE NAME. >DEA U1+ EOS UNTIL THEN DROP H. ; 
: FORGET FND?? DUP  >DEA TO T  @ EVEN C; OBJ!
: DICT>S T DUP BEGIN DUP DEA? WHILE >DEA REPEAT OVER- 5+ ; 
: CMOVE> A+L SWAP MPUSH C; MSG! 
: CMOVE |DROP FOR PUSH CSTR POP C!+ NEXT C; MSG! 

\ SCAN & READLN
: BSCAN W>B PUSH XR PUSH J FOR CSTR J - IF X: -ROT NEXT : NFND
 J PUSH : /SCAN THEN DROP POP NOT RDROP POP + ; : SCAN PUSH XR
 PUSH J FOR STR J - IF ? /SCAN NEXT C; NFND 
: 2DUP OVER OVER ; : I J ; : 2PICK PUSH OVER XR POP; ; UNW
0#> PUSH W>B XR CSTR I BSCAN 1+ XR POP DUP 0; NIP ;
=, (BSC  2 C, cr C, bs C, ALIGNED 
: `BS 2PICK OVER- 0; 1- TO bs SPACE TO bs ;
: `AKEY DUP BL 1B WITHIN   IF ? DROP  DUP EMIT SWAP C!+ 
 2DUP = TO EOS ; : `TABKEY (WARY `AKEY EOS! `BS ,< 
: _RL  TIB 1L : ACCEPT |SPC EOS| OVER + OVER BEGIN KEY 
(BSC `TABKEY @EXECUTE EOS  UNTIL    NIP OVER-   ;

: >1K   (@&; ,< 1K 1- , : XY? 1K LTIB - ; \ : |BYE EX BYE ; 
: `(ERR StdEmit! `StdKey! CR TBUF ID. MESSAGE ID. CR BLK 0;
   BLK TO SCR  `ZBLK : XY!  XY? : >XY >1K ,< 0 VALUE XY
META `(ERR vERR    
 ' MEMTI| BE EVAL 
META _OK vOK  
META _RL READLN

=FDYFGHDFGH-

\ : A@ XA I XA ; : A! PUSH XA EXIT ; UNW 
 
M: TWICE` CALL THEN; M: |VAL` CALL EX (SET2 THEN ,<;

SPACE 12345 . -12345 .

\ : ;`  ,;  CSP? TARG,< ?; ;;


\ DEBUGERR
0#> C@, : REL, HERE 2+ - , ; N: CALL, $E8 ,  =, JUMP, $E9 ,  
0#> C@, : BREL, HERE 1+ - 
: BREL?, DUP (W2 ,< -128 , 128 , >, N?? C, ; =, JMPS, $EB , 
'2 EMIT

: WFIND vTARG (IO; ,<
 $04E8 , $3B00 , $FC5D , $C3 C, ' @FIND? JUMP, ALIGNED
 
'3 EMIT
'Z EMIT

0 VALUE SAVEMT  : `.WID. ID. : WID. 4+ ID. ; 
: `EMTIN TO EMIT TO SAVEMT  StdEmit! CR ;
: R3 POP POP POP J H. PUSH J H. PUSH J H. PUSH ;
'1 EMIT
: @ID. DUP H. STR DUP H. SWAP @ H.  : ?ID. WFIND IF WID. ;;
 THEN  2+ WFIND 
IF 
,< '3 EMIT >, 
" TO" 
,< '4 EMIT >, 
(JUMP `.WID. THEN
  2+ WFIND IF 
,< '5 EMIT >, 
  " AT" 
,< '6 EMIT >, 
  (JUMP `.WID. THEN
  4 -  : $. '$ EMIT H. ;
'7 EMIT
: DBG. `EMTIN R3 I |WAIT   
: `DBG SPACE (UNDER S3 HERE H. vTARG H. A@ H.
 SPACE @ID. SAVEMT AT EMIT ;
 
'4 EMIT

VAL@ ;;` =: @MAIN  ALIGNED  HERE 1+ =: 4TH>  $E3FF , 

'3 EMIT  \ BYE

: TROFF (IO; ,< $8BB9 , $0F C, 
HERE =: `@X_TRACE   $0E87 , ' @MAIN , $C3 C, 

: TRON   (IO; ,<  $EBB9 ,  VAL@ (NEXT` 4 - ' @MAIN 2+ - BREL?, 
  ' `@X_TRACE JMPS, ALIGNED
  
: @DBG      ,<  VAL' TROFF CALL,    VAL@ EX` 1- CALL, >, 
 `EMTIN R3 I `DBG BKEY  4TH> ,< 
VAL' TRON  CALL,    $DF24 , $533C ,  $75AD , 03 C,
VAL' TROFF CALL,    $8B5B , $F C, ' @MAIN 2+ JUMP, ALIGNED

: TRACE ' TRON EXECUTE TROFF ;
' @DBG VAL@ (NEXT` 1- -      VAL@ (NEXT` 3 - !
' TROFF 2+ VAL@ ABORT` 8 + - VAL@ ABORT` 6 + !


\ 1 2 TRACE +* \ 
\ WORDS

CR T NAME. EOS .
12345 . $1234 H. HERE . CR 
BYE
 
META _RL READLN \ READLN FIXED
READLN TYPE

FGSDFGSDFGSD---


\ PREPARE FOR COMPILING EDITOR

: |NIP EX NIP ;

\ COMPARING PRIMITIVES  
: RED| 2DUP EX >?; CSWAP` ; 
: UMAX |NIP : URED RED| U< ; : UMIN |DROP URED ; 
: MAX |NIP  : REDI RED| : < - 0< ; : <> - : 0<> 0= 0= ;
: MIN |DROP >; REDI

0#> C@  : FILL (PUSH FOR J SWAP C!+ NEXT : .EXIT DROP RDROP ;
N: ERASE Z,  =, BLANK BL ,   TO' .EXIT =: .2EXIT

: ONPLACE GO| DUP XEP| TWICE NUP THEN : REVERT BEGIN 1- 2DUP U<
 WHILE (PUSH (PUSH J C@ I C@ J C! POP C!+ POP REPEAT 2DROP  ;

\ EMPTY FOR NOW STUBS
: UPDATE ; : -BUF ; : /BUFS ; : FLUSH ;

: { '} PARSE 2DROP ;    ' { =: {`
' \ =: \`       \ COMMENTS WORKS NOW IN COMPILER STATE
: _BLK 1K U* 1B + ;  ' _BLK DEFER BLOCK
: 2* DUP + ; 

: SCR- |SCR DUP 0; 1- ; : SCR+ |SCR 1+ ;

: |SPTR |VAL 0 CONST SPTR
0 VALUE SPTRTOP  : D0 0 0 ;  : OR NOT SWAP NOT NAND ;

: S> SPTR : SDROP |SPTR : NAME> CSTR + ; : SPTRTOP? SPTRTOP T -
 SPTR SPTRTOP U< 0= OR 0; T DUP  TO SPTRTOP TO SPTR TWICE D0 
: >S W>B |SPTR MPUSH 1- ; : >S! CSTR >S ;  

: LIST DUP TO SCR BLOCK CALL SPACE SCR . (; THEN : .BLOCK 1H
 |DROP TIMES| 1H J - J IF |CR THEN : .LINE B. 1L : [TYPE] |[] 
: TYPE+ TIMES| CSTR DUP BL U< IF DROP '. THEN EMIT ;

ZDO VALUE 5 TIMES _FL _AX _BX _CX _DX
: |REGS EX TO _FL  TO _AX  TO _BX  TO _CX  TO _DX ;
: (DOS |REGS (IO; ,< $21CD , =H `@INT  DO# C, 16 TIMES  
 $89 $1C $89 $4C $02 $89 $54 $04 $9C $4E $4E $89 $04 $58 $C3 0
: HOME 0 AHEAD  : @XY (UNDER W>B 1B U* + THEN D0 $200
: (VID |REGS (IO; ,< $10CD , ' `@INT JMPS,
: PAGE 0 24 @XY  26 FOR CR NEXT HOME ;
 
0 VALUE XK

' (# =: (LIT
CR 17 .
\ BLOCK1 OF EDITOR
: WHAT? 7 EMIT ;
ZDO VALUE 4 TIMES  `PDATA `INS  `SZ  `ALTER
0#> SWAP TO XK CSTR 2DUP XK BSCAN 1+ 2* + + @EXEC ; =: `XK!

\ 2000 HIPUSH <H>
: -:  ' , C,  XK 2+ DUP TO XK       { BYTES FOR MOVE UP 1 }
         HERE OVER - DUP PUSH       { START ADDRESS    }
         DUP 1+ ROT                 { PREPARE FOR MOVE }
         CMOVE>  HERE C@ POP C!   ; { FIX CODE  }
: SWITCH: CREATE HERE 73 1 TO XK 0 -: (LIT  `XK!  TOBE ;
: ;SWITCH  73 - A" BAD KEYS" XK 2/ 1- SWAPC! ;
\ <H>  
: `?XY 1L U/MOD 4 0 : V+ ROT + XEP| + ;
 18 .
\ BLOCK2 OF EDITOR
: `POSXY XY `?XY @XY ; : `_INS `INS 0= TO `INS : `.INS 72 0 @XY
`INS IF ." INS" (; THEN ." OVT" ; ' ETIB =: `EOS^ 
: `;LRUD XY  EX
>XY  69 2 @XY XY 6 U.R 69 4 @XY  XY 1L U/MOD 3 U.R 3 U.R ;
: `ERR 73 1 @XY ;
: `;LPOS  XY : `;PDATA+ EX `PDATA + ;   : `POS^ `;LPOS ;
: `RELOAD SCR BLOCK DUP TO `PDATA 1K + TO ETIB  SPTRTOP? ;
: `REDRAW  `ERR SPACE  `.INS HOME `PDATA .BLOCK ;
: `L_DN 1L : `XY+ `;LRUD + ;    : `L_UP 1L : `XY- NEG `XY+ ;
: `L_END `;LRUD : `/L  1L 1- OR ;  : `EOL `;LPOS `/L 1+ ;
: `ERR.EXIT `ERR '? EMIT : .EXIT2 RDROP : .EXIT DROP RDROP ;
: `1L<?; 1L : `>SZ?; TO `SZ : `SZ<?; 1K XY - `SZ U< (?.SKIP
 `ERR.EXIT  : `;RDRC EX  : `RDRC  `REDRAW UPDATE ;
: `WIPE `;RDRC 1K TIMES| `EOS^ J - 1- : `IWIPE   DUP C@ BL U<
       >?; DROPX  BL SWAPC! ;
 19 .
\ BLOCK3 OF EDITOR
: `<_|   `L_DN  : `L_BEG `;LRUD L/ ;    : `->  1 `XY+ ;
: `<-  1 `XY- ;  : `TAB> bs : `SZTB> >:; `-> 1- `;LRUD OR ;
: `<TAB bs : `<SZTB `<- NEG : `TAB& `;LRUD AND ; { PREVIOUS}
: `APOS  0 `TAB& ; : `LINE/ `;LPOS  L/ ;  : `/LINE `;LPOS `/L ;
: `LDRAW `POSXY `LINE/ XY 1L U/ 1+ cr EMIT .LINE DROP ;
: `RESET -BUF : `LOADRAW `RELOAD `REDRAW ;
: `B SCR- (SKIP  : `N SCR+ `LOADRAW ;  
: `ALT SCR `ALTER TO SCR TO `ALTER `LOADRAW ;
: `ADV 1K XY - TO LTIB BL PARSE TO `SZ DROP XY? >XY XY 0; `<- ;
: `TEST BL `POS^ C@ U< ;  : `BACK  BEGIN `<- XY 0; `TEST UNTIL
         BEGIN `<- XY 0; `TEST 0= UNTIL `-> ;
: `;INSPOS EX PUSH `POS^ I `SZ - DUP `SZ BLANK POP ONPLACE ;
: `;DELPOS `POS^ DUP `SZ + OVER `SZ BLANK EX ONPLACE ;
: `AW `ADV : `PREP { ARE} `BACK  : `SKIP `ADV `-> ;
 20 .
\ BLOCK4 OF EDITOR
: `DELL `1L<?; : `DO-DEL `;DELPOS `EOS^ ; : `INSL `1L<?;
: `DO-INS `;INSPOS `EOS^ ; : `altS 1L 1+ `>SZ?; 1L TO `SZ `POS^
`<_| `DO-INS `POS^ 2DUP - NUP - ONPLACE ; : `COPY `1L<?; RDROP
: `DO-COPY `POS^ `SZ DUP `XY+ >S ; : `CUT `1L<?; : `DO-CUT
`DO-COPY  `SZ `XY- `DO-DEL ;
: `BKCW `AW `BACK `BACK : `CUTW `AW `SZ 0; `SZ 1+ TO `SZ
 `BACK `;RDRC `DO-CUT `PREP ; : `MOVE `CUTW `SZ 0; >:; `SKIP
: `PASTE SPTR C@ DUP TO `SZ 0; `SZ<?; : `DO-PASTE `DO-INS S> 1+
 `POS^ `SZ CMOVE ; : `;LDRU 1 TO `SZ EX : `LDRU `LDRAW UPDATE ;
: `INSC `;LDRU CALL `POS^ C! (; THEN `INS 0; `;INSPOS `EOL ;
: `BS `<- : `DELC `;LDRU `;DELPOS `EOL ; : `ESQ/E /BUFS
: `X-POS 75 15 @XY EOS! ; : `Q/ED FLUSH `X-POS ;
: `SCR; `APOS `<- : `PREPARE `L_END `PREP ;
\ <H>  
: C^ TOKEN? 1+ C@ 31 AND ;
 21 .
{ BLOCK5 OF EDITOR \ KEY CONSTANTS}
80 CONST kDOWN  81 CONST kPGDN  82 CONST kINS   83 CONST kDEL
79 CONST kEND   84 CONST ksF1
59 CONST kF1    60 CONST kF2    61 CONST kF3    62 CONST kF4
63 CONST kF5    64 CONST kF6    65 CONST kF7    66 CONST kF8
67 CONST kF9    68 CONST kF10   30 CONST kaA
113 CONST kaF10 17 CONST kaW    71 CONST kHOME  72 CONST kUP
73 CONST kPGUP  75 CONST kLEFT  77 CONST kRIGHT 27 CONST kESQ
9 CONST kTAB    104 CONST kaF1  93 CONST ksF10  94 CONST kCF1
103 CONST kcF10 15 CONST ksTAB  32 CONST kaD    31 CONST kaS
115 CONST kcLEFT  116 CONST kcRIGHT  117 CONST kcEND
118 CONST kcPGDN  119 CONST kcHOME   132 CONST kcPGUP
 22 .
{ BLOCK6 OF EDITOR } \ <H>
SWITCH: `EF WHAT?   kaA -: `ALT    kLEFT -: `<-    kUP -: `L_UP
 kHOME -: `L_BEG   kEND -: `L_END  kPGUP -: `B   kPGDN -: `N
 kDOWN -: `L_DN  kRIGHT -: `->     kINS  -: `_INS kDEL -: `DELC
 kaW   -: `WIPE kcRIGHT -: `ADV  kcLEFT -: `BACK kcEND -: `SCR;
 ksTAB -: `<TAB  kcHOME -: `APOS   kaS -: `altS  kaD -: `DELL
;SWITCH        
: `ONEC XK BL U<  IF WHAT? (;  THEN XK `INSC `-> ;
SWITCH: `EK `ONEC C^ J -: `<- C^ K -: `-> C^ X -: `CUT 127
-: `BKCW bs -: `BS C^ D -: `DELC cr -: `<_| C^ G -: `CUTW C^ Z
-: `PREPARE C^ N -: `N C^ B -: `B C^ R -: `RESET C^ I -: `TAB>
 C^ C -: `COPY C^ V -: `PASTE C^ Q -: `ESQ/E C^ F -: `MOVE
 C^ A -: `ADV  kESQ -: `Q/ED  C^ S -: `INSL  0 -: `EF ;SWITCH
 
: `@KEY `POSXY BKEY 1B U/MOD DUP IF SWAP (; THEN DROP ;
: EDIT TO SCR : PE PAGE : E  D0 MEMTI| `LOADRAW EOS|
 BEGIN `@KEY `EK EOS  UNTIL ;  

.( RTYURTYUT)
 HIDROP

.BYE

 
0 VALUE `WW 
: .HL `WW H. ; 
0 VALUE `ADR2 
0 VECTOR `STP 

0#> PUSH XCHG STR 
    FOR STR 2+ J "- IF CSWAP> 
	NEXT SKIP THEN POP 1+ NIP EXIT ; 
=, ?:STR 4 , 
>, :(ABRT :((" :((." :((M:" ,< 

: `;WW `WW EX TO `WW ; 
: `C>N HOFS 
    IF <D>; FX 2+ AT `STP C>N? 
    ;THEN FX 2- AT `STP C>N? ; 
: `!ID DUP TO `ADR2 ID. ; 
: ??ID. 0 TO `ADR2 `C>N
0= `!ID ?; `STP .TO `STP .AT NEG `STP `STP NEG $. ; 
: `GETW
`;WW @+ ; 
: `WW! T>R TO `WW ; 
: `?TA. `WW R>T `C>N NIP 0;
: `TA. `WW R>T ADRS. `C>N DROP ?; .":_" ID. ;
: SEE ' 
: @SEE `WW! 
: SL bs TIMES; 
: WW `TA. `GETW DUP H.
: `W0 ??ID. `ADR2 0; `ADR2 ?:STR 0; `;WW SPC; []; DUP ". NAME> ;
: HACK ' : @HACK `WW! 
: HL  bs TIMES; `?TA. `GETW `W0 ;
: -HL `WW 23 - @HACK ;   
: TEST 1 2 3 "1234" ;
 
\ : `(SP CSP? (IF C: ,<` ;
\ : ;` `(SP @H- (DUP ODD (IF MARK> , (JUMP ;;` 
\    THEN (JUMP` (JUMP , ,<  
\ ' CSP! ' : !
