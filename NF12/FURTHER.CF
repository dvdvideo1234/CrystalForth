' CALL`   =: MARK>`  
^M EMIT ^J EMIT '^ EMIT  
 
'1 EMIT
T.
MCLR <M> 
: 0#> D# (@, (D#0 : 1#> D# (@, (D#1 : 2#> D# (@, (D#2 ,< 
0#> : @ADR @ ADR' + ; N: TO' -2 , N: AT' -4 , =, VAL' 2 , 
0#> @ADR , ; N: TO` -2 , N: AT` -4 , N: C: Z, =, VAL` 2 , 
0#> @ADR (PUSH ; N: TO -2 ,  N: AT -4 ,  N: X:` Z, =, VAL  2 ,
: CP:` :` ' (, (@, , ; CP:` :VAR3` (VAR3 CP:` :SET2` (SET2 CP:`
:CON` (CON : QUAN :VAR3` : VALUE :SET2` : CONST :|, :CON` ; 
: VAL;` :SET2` THEN` 0 CONST ,<` ;  : SB:` HERE 2- =: ;  <M>
T.

 
: @I (J @ ; 0#> C@ : C, |H : C!+ (PUSH W>B @I (DUP W>B - + (!R+ 
(POP 1- ; : |ALIGNED (EX : ALIGNED HERE ODD 0; ,< =, NOP, $90 , 
T.

<M> : .(` : .( ') PARSE TYPE ; 
: ELSE` |THEN |SWAP : AHEAD` |MARK> CP: :JUMP` (JUMP
CP: 1+` 1+           CP: R>A;`  (R>A;     CP: :VAR`  (VAR   
CP: NOT` (NOT        CP: PUSH` (PUSH      CP: 0=` (0=          
CP: +*`  (+*         CP: U<` (U<          CP: NAND` (NAND 
CP: U1+`  (U1+       CP: NEG` (NEG        CP: 0<`  (0<           
CP: -/` (-/          CP: A@`  (A@         CP: RP@` (RP@                             
CP: D2/` (D2/        CP: +2/` (+2/        CP: 2/`    (2/         
CP: :CON`  (CON      CP: DROP;` (DROP;    CP: !R+`   (!R+       
CP: EX` (EX          CP: RDROP;` (RDROP;  CP: SP@` (SP@                             
CP: :IF-`  (IF-      CP: :IF` (IF         CP: POP`   (POP            
CP: @R+` (@R+        CP: XR`  (XR         CP: XA`    (XA         
CP: DROP` (DROP      CP: SKIP` (SKIP      CP: "R+`   ("R+      
CP: DUP`   (DUP      CP: J` (J     : IO;` ,<` CP: ` (IO;  ,< 
: VQUAN :VAR3` : VECTOR :SET2` : DEFER :|, :JUMP` ; 
T.

: VARIABLE 0   : VAR :|, :VAR` ; \ : CREATE VARIABLE -2 
: |` |MARK> CP: ` (| : UNTIL` |<RELS :IF` ; : WHILE` |SWAP :
IF` |MARK> :IF` ; : -IF` 1+` : IF-` |MARK> :IF-` ; : REPEAT` 
|THEN : AGAIN` |<RELS :JUMP` ; : UNTIL-` |<RELS :IF-` ; : FOR` 
AHEAD` BEGIN` PUSH` SWAP ; : NEXT` THEN` POP` UNTIL-` DROP` ; 
: META ' ' 2+ ! ; : TRICE|` |THEN CALL` : TWICE|` CALL` THEN` ;
: BE! ' ! ; : >;` ADR' :JUMP` , ,<` ;  <M> 
' (;, =: ;;`
T.

0#> @ : FILL |DROP PUSH FOR J SWAP C!+  NEXT RDROP; ,< N: ERASE
0 , =, BLANK BL ,  
T.

: 2DUP TWICE| : OVER PUSH DUP XR POP ; : RANGE>S 1+ : OVER- 
OVER - ; : RNG| RANGE>S >; STR|

: |SCR CALL (EX VAL; SCR   : 1KMOD (@&; ,< 1023 , 
: |HLD CALL (EX VAL; HLD  : |XY CALL (EX : >XY 1KMOD VAL; XY 
 T.
  
' |ALIGNED VECTOR v", 
: "STR, '" : ?STR, WORD ?C@ N?? : CSTR, 
CSTR v", : STR, DUP C, : S, LASTH! STR| CSTR  C, ; : BS, CSTR 
S, ;; 
2* 2* : |CLARYW 2* :` EX v", : 
CLARY H OVER ERASE : ALLOT |H + ; 
: |2DROP EX : 2DROP DROP DROP; 
: <RNG| RANGE>S : <STR| A+L >; STR| : DXEP+|
DUP 1+ >; XEP| 

: IXEC J PUSH ; : WHILE| (IF EXIT : UNTILZ| IXEC >; WHILE| 
: UNTIL| BEGIN IXEC : WHILEZ| UNTIL >; EXIT : M: ';  : ?M: <M> 
HOFS PUSH 0 TO HOFS :` (, (MAC ?STR, POP TO HOFS <M> ;
T.
<M>
: "` (, (" "STR, ; : ."` (, (." "STR, ; : A"` (, (!" "STR, ;
: 0"` (, (0" "STR, ;
<M>
\ FIXES & ERRORS
: ` A" UNDEF!" ; META ` vUNDEF
: ` A" ODD!" ;  META ` vODD
: HODD? LASTH! HERE vODD ;   

: C:` MARK>` : ?` ADR' SWAP! ; 
: |UNW  (EX : UNW |DROP : @H- |H : @- 2- : @. @+ 2- ; 
'0 EMIT
<M> 
: BCONST (, |CH. >; CONST 
'2 EMIT
: `DO POP ADR' ,< 0 VECTOR `vDO : DO# `DO TOKEN? ">NUM
`vDO ; : ZDO `DO 0 `vDO ; : DO `DO `vDO ; : DO' `DO ' `vDO ;
<M> 
'3 EMIT


8 BCONST bs   \ VARIABLES MAC GO
DO# CONST 8 TIMES   -$700 SBUF  -$600 TIB  1024 1K  $40 1L  
  13 cr  16 1H  256 1B  10 lf
: XY? 1K LTIB - ; 
: EOS! cr ,< 0
VALUE EOS : EOS| EOS XR PUSH 0 TO EOS EX POP TO EOS ; 

\ <CALLABLE PRIMITIVES>  
: NUP XEP| DUP SB: DUP ; : 2DUP OVER OVER SB: OVER ; : TUCK DUP
: -ROT SWAP : USWAP XEP| SWAP ; : ROT USWAP SWAP ; : A! PUSH 
R>A; 
: AND NAND NOT SB: NOT ; : OR NOT 
SWAP NOT NAND SB: NAND ; : <> - : 0<> 0= 0= SB: 0= ; : = - 0= ; 
: < - 0< SB: 0< ; : |NIP EX : NIP NIP ; 0#> NUP @+ @ : WITHIN 
OVER- PUSH - POP U< SB: U< ; =, BREL? -128 , 128 , 
  
: 5+ (@+; ,< 5 , : SWAPC! SWAP : C! C!+ DROP; 
: A@ XA I XA ; 
: ?TAB HLD - : SPACES TIMES| SPC ; 
 
: CMOVTO SWAP : CMOVE |DROP FOR PUSH CSTR POP C!+ NEXT >; MSG! 
: ONPLACE | DXEP| TWICE| NUP THEN : REVERT |2DROP CALL WHILE|
PUSH PUSH J C@ I C@ J C! POP C!+ POP THEN 1- 2DUP U< ;
'2 EMIT

<M> \ CONTROLS & CREATORS
: BARY VAL |CLARYW  CP: :BARY (BARY  : WARY |CLARYW CP: :WARY 
(WARY : LARY TO |CLARYW  CP: :LARY (LARY  : QARY AT |CLARYW 
CP: :QARY (QARY : @' ' @ ; : X:` ADR' PUSH ; : @VAL VAL' @ ;
: .( ') PARSE TYPE ; 
: (code POP : TOBE vTARG @ ! ;; : DOES>` |DROP (, (code 0#> ;
: HIDE FND?? 5+ '` SWAPC! ; 
<M>

T.


: WKEY |DROP : BK 0 IO; $16CD , $90C3 , : UMOD |DROP : U/MOD 
D/M  SWAP ; : (KPRES? UNTILZ| 1B IO; $16CD , $589C , $4025 , 
$C300 , : BKEY (KPRES? BK DUP W>B 0; W>B ; 
: Key! (# BKEY ,< 0 VALUE ` UNW : KEY BKEY ; 
T.
 
\ NUMOUT \ tab NUMOUT 
: `9>? 9 OVER U< (@&; ,< 7 , : S6 | XEP| XEP| XEP|  THEN : S3
|SPC TRICE| ROT DUP : H. 1B U/MOD CALL : B. |SPC THEN 1H U/MOD 
TWICE| : DIG. |CH. : ALPHA `9>? + : 48+ (@+; ,< '0 , 

-1 H. 0 H. H H.

DFHDFGHDFGH??Q2

: <# 0 TO HLD : BASE! 2- W>B 2+ ,< 10 VALUE BASE : <#>| <# EX 
?TAB : #> DROP HLD TIMES| DIG. ; : `6 DUP 0< 0; NEG EX XEP| -10 
SWAP : HOLD |HLD 1+ ; : U. 0 : U.RS |SPC : U.R lf : U.R# <#>| :
u. 31 AND XEP| : S# UNTILZ| : # BASE U/MOD DUP HOLD ; : . 0 : 
.RS |SPC : .R lf : .R# <#>| SWAP `6 SWAP >; u. : 1K* 1K U* ;
T.

0#> C@, : REL, HERE 2+ - , ; N: CALL#, $E8 ,  =, JUMP#, $E9 ,  
0#> C@, : BREL, HERE 1+ - BREL?  N?? C, ; =, JMPS, $EB ,   
: =P ALIGNED  HERE 1+ =: ;
<M> M: RANGE>|` RANGE> DXEP+|;  M: RANGE<|` RANGE< DXEP-|;  
T.

\ ERROR ROUTINE ESTABLISH    : |BYE EX BYE ; 
: `(ERR Emt! Key! CR TBUF ID. MESSAGE ID.
29664 LTIB - 1L U/  U. 
CR BLK 0; BLK TO SCR  `ZBLK : XY!  XY? >XY ;

META `(ERR vERR    

: |KWAIT EX : K? |DROP : /LINE? 0<>; |CR BKEY 27 = 0; EOS! ;
 
\ BSCAN, SCAN, (BSC & READLN
: (BSCN XR CSTR POP : BSCAN W>B PUSH XR PUSH J FOR CSTR J - IF
 X: -ROT NEXT : NFND J PUSH : /SCAN THEN DROP POP NOT RDROP POP
 + ; : (WSC XR STR POP  : SCAN PUSH XR PUSH J FOR STR J - IF 
 ? /SCAN NEXT >; NFND 
0#> PUSH W>B XR CSTR I BSCAN 1+ XR POP DUP 0; NIP ;
=, (BSC  2 C, cr C, bs C, ALIGNED 
: `BS 2PICK OVER- 0; 1- TO bs SPC TO bs ;
: `AKEY DUP BL 1B WITHIN   IF ? DROP  DUP EMIT SWAP C!+ 
 2DUP = TO EOS ; : `TABKEY (WARY `AKEY EOS! `BS ,< 
: _RL  TIB 1L : ACCEPT |SPC EOS| OVER + OVER BEGIN KEY 
(BSC `TABKEY @EXECUTE EOS  UNTIL    NIP OVER-   ;
META _RL READLN

GHJFGHJFG---   

\ MEMORY
: 2@ 2+ @. 2- @ ; : 2! !+ ! ; 
: >ZSTR CSTR TBUF DXEP| CMOVTO MESSAGE : OFF 0 SWAP! ; 
: C@+ 1+DXEP| C@ ; : PAD H 320 + ;
: ON -1 SWAP! ; 
: BB>W >HI SWAP W>B + ; 

\ IO
: XDROT XEP| : DROT GO| ? ROT  : D0 0 0 ; 
ZDO VALUE 6 TIMES _FL _AX _BX _CX _DX _DX2 
: IO? _FL ODD A" IO?" ; 
: |REGS EX TO _FL TO _AX TO _BX TO _CX TO _DX ; 
: `File| >ZSTR : `IO?| EX IO? _AX _DX TO _DX2 ; 
0#> @ : (DOS |REGS IO; $21CD , =H `@INT  DO# C, 16 TIMES  
 $89 $1C $89 $4C $02 $89 $54 $04 $9C $4E $4E $89 $04 $58 $C3 0
N: Fread $3F00 , N: Fwrite $4000 ,  =, Fseek $4200 ,
: >POS: CREATE BB,  >, DOES> C@+ C@+ PUSH : GOTOXY BB>W D0 $200
: (VID |REGS IO; $10CD , ' `@INT  JMPS, : CRS TIMES| CR ; 
0 24 >POS: PAGE 26  CRS  : HOME D0 GOTOXY ; 
0#> @ DROT (DOS ; : FOPEN `File|   ,<  N: `Fopen $3D02 , 
: FCREATE `File| ,<  =, `Fcreate $3C00 , 
0#> @ XDROT (DOS ;  =, Fclose $3E00 ,

 SPC H H. H DUP U. .   DFH-DFG-HDF-GHD-FGH

\ FLUSH
4 CONST `NBUFS    ZDO VALUE 4 TIMES `PREV FIRST `USE SCRH
$E800 TO FIRST    : `@FBUFS `PREV ,< `NBUFS BARY `FBUFS  
   -1 TO SCRH     : `@BUFS  `PREV ,< `NBUFS WARY `BUFS
: `1KRW| DROP 1K : `AXDX| SCRH >; `IO?|
: `fsk 1K UM* `AXDX| Fseek ; : WBLK `fsk |DROP `1KRW| Fwrite ;
: RBLK `fsk |DROP `1KRW| Fread ; 
: `@BUF `PREV 1K U* FIRST + ; : UPDATE  `@FBUFS 1 SWAPC! ; 
: -BUF `@BUFS ON : DISCARD `@FBUFS 0 SWAPC! ; 
: `+BUF `USE 1+ `NBUFS 1- AND DUP TO `USE ;    
: !BUFS  `NBUFS TIMES| `+BUF TO `PREV
: `?SAVE `@FBUFS C@ 0; `@BUF `@BUFS @ WBLK DISCARD ;
: FLUSH !BUFS       : /BUFS `NBUFS TIMES| `+BUF TO `PREV
: `EMPTY-BUF -BUF   : `/BUF `@BUF 1K ERASE ;
: `?BUF PUSH 0 `BUFS `NBUFS POP SCAN ;
: `;ABLK /BLK  XR PUSH J `?BUF EX RDROP `@BUF ;
: BUFFER `;ABLK -IF `?BUF  -IF DROP BEGIN `+BUF `PREV - UNTIL
     `USE THEN THEN TO `PREV `?SAVE `/BUF J `@BUFS ! ;
: BLOCK `;ABLK -IF DROP J BUFFER J RBLK ;THEN TO `PREV ;
: `-USE SCRH 1+ 0; SCRH Fclose : `/SCR -1 TO SCRH ; 
: USE/ `/SCR /BUFS ; : FCUT FLUSH `fsk 0 SCRH Fwrite ;
: USING TOKEN? : USED FLUSH `-USE FOPEN TO SCRH ;
: `SOURCE BLK 0; ETIB 0<>; BLK BLOCK 1K + TO ETIB ;
: THRU RANGE>| : LOAD 1K OVER TI| >; @EVAL   
\ : SHOW -4 `FBUFS 17 DUMP ;  
' `SOURCE BE! PARSE    USE/  

\ CMOVE, PRUNE & DEA - DICTIONARY ENTRY ADDRESS
: >DEA 4+ : NAME> CSTR + ; : `NAMOV? DXEP| 5+ C@ '` - 0; J @ 1B
 HERE  WITHIN 0; J DUP >DEA OVER- MESSAGE CMOVTO ;
: PRUNE HERE MSG! CALL |T DROP PUSH HERE MESSAGE OVER- POP
 MPUSH ;THEN T CALL WHILE| `NAMOV? >DEA THEN DUP : DEA? 4+ C@ ;
\ : UPDATE ; : -BUF ; : /BUFS ; : FLUSH ;

\ WORDS 
: EVEN (@&; ,< -2 ,  
: `NAME. XEP| J DEA? 1 + CNTC + 80 U< /LINE?  J 4+ ID. ; 
: WORDS EOS| CR 0 T BEGIN
 DUP DEA? WHILE `NAME. >DEA U1+ EOS UNTIL THEN DROP . ; 
: FORGET FND?? DUP  >DEA TO T  @ EVEN >; OBJ!
: DICT>S CALL  OVER- 5+ ;THEN T DUP TO DEA? WHILE| AT DEA? ; 
\ : CMOVE> A+L SWAP MPUSH >; MSG! 

-------------------

\ DEBUGERR 1
: WFIND vTARG IO; $04E8 , $3B00 , $FC5D , $C3 C, ' @FIND? 
JUMP#, ALIGNED CREATE `DBGSAV Z, Z, 
: `EMTIN TO EMIT A@ `DBGSAV 2! StdEmit! CR ; : R3 POP POP POP J
 H. PUSH J H. PUSH J H. PUSH ; : `.WID. ID. : WID. 4+ ID. ; 
: @ID. DUP H. STR DUP H. SWAP @ H.  : ?ID. WFIND IF WID. ;THEN 
 2- WFIND IF " VAL" (JUMP `.WID. THEN 4+ WFIND IF " TO" (JUMP 
`.WID. THEN 2+ WFIND IF " AT" (JUMP `.WID. THEN 4 - : $. ." $" 
H. ; : DBG. `EMTIN R3 I |WAIT : `DBG SPC PUSH S3 POP HERE H. 
vTARG H. `DBGSAV @ H. SPC @ID. `DBGSAV 2@ A! AT EMIT ;


\ DUMP AND
: [ID] CSTR : [S] |SPC |DROP : [TYPE] |[] TIMES| CSTR DUP BL U<
 IF DROP '. THEN EMIT ;  : UNITS? D/M  0; 1+ ; 
: `BD |SPC STR| CSTR B. ; : DUMP 1H UNITS? STR| 
: DU CR DUP H. SPC 1H 2DUP `BD [TYPE] ;

: TEST 1 2 3 " 1234" ; 0 VALUE `ADR2 : `" (WSC ,< 3 , >, (!" ("
 (." ,< : `|WW CALL EX (SET2 THEN ,< 0 CONST `WW 
 : `A:? WFIND IF ? DROP ." : " 
WID. ; : SEE ' : @SEE TO `WW : SL bs TIMES| : WW `|WW CR DUP H.
 DUP `A:? STR DUP H. DUP ?ID. `" 1+ 0; PUSH ("R+ [ID] POP ;
 
=P 4TH>  $E3FF , \ DEBUGERR 2 \ STEP BY STEP
: TRACE ' CALL : TROFF IO; $8BB9 , $0F C, HERE =: `@X_TRACE
   $0E87 , @VAL ;;` , $C3 C,  : TRONEX THEN PUSH
: TRON IO; $EBB9 ,  @VAL :NEXT` 4 - @VAL ;;` 2+ - 
  BREL? N?? C, ' `@X_TRACE JMPS, ALIGNED
: @DBG      ,<  VAL' TROFF CALL#,   @VAL EX` 1- CALL#, >, 
 `EMTIN R3 I `DBG BKEY  4TH> ,< 
VAL' TRON  CALL#,    $DF24 , $533C ,  $75AD , 03 C,
VAL' TROFF CALL#,    $8B5B , $F C, @VAL ;;` 2+ JUMP#, ALIGNED
' @DBG @VAL :NEXT` 1- -      @VAL :NEXT` 3 - !
VAL' TROFF  @' RESTART 8 + - @' RESTART 6 + !
HIDE 4TH>   HIDE @DBG

SPC H H. H DUP U. .   DFH-DFG-HDF-GHD-FGH

\ PREPARE FOR COMPILING EDITOR


\ COMPARING PRIMITIVES  
: RED| 2DUP EX IF ? SWAP ; 
: UMAX |NIP : URED RED| U< ; : UMIN |DROP URED ; 
: MAX |NIP  : REDI RED| < ;
: MIN |DROP >; REDI

\ EMPTY FOR NOW STUBS

: { '} PARSE 2DROP ;    ' { =: {`
' \ =: \`       \ COMMENTS WORKS NOW IN COMPILER STATE
\ : _BLK 1K U* 1B + ;  ' _BLK DEFER BLOCK

: SCR- |SCR DUP 0; 1- ; : SCR+ |SCR 1+ ;

: |SPTR CALL EX (SET2 THEN ,< 0 CONST SPTR
0 VALUE SPTRTOP   
: (@|; @R+ RDROP : OR NOT SWAP NOT NAND ;

: S> SPTR : SDROP |SPTR : NAME> CSTR + ; : SPTRTOP? SPTRTOP T -
 SPTR SPTRTOP U< 0= OR 0; T DUP  TO SPTRTOP TO SPTR TWICE| D0 
: >S W>B |SPTR MPUSH 1- ; : >S! CSTR >S ;  

: LIST DUP TO SCR BLOCK : .BLOCK CALL SCR : NU. 6 U.R ;THEN 
 1H STR| 1H J NOT + J ?|CR : .LINE 2 U.RS 1L [TYPE] ;

\ ' (# =: (LIT


17 . \ 17 BLOCK1 OF EDITOR
ZDO VALUE 6 TIMES  `PDATA `INS  `SZ  `ALTER `X `Y
' ETIB =: `EOS^ 

: `MOVER CONST DOES> @ : `XY+ |XY + ; 4 `MOVER `4+> 
-1 `MOVER `<-  1 `MOVER `->  -64 `MOVER `L_UP 64 `MOVER `L_DN    
: `L_END |XY : `/L (@|; ,< 63 , : `<_| `L_DN  : `L_BEG |XY L/ ;
: `|POS XY EX `PDATA + ; : `POS^ `|POS ;; ,< 
: `LINE/ `|POS L/ ;  : `/LINE `|POS `/L ; : `EOL `|POS `/L 1+ ;
: `PREPINS XEP|  `POS^ J `SZ - DUP : `SZBLANK `SZ BLANK ;
: `|DELPOS `POS^ DUP `SZ + OVER `SZBLANK EX ONPLACE ;
: `|INSPOS EX `PREPINS ONPLACE ; : `SZMOV `/LINE `POS^ - ;
: `REST 1K XY - ;


18 . \  BLOCK2 OF EDITOR
: `XY>CR XY 1L U/MOD TO `Y TO `X ; : `_INS `INS 0= TO `INS ; 
75 15 >POS: `ENDPOS EOS! ; : `ESQ/E /BUFS `ENDPOS ; 
72 0 >POS: `.INS `INS IF ." INS" ;THEN ." OVT" ; 
70 2 >POS: `.INBUF XY NU. ; : `Q/ED FLUSH `ENDPOS ; 
70 4 >POS: `.X.Y `X 3 U.R `Y 3 U.R ; 
70 6 >POS: `.CH `POS^ C@ DUP '$ EMIT B. 3 .R ; 
70 8 >POS: `.TEST ."  TEST " `Y . ;
: `STATE. `.INS `.INBUF `.CH `XY>CR `.X.Y
: `POSXY `X 4+ `Y GOTOXY ;
: `|LDRU 1 TO `SZ EX UPDATE `POSXY `LINE/ `Y TO cr .LINE DROP ;
: `TAB> `4+> SKIP : `<TAB  `<- |XY (@&; ,< -4 , 
: `RELOAD SCR BLOCK DUP TO `PDATA 1K + TO ETIB  SPTRTOP? ;

19 . \  BLOCK2 OF EDITOR
: `1L<?| 1L   : `>SZ?| TO `SZ 
: `SZ<?| `REST `SZ U< IF RDROP; THEN : `|RDRC EX SKIP
: `RESET -BUF : `LOADRAW `RELOAD : `REDRAW HOME `PDATA .BLOCK ;
: `B SCR- SKIP : `N SCR+ `LOADRAW ; : `ZPOS 0 TO XY ;  
: `ALT GO| ? `LOADRAW `ALTER |SCR TO `ALTER ; 
: `DELL `1L<?| : `DO-DEL `|DELPOS `EOS^ ; 
: `INSL `1L<?| : `DO-INS `|INSPOS `EOS^ ; 
: `INSC `|LDRU CALL `POS^ C! ;THEN `INS 0; `SZMOV 0; `|INSPOS
 `EOL ; : `BS `<-  : `DELC `|LDRU `|DELPOS `EOL ; : `ONEC DUP
 BL U< IF : `WHAT? DROP : WHAT? 7 EMIT ;THEN `INSC `-> ;
: `TEST BL `POS^ C@ U< ;  : `<XY0; `<- : `XY0; XY >; 0;
: `BACK BEGIN `<XY0; `TEST UNTIL BEGIN `<XY0; `TEST 0= UNTIL 
`-> ; : `ADV `REST TO LTIB BL PARSE TO `SZ DROP XY! `XY0; `<- ;
 
20 . \  BLOCK2 OF EDITOR
: `AW `ADV : `PREP { ARE} `BACK  : `SKIP `ADV `-> ;
: `SCR; `ZPOS `<- : `PREPARE `L_END `PREP ;
: `altS 1L 1+ `>SZ?| 1L TO `SZ `POS^
`<_| `DO-INS `POS^ 2DUP - NUP - ONPLACE ; 
: `COPY `1L<?| RDROP : `DO-COPY `POS^ `SZ DUP `XY+ >S ; 
: `CUT `1L<?| : `DO-CUT `DO-COPY  `SZ NEG `XY+ `DO-DEL ;
: `BKCW `AW `BACK `BACK 
: `CUTW `AW `SZ 0; `SZ 1+ TO `SZ `BACK `|RDRC `DO-CUT `PREP ; 
: `MOVE `CUTW `SZ 0; GO| ? `SKIP 
: `PASTE SPTR C@ DUP TO `SZ 0; `SZ<?| 
: `DO-PASTE `DO-INS S> 1+ `POS^ `SZ CMOVE ; 

: `WIPE ;



21 . \  BLOCK5 OF EDITOR \ KEY CONSTANTS}
DO# =: 19 TIMES 
30 kaA 75 kLEFT 72 kUP 71 kHOME 79 kEND 73 kPGUP 81 kPGDN
80 kDOWN 77 kRIGHT 82 kINS 83 kDEL 17 kaW 116 kcRIGHT
115 kcLEFT 117 kcEND 15 ksTAB 119 kcHOME 31 kaS 32 kaD
 
@' (BSC =, `EFtblC 19 C,  DO' C, 19 TIMES 
 kaA kLEFT kUP kHOME kEND kPGUP kPGDN kDOWN kRIGHT kINS kDEL
 kaW kcRIGHT kcLEFT kcEND ksTAB kcHOME kaS kaD 

ALIGNED : `EFtbl (WARY  
 `WHAT? `ALT `<- `L_UP `L_BEG `L_END `B `N `L_DN `-> `_INS
 `DELC `WIPE `ADV `BACK `SCR; `<TAB `ZPOS `altS `DELL ,<

22 . \  BLOCK5 OF EDITOR \ KEY CONSTANTS
 @' (BSC =, `EKtblC  20 C, DO# C, 20 TIMES
^J ^K ^X 127 ^H ^D ^M ^G ^Z ^N ^B ^R ^I ^C ^V ^Q ^F ^A ^[ ^S
ALIGNED : `EKtbl (WARY
 `ONEC `<- `-> `CUT `BKCW `BS `DELC `<_| `CUTW `PREPARE `N `B
 `RESET `TAB> `COPY `PASTE `ESQ/E `MOVE `ADV `Q/ED `INSL  ,<
: `@KEY KEY W>BB DUP 
    IF     NIP `EFtblC `EFtbl   ;THEN DROP `EKtblC `EKtbl ;
: EDIT TO SCR : PE PAGE : E  D0 MEMTI| `LOADRAW EOS|
 BEGIN `STATE. `@KEY @EXECUTE EOS UNTIL ;  


23 . \  BLOCK5 OF EDITOR \ KEY CONSTANTS ;; }

EDITOR----
M: TRICE|` CALL TWICE| THEN; M: |VAL;` CALL EX (SET2 THEN ,<;
M: RANGE>|` RANGE> 1+DXEP|;  M: RANGE<|` RANGE< 1-DXEP|;  
: 2PICK PUSH OVER XR POP ; 

: CSP! (SP@ ,< 0 VALUE CSP ' CSP! BE! : : CSP? SP@ CSP SWAP - ;
\ : ?,< CSP? 0<>; ,<` ;  : LH- LASTH H - ;  
\ : ;` ?,< CSP? 0< ?? (| (;, LH- 0; LH- 2+ 0<>; LASTH @ ODD
\  0<>;  LASTH @ (# (JUMP LASTH ! (JUMP <RELS` ,<
\ '1 '2 : GAGA BEGIN UNTIL ;  GAGA EMIT
\ : //? ?? ;  H 2- @ ' ?? - 'A + EMIT
